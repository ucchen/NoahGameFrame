// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NFMsgShare.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NFMsg {

  /// <summary>Holder for reflection information generated from NFMsgShare.proto</summary>
  public static partial class NFMsgShareReflection {

    #region Descriptor
    /// <summary>File descriptor for NFMsgShare.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NFMsgShareReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBORk1zZ1NoYXJlLnByb3RvEgVORk1zZxoOTkZEZWZpbmUucHJvdG8aD05G",
            "TXNnQmFzZS5wcm90byJeChJSZXFFbnRlckdhbWVTZXJ2ZXISGAoCaWQYASAB",
            "KAsyDC5ORk1zZy5JZGVudBIPCgdhY2NvdW50GAIgASgMEg8KB2dhbWVfaWQY",
            "AyABKAUSDAoEbmFtZRgEIAEoDCIlChZSZXFBY2tFbnRlckdhbWVTdWNjZXNz",
            "EgsKA2FyZxgBIAEoBSIbCgxSZXFIZWFydEJlYXQSCwoDYXJnGAEgASgFIiEK",
            "ElJlcUxlYXZlR2FtZVNlcnZlchILCgNhcmcYASABKAUitwEKD1BsYXllckVu",
            "dHJ5SW5mbxIhCgtvYmplY3RfZ3VpZBgBIAEoCzIMLk5GTXNnLklkZW50EgkK",
            "AXgYAiABKAISCQoBeRgDIAEoAhIJCgF6GAQgASgCEhMKC2NhcmVlcl90eXBl",
            "GAUgASgFEhQKDHBsYXllcl9zdGF0ZRgGIAEoBRIRCgljb25maWdfaWQYByAB",
            "KAwSEAoIc2NlbmVfaWQYCCABKAUSEAoIY2xhc3NfaWQYCSABKAwiQQoSQWNr",
            "UGxheWVyRW50cnlMaXN0EisKC29iamVjdF9saXN0GAEgAygLMhYuTkZNc2cu",
            "UGxheWVyRW50cnlJbmZvIjcKEkFja1BsYXllckxlYXZlTGlzdBIhCgtvYmpl",
            "Y3RfbGlzdBgBIAMoCzIMLk5GTXNnLklkZW50IoYCCg1SZXFBY2tTeW5EYXRh",
            "EhsKBXN5c2VyGAEgASgLMgwuTkZNc2cuSWRlbnQSIQoLb2JqZWN0X2xpc3QY",
            "AiADKAsyDC5ORk1zZy5JZGVudBIMCgRkYXRhGAMgASgMEi4KCHN5bl90eXBl",
            "GAQgASgOMhwuTkZNc2cuUmVxQWNrU3luRGF0YS5TeW5UeXBlEiAKBm1zZ19p",
            "ZBgFIAEoDjIQLk5GTXNnLkVTeW5Nc2dJRCJVCgdTeW5UeXBlEg4KCkVTVF9V",
            "TktOT1cQABINCglFU1RfR1JPVVAQARINCglFU1RfU0NFTkUQAhIMCghFU1Rf",
            "Q0xBThADEg4KCkVTVF9GUklFTkQQBCLhAQoQUmVxQWNrUGxheWVyTW92ZRIb",
            "CgVtb3ZlchgBIAEoCzIMLk5GTXNnLklkZW50EhAKCG1vdmVUeXBlGAIgASgF",
            "Eg0KBXNwZWVkGAMgASgCEgwKBHRpbWUYBCABKAUSEQoJbGFzdFN0YXRlGAUg",
            "ASgFEiIKCnRhcmdldF9wb3MYBiADKAsyDi5ORk1zZy5WZWN0b3IzEiIKCnNv",
            "dXJjZV9wb3MYByADKAsyDi5ORk1zZy5WZWN0b3IzEiYKDm1vdmVfZGlyZWN0",
            "aW9uGAggAygLMg4uTkZNc2cuVmVjdG9yMyKuAwoQUmVxQWNrUGxheWVyQ2hh",
            "dBIdCgdjaGF0X2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSOAoJY2hhdF90eXBl",
            "GAIgASgOMiUuTkZNc2cuUmVxQWNrUGxheWVyQ2hhdC5FR2FtZUNoYXRUeXBl",
            "EhEKCWNoYXRfaW5mbxgDIAEoDBIRCgljaGF0X25hbWUYBCABKAwSHwoJdGFy",
            "Z2V0X2lkGAUgASgLMgwuTkZNc2cuSWRlbnQSPQoOQ29udGFpbmVyX2RhdGEY",
            "BiADKAsyJS5ORk1zZy5SZXFBY2tQbGF5ZXJDaGF0LkNoYXRDb250YWluZXIa",
            "agoNQ2hhdENvbnRhaW5lchIVCg1Db25UYWluZXJUeXBlGAIgASgFEhEKCWRh",
            "dGFfaW5mbxgDIAEoDCIvCg1Db250YWluZXJUeXBlEg8KC0VHQ1RfVU5LTk9X",
            "EAASDQoJRUdDVF9JVEVNEAEiTwoNRUdhbWVDaGF0VHlwZRINCglFR0NUX0NM",
            "QU4QABIQCgxFR0NUX1BSSVZBVEUQARINCglFR0NUX1RFQU0QAhIOCgpFR0NU",
            "X1dPUkxEEAMivwEKE1JlcUFja1BsYXllclBvc1N5bmMSGwoFbW92ZXIYASAB",
            "KAsyDC5ORk1zZy5JZGVudBIMCgR0aW1lGAIgASgFEhkKEUludGVycG9sYXRp",
            "b25UaW1lGAMgASgCEiAKCHBvc2l0aW9uGAQgASgLMg4uTkZNc2cuVmVjdG9y",
            "MxIhCglkaXJlY3Rpb24YBSABKAsyDi5ORk1zZy5WZWN0b3IzEg4KBnN0YXR1",
            "cxgGIAEoBRINCgVmcmFtZRgHIAEoBSLTAQoKRWZmZWN0RGF0YRIiCgxlZmZl",
            "Y3RfaWRlbnQYASABKAsyDC5ORk1zZy5JZGVudBIUCgxlZmZlY3RfdmFsdWUY",
            "AiABKAUSMQoKZWZmZWN0X3JsdBgDIAEoDjIdLk5GTXNnLkVmZmVjdERhdGEu",
            "RVJlc3VsdFR5cGUiWAoLRVJlc3VsdFR5cGUSDAoIRUVUX0ZBSUwQABIPCgtF",
            "RVRfU1VDQ0VTUxABEg4KCkVFVF9SRUZVU0UQAhIMCghFRVRfTUlTUxADEgwK",
            "CEVFVF9DUklUEAQieQoOUmVxQWNrVXNlU2tpbGwSGgoEdXNlchgBIAEoCzIM",
            "Lk5GTXNnLklkZW50EhAKCHNraWxsX2lkGAIgASgMEhEKCXVzZV9pbmRleBgD",
            "IAEoBRImCgtlZmZlY3RfZGF0YRgEIAMoCzIRLk5GTXNnLkVmZmVjdERhdGEi",
            "1wEKDVJlcUFja1VzZUl0ZW0SGgoEdXNlchgBIAEoCzIMLk5GTXNnLklkZW50",
            "Eh8KCWl0ZW1fZ3VpZBgCIAEoCzIMLk5GTXNnLklkZW50EiYKC2VmZmVjdF9k",
            "YXRhGAMgAygLMhEuTkZNc2cuRWZmZWN0RGF0YRIfCgRpdGVtGAQgASgLMhEu",
            "TkZNc2cuSXRlbVN0cnVjdBIeCgh0YXJnZXRpZBgFIAEoCzIMLk5GTXNnLklk",
            "ZW50EiAKCHBvc2l0aW9uGAYgASgLMg4uTkZNc2cuVmVjdG9yMyLzAQoPUmVx",
            "QWNrU3dhcFNjZW5lEjsKDXRyYW5zZmVyX3R5cGUYASABKA4yJC5ORk1zZy5S",
            "ZXFBY2tTd2FwU2NlbmUuRUdhbWVTd2FwVHlwZRIQCghzY2VuZV9pZBgCIAEo",
            "BRIPCgdsaW5lX2lkGAMgASgFEgkKAXgYBCABKAISCQoBeRgFIAEoAhIJCgF6",
            "GAYgASgCEgwKBGRhdGEYByABKAwiUQoNRUdhbWVTd2FwVHlwZRIPCgtFR1NU",
            "X05BUk1BTBAAEg4KCkVHU1RfQ0xPTkUQARIOCgpFR1NUX0FSRU5BEAISDwoL",
            "RUdTVF9NSVJST1IQAyIfCg9SZXFBY2tIb21lU2NlbmUSDAoEZGF0YRgBIAEo",
            "DCIxCgpJdGVtU3RydWN0Eg8KB2l0ZW1faWQYASABKAwSEgoKaXRlbV9jb3Vu",
            "dBgCIAEoBSI/Cg5DdXJyZW5jeVN0cnVjdBIVCg1jdXJyZW5jeV90eXBlGAEg",
            "ASgFEhYKDmN1cnJlbmN5X2NvdW50GAIgASgFIkIKEFJlcUFja1JlbGl2ZUhl",
            "cm8SDwoHZGlhbW9uZBgBIAEoBRIdCgdoZXJvX2lkGAIgASgLMgwuTkZNc2cu",
            "SWRlbnQiMgoPUmVxUGlja0Ryb3BJdGVtEh8KCWl0ZW1fZ3VpZBgCIAEoCzIM",
            "Lk5GTXNnLklkZW50IiAKDVJlcUFjY2VwdFRhc2sSDwoHdGFza19pZBgBIAEo",
            "DCIjChBSZXFDb21wZWxldGVUYXNrEg8KB3Rhc2tfaWQYASABKAwi0gEKE1Jl",
            "cUFkZFNjZW5lQnVpbGRpbmcSGwoDcG9zGAEgASgLMg4uTkZNc2cuVmVjdG9y",
            "MxIaCgRndWlkGAIgASgLMgwuTkZNc2cuSWRlbnQSHAoGbWFzdGVyGAMgASgL",
            "MgwuTkZNc2cuSWRlbnQSEQoJY29uZmlnX2lkGAQgASgMEhAKCHNjZW5lX2lk",
            "GAUgASgFEhMKC21hc3Rlcl9uYW1lGAYgASgMEhUKDWlzX2hvbWVfc2NlbmUY",
            "ByABKAUSEwoLaXNfYnVpbGRpbmcYCCABKAUiQgoRUmVxU2NlbmVCdWlsZGlu",
            "Z3MSEAoIc2NlbmVfaWQYASABKAUSGwoDcG9zGAIgASgLMg4uTkZNc2cuVmVj",
            "dG9yMyJCChFBY2tTY2VuZUJ1aWxkaW5ncxItCglidWlsZGluZ3MYASADKAsy",
            "Gi5ORk1zZy5SZXFBZGRTY2VuZUJ1aWxkaW5nInoKFlJlcVN0b3JlU2NlbmVC",
            "dWlsZGluZ3MSGgoEZ3VpZBgBIAEoCzIMLk5GTXNnLklkZW50EhUKDWhvbWVf",
            "c2NlbmVfaWQYAiABKAUSLQoJYnVpbGRpbmdzGAMgAygLMhouTkZNc2cuUmVx",
            "QWRkU2NlbmVCdWlsZGluZyJEChBSZXFBY2tDcmVhdGVDbGFuEh0KB2NsYW5f",
            "aWQYASABKAsyDC5ORk1zZy5JZGVudBIRCgljbGFuX25hbWUYAiABKAwiIgoN",
            "UmVxU2VhcmNoQ2xhbhIRCgljbGFuX25hbWUYASABKAwihAIKDUFja1NlYXJj",
            "aENsYW4SOAoJY2xhbl9saXN0GAEgAygLMiUuTkZNc2cuQWNrU2VhcmNoQ2xh",
            "bi5TZWFyY2hDbGFuT2JqZWN0GrgBChBTZWFyY2hDbGFuT2JqZWN0Eh0KB2Ns",
            "YW5fSUQYASABKAsyDC5ORk1zZy5JZGVudBIRCgljbGFuX25hbWUYAiABKAwS",
            "EQoJY2xhbl9pY29uGAMgASgMEhkKEWNsYW5fbWVtYmVyX2NvdW50GAQgASgF",
            "Eh0KFWNsYW5fbWVtYmVyX21heF9jb3VudBgFIAEoBRISCgpjbGFuX2hvbm9y",
            "GAYgASgFEhEKCWNsYW5fcmFuaxgHIAEoBSJCCg5SZXFBY2tKb2luQ2xhbhId",
            "CgdjbGFuX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSEQoJY2xhbl9uYW1lGAIg",
            "ASgMIkMKD1JlcUFja0xlYXZlQ2xhbhIdCgdjbGFuX2lkGAEgASgLMgwuTkZN",
            "c2cuSWRlbnQSEQoJY2xhbl9uYW1lGAIgASgMItUBChNSZXFBY2tPcHJDbGFu",
            "TWVtYmVyEh0KB2NsYW5faWQYASABKAsyDC5ORk1zZy5JZGVudBIfCgltZW1i",
            "ZXJfaWQYAiABKAsyDC5ORk1zZy5JZGVudBI8CgR0eXBlGAMgASgOMi4uTkZN",
            "c2cuUmVxQWNrT3ByQ2xhbk1lbWJlci5FR0NsYW5NZW1iZXJPcHJUeXBlIkAK",
            "E0VHQ2xhbk1lbWJlck9wclR5cGUSDQoJRUdBVF9ET1dOEAASCwoHRUdBVF9V",
            "UBABEg0KCUVHQVRfS0lDSxACIjMKElJlcUVudGVyQ2xhbkVjdHlwZRIdCgdj",
            "bGFuX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQiPAoPUmVxU2V0RmlnaHRIZXJv",
            "EhwKBkhlcm9pZBgBIAEoCzIMLk5GTXNnLklkZW50EgsKA1NldBgCIAEoBSIy",
            "ChJSZXFTd2l0Y2hGaWdodEhlcm8SHAoGSGVyb2lkGAEgASgLMgwuTkZNc2cu",
            "SWRlbnQiMwoSUmVxQnV5SXRlbUZyb21TaG9wEg4KBml0ZW1JRBgBIAEoDBIN",
            "CgVjb3VudBgCIAEoBSLuAgoNUFZQUGxheWVySW5mbxIYCgJpZBgBIAEoCzIM",
            "Lk5GTXNnLklkZW50Eg4KBnNpbmdsZRgCIAEoBRINCgVsZXZlbBgEIAEoBRIU",
            "CgxiYXR0bGVfcG9pbnQYBSABKAUSDAoEbmFtZRgGIAEoDBIMCgRoZWFkGAcg",
            "ASgMEgwKBGdvbGQYCCABKAUSDwoHZGlhbW9uZBgJIAEoBRIRCgloZXJvX2Nu",
            "ZjEYFCABKAwSEQoJaGVyb19jbmYyGBUgASgMEhEKCWhlcm9fY25mMxgWIAEo",
            "DBISCgpoZXJvX3N0YXIxGBkgASgFEhIKCmhlcm9fc3RhcjIYGiABKAUSEgoK",
            "aGVyb19zdGFyMxgbIAEoBRIeCghoZXJvX2lkMRgcIAEoCzIMLk5GTXNnLklk",
            "ZW50Eh4KCGhlcm9faWQyGB0gASgLMgwuTkZNc2cuSWRlbnQSHgoIaGVyb19p",
            "ZDMYHiABKAsyDC5ORk1zZy5JZGVudCJsChBSZXFTZWFyY2hPcHBuZW50EhIK",
            "CnNlbGZfc2NlbmUYASABKAUSDwoHZGlhbW9uZBgCIAEoBRIUCgxiYXR0bGVf",
            "cG9pbnQYAyABKAUSHQoHZnJpZW5kcxgKIAMoCzIMLk5GTXNnLklkZW50ItYB",
            "ChBBY2tTZWFyY2hPcHBuZW50EhAKCHNjZW5lX2lkGAEgASgFEh0KB3RlYW1f",
            "aWQYAiABKAsyDC5ORk1zZy5JZGVudBIWCg5nYW1ibGVfZGlhbW9uZBgDIAEo",
            "BRIiCgx0ZWFtX21lbWJlcnMYBSADKAsyDC5ORk1zZy5JZGVudBImCghvcHBv",
            "bmVudBgOIAEoCzIULk5GTXNnLlBWUFBsYXllckluZm8SLQoJYnVpbGRpbmdz",
            "GBQgAygLMhouTkZNc2cuUmVxQWRkU2NlbmVCdWlsZGluZyIyChJSZXFBY2tD",
            "YW5jZWxTZWFyY2gSHAoGc2VsZmlkGAEgASgLMgwuTkZNc2cuSWRlbnQiIAoM",
            "UmVxRW5kQmF0dGxlEhAKCGF1dG9fZW5kGAEgASgFIukBCgxBY2tFbmRCYXR0",
            "bGUSCwoDd2luGAEgASgFEgwKBHN0YXIYAiABKAUSDAoEZ29sZBgDIAEoBRIL",
            "CgNjdXAYBCABKAUSDwoHZGlhbW9uZBgFIAEoBRIOCgZzaW5nbGUYBiABKAUS",
            "HQoHdGVhbV9pZBgHIAEoCzIMLk5GTXNnLklkZW50Eh4KCG1hdGNoX2lkGAgg",
            "ASgLMgwuTkZNc2cuSWRlbnQSHQoHbWVtYmVycxgJIAMoCzIMLk5GTXNnLklk",
            "ZW50EiQKCWl0ZW1fbGlzdBgKIAMoCzIRLk5GTXNnLkl0ZW1TdHJ1Y3QigQEK",
            "C1JlcVNlbmRNYWlsEh4KCHJlY2lldmVyGAEgASgLMgwuTkZNc2cuSWRlbnQS",
            "JAoJaXRlbV9saXN0GAIgAygLMhEuTkZNc2cuSXRlbVN0cnVjdBIsCg1jdXJy",
            "ZW5jeV9saXN0GAMgAygLMhUuTkZNc2cuQ3VycmVuY3lTdHJ1Y3QiuQEKD1Jl",
            "cVN3aXRjaFNlcnZlchIcCgZzZWxmaWQYASABKAsyDC5ORk1zZy5JZGVudBIV",
            "Cg1zZWxmX3NlcnZlcmlkGAIgASgDEhcKD3RhcmdldF9zZXJ2ZXJpZBgDIAEo",
            "AxIVCg1nYXRlX3NlcnZlcmlkGAQgASgDEg8KB1NjZW5lSUQYBSABKAMSHwoJ",
            "Y2xpZW50X2lkGAYgASgLMgwuTkZNc2cuSWRlbnQSDwoHZ3JvdXBJRBgHIAEo",
            "AyJ2Cg9BY2tTd2l0Y2hTZXJ2ZXISHAoGc2VsZmlkGAEgASgLMgwuTkZNc2cu",
            "SWRlbnQSFQoNc2VsZl9zZXJ2ZXJpZBgCIAEoAxIXCg90YXJnZXRfc2VydmVy",
            "aWQYAyABKAMSFQoNZ2F0ZV9zZXJ2ZXJpZBgEIAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NFMsg.NFDefineReflection.Descriptor, global::NFMsg.NFMsgBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqEnterGameServer), global::NFMsg.ReqEnterGameServer.Parser, new[]{ "id", "account", "game_id", "name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckEnterGameSuccess), global::NFMsg.ReqAckEnterGameSuccess.Parser, new[]{ "arg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqHeartBeat), global::NFMsg.ReqHeartBeat.Parser, new[]{ "arg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqLeaveGameServer), global::NFMsg.ReqLeaveGameServer.Parser, new[]{ "arg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PlayerEntryInfo), global::NFMsg.PlayerEntryInfo.Parser, new[]{ "object_guid", "x", "y", "z", "career_type", "player_state", "config_id", "scene_id", "class_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckPlayerEntryList), global::NFMsg.AckPlayerEntryList.Parser, new[]{ "object_list" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckPlayerLeaveList), global::NFMsg.AckPlayerLeaveList.Parser, new[]{ "object_list" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckSynData), global::NFMsg.ReqAckSynData.Parser, new[]{ "syser", "object_list", "data", "syn_type", "msg_id" }, null, new[]{ typeof(global::NFMsg.ReqAckSynData.Types.SynType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerMove), global::NFMsg.ReqAckPlayerMove.Parser, new[]{ "mover", "moveType", "speed", "time", "lastState", "target_pos", "source_pos", "move_direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerChat), global::NFMsg.ReqAckPlayerChat.Parser, new[]{ "chat_id", "chat_type", "chat_info", "chat_name", "target_id", "Container_data" }, null, new[]{ typeof(global::NFMsg.ReqAckPlayerChat.Types.EGameChatType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerChat.Types.ChatContainer), global::NFMsg.ReqAckPlayerChat.Types.ChatContainer.Parser, new[]{ "ConTainerType", "data_info" }, null, new[]{ typeof(global::NFMsg.ReqAckPlayerChat.Types.ChatContainer.Types.ContainerType) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerPosSync), global::NFMsg.ReqAckPlayerPosSync.Parser, new[]{ "mover", "time", "InterpolationTime", "position", "direction", "status", "frame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.EffectData), global::NFMsg.EffectData.Parser, new[]{ "effect_ident", "effect_value", "effect_rlt" }, null, new[]{ typeof(global::NFMsg.EffectData.Types.EResultType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckUseSkill), global::NFMsg.ReqAckUseSkill.Parser, new[]{ "user", "skill_id", "use_index", "effect_data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckUseItem), global::NFMsg.ReqAckUseItem.Parser, new[]{ "user", "item_guid", "effect_data", "item", "targetid", "position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckSwapScene), global::NFMsg.ReqAckSwapScene.Parser, new[]{ "transfer_type", "scene_id", "line_id", "x", "y", "z", "data" }, null, new[]{ typeof(global::NFMsg.ReqAckSwapScene.Types.EGameSwapType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckHomeScene), global::NFMsg.ReqAckHomeScene.Parser, new[]{ "data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ItemStruct), global::NFMsg.ItemStruct.Parser, new[]{ "item_id", "item_count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.CurrencyStruct), global::NFMsg.CurrencyStruct.Parser, new[]{ "currency_type", "currency_count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckReliveHero), global::NFMsg.ReqAckReliveHero.Parser, new[]{ "diamond", "hero_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqPickDropItem), global::NFMsg.ReqPickDropItem.Parser, new[]{ "item_guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAcceptTask), global::NFMsg.ReqAcceptTask.Parser, new[]{ "task_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqCompeleteTask), global::NFMsg.ReqCompeleteTask.Parser, new[]{ "task_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAddSceneBuilding), global::NFMsg.ReqAddSceneBuilding.Parser, new[]{ "pos", "guid", "master", "config_id", "scene_id", "master_name", "is_home_scene", "is_building" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSceneBuildings), global::NFMsg.ReqSceneBuildings.Parser, new[]{ "scene_id", "pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSceneBuildings), global::NFMsg.AckSceneBuildings.Parser, new[]{ "buildings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqStoreSceneBuildings), global::NFMsg.ReqStoreSceneBuildings.Parser, new[]{ "guid", "home_scene_id", "buildings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckCreateClan), global::NFMsg.ReqAckCreateClan.Parser, new[]{ "clan_id", "clan_name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSearchClan), global::NFMsg.ReqSearchClan.Parser, new[]{ "clan_name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSearchClan), global::NFMsg.AckSearchClan.Parser, new[]{ "clan_list" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSearchClan.Types.SearchClanObject), global::NFMsg.AckSearchClan.Types.SearchClanObject.Parser, new[]{ "clan_ID", "clan_name", "clan_icon", "clan_member_count", "clan_member_max_count", "clan_honor", "clan_rank" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckJoinClan), global::NFMsg.ReqAckJoinClan.Parser, new[]{ "clan_id", "clan_name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckLeaveClan), global::NFMsg.ReqAckLeaveClan.Parser, new[]{ "clan_id", "clan_name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckOprClanMember), global::NFMsg.ReqAckOprClanMember.Parser, new[]{ "clan_id", "member_id", "type" }, null, new[]{ typeof(global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqEnterClanEctype), global::NFMsg.ReqEnterClanEctype.Parser, new[]{ "clan_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSetFightHero), global::NFMsg.ReqSetFightHero.Parser, new[]{ "Heroid", "Set" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSwitchFightHero), global::NFMsg.ReqSwitchFightHero.Parser, new[]{ "Heroid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqBuyItemFromShop), global::NFMsg.ReqBuyItemFromShop.Parser, new[]{ "itemID", "count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PVPPlayerInfo), global::NFMsg.PVPPlayerInfo.Parser, new[]{ "id", "single", "level", "battle_point", "name", "head", "gold", "diamond", "hero_cnf1", "hero_cnf2", "hero_cnf3", "hero_star1", "hero_star2", "hero_star3", "hero_id1", "hero_id2", "hero_id3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSearchOppnent), global::NFMsg.ReqSearchOppnent.Parser, new[]{ "self_scene", "diamond", "battle_point", "friends" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSearchOppnent), global::NFMsg.AckSearchOppnent.Parser, new[]{ "scene_id", "team_id", "gamble_diamond", "team_members", "opponent", "buildings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckCancelSearch), global::NFMsg.ReqAckCancelSearch.Parser, new[]{ "selfid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqEndBattle), global::NFMsg.ReqEndBattle.Parser, new[]{ "auto_end" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckEndBattle), global::NFMsg.AckEndBattle.Parser, new[]{ "win", "star", "gold", "cup", "diamond", "single", "team_id", "match_id", "members", "item_list" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSendMail), global::NFMsg.ReqSendMail.Parser, new[]{ "reciever", "item_list", "currency_list" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSwitchServer), global::NFMsg.ReqSwitchServer.Parser, new[]{ "selfid", "self_serverid", "target_serverid", "gate_serverid", "SceneID", "client_id", "groupID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSwitchServer), global::NFMsg.AckSwitchServer.Parser, new[]{ "selfid", "self_serverid", "target_serverid", "gate_serverid" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReqEnterGameServer : pb::IMessage<ReqEnterGameServer> {
    private static readonly pb::MessageParser<ReqEnterGameServer> _parser = new pb::MessageParser<ReqEnterGameServer>(() => new ReqEnterGameServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEnterGameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer(ReqEnterGameServer other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      account_ = other.account_;
      gameId_ = other.gameId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer Clone() {
      return new ReqEnterGameServer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 1;
    private global::NFMsg.Ident id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int accountFieldNumber = 2;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int game_idFieldNumber = 3;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int game_id {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int nameFieldNumber = 4;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEnterGameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEnterGameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(id, other.id)) return false;
      if (account != other.account) return false;
      if (game_id != other.game_id) return false;
      if (name != other.name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= id.GetHashCode();
      if (account.Length != 0) hash ^= account.GetHashCode();
      if (game_id != 0) hash ^= game_id.GetHashCode();
      if (name.Length != 0) hash ^= name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(id);
      }
      if (account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(account);
      }
      if (game_id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(game_id);
      }
      if (name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(id);
      }
      if (account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(account);
      }
      if (game_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(game_id);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqEnterGameServer other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::NFMsg.Ident();
        }
        id.MergeFrom(other.id);
      }
      if (other.account.Length != 0) {
        account = other.account;
      }
      if (other.game_id != 0) {
        game_id = other.game_id;
      }
      if (other.name.Length != 0) {
        name = other.name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            account = input.ReadBytes();
            break;
          }
          case 24: {
            game_id = input.ReadInt32();
            break;
          }
          case 34: {
            name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckEnterGameSuccess : pb::IMessage<ReqAckEnterGameSuccess> {
    private static readonly pb::MessageParser<ReqAckEnterGameSuccess> _parser = new pb::MessageParser<ReqAckEnterGameSuccess>(() => new ReqAckEnterGameSuccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckEnterGameSuccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess(ReqAckEnterGameSuccess other) : this() {
      arg_ = other.arg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess Clone() {
      return new ReqAckEnterGameSuccess(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int argFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckEnterGameSuccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckEnterGameSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (arg != other.arg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (arg != 0) hash ^= arg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(arg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(arg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckEnterGameSuccess other) {
      if (other == null) {
        return;
      }
      if (other.arg != 0) {
        arg = other.arg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqHeartBeat : pb::IMessage<ReqHeartBeat> {
    private static readonly pb::MessageParser<ReqHeartBeat> _parser = new pb::MessageParser<ReqHeartBeat>(() => new ReqHeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat(ReqHeartBeat other) : this() {
      arg_ = other.arg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat Clone() {
      return new ReqHeartBeat(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int argFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (arg != other.arg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (arg != 0) hash ^= arg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(arg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(arg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqHeartBeat other) {
      if (other == null) {
        return;
      }
      if (other.arg != 0) {
        arg = other.arg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqLeaveGameServer : pb::IMessage<ReqLeaveGameServer> {
    private static readonly pb::MessageParser<ReqLeaveGameServer> _parser = new pb::MessageParser<ReqLeaveGameServer>(() => new ReqLeaveGameServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLeaveGameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer(ReqLeaveGameServer other) : this() {
      arg_ = other.arg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer Clone() {
      return new ReqLeaveGameServer(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int argFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqLeaveGameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqLeaveGameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (arg != other.arg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (arg != 0) hash ^= arg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(arg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(arg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqLeaveGameServer other) {
      if (other == null) {
        return;
      }
      if (other.arg != 0) {
        arg = other.arg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerEntryInfo : pb::IMessage<PlayerEntryInfo> {
    private static readonly pb::MessageParser<PlayerEntryInfo> _parser = new pb::MessageParser<PlayerEntryInfo>(() => new PlayerEntryInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerEntryInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo(PlayerEntryInfo other) : this() {
      objectGuid_ = other.objectGuid_ != null ? other.objectGuid_.Clone() : null;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      careerType_ = other.careerType_;
      playerState_ = other.playerState_;
      configId_ = other.configId_;
      sceneId_ = other.sceneId_;
      classId_ = other.classId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo Clone() {
      return new PlayerEntryInfo(this);
    }

    /// <summary>Field number for the "object_guid" field.</summary>
    public const int object_guidFieldNumber = 1;
    private global::NFMsg.Ident objectGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident object_guid {
      get { return objectGuid_; }
      set {
        objectGuid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int xFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int yFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int zFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "career_type" field.</summary>
    public const int career_typeFieldNumber = 5;
    private int careerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int career_type {
      get { return careerType_; }
      set {
        careerType_ = value;
      }
    }

    /// <summary>Field number for the "player_state" field.</summary>
    public const int player_stateFieldNumber = 6;
    private int playerState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int player_state {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    /// <summary>Field number for the "config_id" field.</summary>
    public const int config_idFieldNumber = 7;
    private pb::ByteString configId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString config_id {
      get { return configId_; }
      set {
        configId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int scene_idFieldNumber = 8;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int scene_id {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "class_id" field.</summary>
    public const int class_idFieldNumber = 9;
    private pb::ByteString classId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString class_id {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerEntryInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerEntryInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(object_guid, other.object_guid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(x, other.x)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(y, other.y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(z, other.z)) return false;
      if (career_type != other.career_type) return false;
      if (player_state != other.player_state) return false;
      if (config_id != other.config_id) return false;
      if (scene_id != other.scene_id) return false;
      if (class_id != other.class_id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (objectGuid_ != null) hash ^= object_guid.GetHashCode();
      if (x != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(x);
      if (y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(y);
      if (z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(z);
      if (career_type != 0) hash ^= career_type.GetHashCode();
      if (player_state != 0) hash ^= player_state.GetHashCode();
      if (config_id.Length != 0) hash ^= config_id.GetHashCode();
      if (scene_id != 0) hash ^= scene_id.GetHashCode();
      if (class_id.Length != 0) hash ^= class_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (objectGuid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(object_guid);
      }
      if (x != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(x);
      }
      if (y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(y);
      }
      if (z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(z);
      }
      if (career_type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(career_type);
      }
      if (player_state != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(player_state);
      }
      if (config_id.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(config_id);
      }
      if (scene_id != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(scene_id);
      }
      if (class_id.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(class_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (objectGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(object_guid);
      }
      if (x != 0F) {
        size += 1 + 4;
      }
      if (y != 0F) {
        size += 1 + 4;
      }
      if (z != 0F) {
        size += 1 + 4;
      }
      if (career_type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(career_type);
      }
      if (player_state != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(player_state);
      }
      if (config_id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(config_id);
      }
      if (scene_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(scene_id);
      }
      if (class_id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(class_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerEntryInfo other) {
      if (other == null) {
        return;
      }
      if (other.objectGuid_ != null) {
        if (objectGuid_ == null) {
          objectGuid_ = new global::NFMsg.Ident();
        }
        object_guid.MergeFrom(other.object_guid);
      }
      if (other.x != 0F) {
        x = other.x;
      }
      if (other.y != 0F) {
        y = other.y;
      }
      if (other.z != 0F) {
        z = other.z;
      }
      if (other.career_type != 0) {
        career_type = other.career_type;
      }
      if (other.player_state != 0) {
        player_state = other.player_state;
      }
      if (other.config_id.Length != 0) {
        config_id = other.config_id;
      }
      if (other.scene_id != 0) {
        scene_id = other.scene_id;
      }
      if (other.class_id.Length != 0) {
        class_id = other.class_id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (objectGuid_ == null) {
              objectGuid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(objectGuid_);
            break;
          }
          case 21: {
            x = input.ReadFloat();
            break;
          }
          case 29: {
            y = input.ReadFloat();
            break;
          }
          case 37: {
            z = input.ReadFloat();
            break;
          }
          case 40: {
            career_type = input.ReadInt32();
            break;
          }
          case 48: {
            player_state = input.ReadInt32();
            break;
          }
          case 58: {
            config_id = input.ReadBytes();
            break;
          }
          case 64: {
            scene_id = input.ReadInt32();
            break;
          }
          case 74: {
            class_id = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckPlayerEntryList : pb::IMessage<AckPlayerEntryList> {
    private static readonly pb::MessageParser<AckPlayerEntryList> _parser = new pb::MessageParser<AckPlayerEntryList>(() => new AckPlayerEntryList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlayerEntryList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList(AckPlayerEntryList other) : this() {
      objectList_ = other.objectList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList Clone() {
      return new AckPlayerEntryList(this);
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int object_listFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.PlayerEntryInfo> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.PlayerEntryInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PlayerEntryInfo> objectList_ = new pbc::RepeatedField<global::NFMsg.PlayerEntryInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PlayerEntryInfo> object_list {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPlayerEntryList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPlayerEntryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectList_.Equals(other.objectList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckPlayerEntryList other) {
      if (other == null) {
        return;
      }
      objectList_.Add(other.objectList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckPlayerLeaveList : pb::IMessage<AckPlayerLeaveList> {
    private static readonly pb::MessageParser<AckPlayerLeaveList> _parser = new pb::MessageParser<AckPlayerLeaveList>(() => new AckPlayerLeaveList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlayerLeaveList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList(AckPlayerLeaveList other) : this() {
      objectList_ = other.objectList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList Clone() {
      return new AckPlayerLeaveList(this);
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int object_listFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> objectList_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> object_list {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPlayerLeaveList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPlayerLeaveList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectList_.Equals(other.objectList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckPlayerLeaveList other) {
      if (other == null) {
        return;
      }
      objectList_.Add(other.objectList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckSynData : pb::IMessage<ReqAckSynData> {
    private static readonly pb::MessageParser<ReqAckSynData> _parser = new pb::MessageParser<ReqAckSynData>(() => new ReqAckSynData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckSynData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData(ReqAckSynData other) : this() {
      syser_ = other.syser_ != null ? other.syser_.Clone() : null;
      objectList_ = other.objectList_.Clone();
      data_ = other.data_;
      synType_ = other.synType_;
      msgId_ = other.msgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData Clone() {
      return new ReqAckSynData(this);
    }

    /// <summary>Field number for the "syser" field.</summary>
    public const int syserFieldNumber = 1;
    private global::NFMsg.Ident syser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident syser {
      get { return syser_; }
      set {
        syser_ = value;
      }
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int object_listFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> objectList_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> object_list {
      get { return objectList_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int dataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "syn_type" field.</summary>
    public const int syn_typeFieldNumber = 4;
    private global::NFMsg.ReqAckSynData.Types.SynType synType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckSynData.Types.SynType syn_type {
      get { return synType_; }
      set {
        synType_ = value;
      }
    }

    /// <summary>Field number for the "msg_id" field.</summary>
    public const int msg_idFieldNumber = 5;
    private global::NFMsg.ESynMsgID msgId_ = 0;
    /// <summary>
    ///有消息ID限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ESynMsgID msg_id {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckSynData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckSynData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(syser, other.syser)) return false;
      if(!objectList_.Equals(other.objectList_)) return false;
      if (data != other.data) return false;
      if (syn_type != other.syn_type) return false;
      if (msg_id != other.msg_id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (syser_ != null) hash ^= syser.GetHashCode();
      hash ^= objectList_.GetHashCode();
      if (data.Length != 0) hash ^= data.GetHashCode();
      if (syn_type != 0) hash ^= syn_type.GetHashCode();
      if (msg_id != 0) hash ^= msg_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (syser_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(syser);
      }
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(data);
      }
      if (syn_type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) syn_type);
      }
      if (msg_id != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) msg_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (syser_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(syser);
      }
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(data);
      }
      if (syn_type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) syn_type);
      }
      if (msg_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) msg_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckSynData other) {
      if (other == null) {
        return;
      }
      if (other.syser_ != null) {
        if (syser_ == null) {
          syser_ = new global::NFMsg.Ident();
        }
        syser.MergeFrom(other.syser);
      }
      objectList_.Add(other.objectList_);
      if (other.data.Length != 0) {
        data = other.data;
      }
      if (other.syn_type != 0) {
        syn_type = other.syn_type;
      }
      if (other.msg_id != 0) {
        msg_id = other.msg_id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (syser_ == null) {
              syser_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(syser_);
            break;
          }
          case 18: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
          case 26: {
            data = input.ReadBytes();
            break;
          }
          case 32: {
            synType_ = (global::NFMsg.ReqAckSynData.Types.SynType) input.ReadEnum();
            break;
          }
          case 40: {
            msgId_ = (global::NFMsg.ESynMsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckSynData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SynType {
        /// <summary>
        /// </summary>
        [pbr::OriginalName("EST_UNKNOW")] EST_UNKNOW = 0,
        /// <summary>
        ///层
        /// </summary>
        [pbr::OriginalName("EST_GROUP")] EST_GROUP = 1,
        /// <summary>
        ///场景
        /// </summary>
        [pbr::OriginalName("EST_SCENE")] EST_SCENE = 2,
        /// <summary>
        ///公会
        /// </summary>
        [pbr::OriginalName("EST_CLAN")] EST_CLAN = 3,
        /// <summary>
        ///好友
        /// </summary>
        [pbr::OriginalName("EST_FRIEND")] EST_FRIEND = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class ReqAckPlayerMove : pb::IMessage<ReqAckPlayerMove> {
    private static readonly pb::MessageParser<ReqAckPlayerMove> _parser = new pb::MessageParser<ReqAckPlayerMove>(() => new ReqAckPlayerMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove(ReqAckPlayerMove other) : this() {
      mover_ = other.mover_ != null ? other.mover_.Clone() : null;
      moveType_ = other.moveType_;
      speed_ = other.speed_;
      time_ = other.time_;
      lastState_ = other.lastState_;
      targetPos_ = other.targetPos_.Clone();
      sourcePos_ = other.sourcePos_.Clone();
      moveDirection_ = other.moveDirection_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove Clone() {
      return new ReqAckPlayerMove(this);
    }

    /// <summary>Field number for the "mover" field.</summary>
    public const int moverFieldNumber = 1;
    private global::NFMsg.Ident mover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident mover {
      get { return mover_; }
      set {
        mover_ = value;
      }
    }

    /// <summary>Field number for the "moveType" field.</summary>
    public const int moveTypeFieldNumber = 2;
    private int moveType_;
    /// <summary>
    ///future_state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int moveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int speedFieldNumber = 3;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int timeFieldNumber = 4;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "lastState" field.</summary>
    public const int lastStateFieldNumber = 5;
    private int lastState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int lastState {
      get { return lastState_; }
      set {
        lastState_ = value;
      }
    }

    /// <summary>Field number for the "target_pos" field.</summary>
    public const int target_posFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NFMsg.Vector3> _repeated_targetPos_codec
        = pb::FieldCodec.ForMessage(50, global::NFMsg.Vector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Vector3> targetPos_ = new pbc::RepeatedField<global::NFMsg.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Vector3> target_pos {
      get { return targetPos_; }
    }

    /// <summary>Field number for the "source_pos" field.</summary>
    public const int source_posFieldNumber = 7;
    private static readonly pb::FieldCodec<global::NFMsg.Vector3> _repeated_sourcePos_codec
        = pb::FieldCodec.ForMessage(58, global::NFMsg.Vector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Vector3> sourcePos_ = new pbc::RepeatedField<global::NFMsg.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Vector3> source_pos {
      get { return sourcePos_; }
    }

    /// <summary>Field number for the "move_direction" field.</summary>
    public const int move_directionFieldNumber = 8;
    private static readonly pb::FieldCodec<global::NFMsg.Vector3> _repeated_moveDirection_codec
        = pb::FieldCodec.ForMessage(66, global::NFMsg.Vector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Vector3> moveDirection_ = new pbc::RepeatedField<global::NFMsg.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Vector3> move_direction {
      get { return moveDirection_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(mover, other.mover)) return false;
      if (moveType != other.moveType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(speed, other.speed)) return false;
      if (time != other.time) return false;
      if (lastState != other.lastState) return false;
      if(!targetPos_.Equals(other.targetPos_)) return false;
      if(!sourcePos_.Equals(other.sourcePos_)) return false;
      if(!moveDirection_.Equals(other.moveDirection_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mover_ != null) hash ^= mover.GetHashCode();
      if (moveType != 0) hash ^= moveType.GetHashCode();
      if (speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(speed);
      if (time != 0) hash ^= time.GetHashCode();
      if (lastState != 0) hash ^= lastState.GetHashCode();
      hash ^= targetPos_.GetHashCode();
      hash ^= sourcePos_.GetHashCode();
      hash ^= moveDirection_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mover_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(mover);
      }
      if (moveType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(moveType);
      }
      if (speed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(speed);
      }
      if (time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(time);
      }
      if (lastState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(lastState);
      }
      targetPos_.WriteTo(output, _repeated_targetPos_codec);
      sourcePos_.WriteTo(output, _repeated_sourcePos_codec);
      moveDirection_.WriteTo(output, _repeated_moveDirection_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mover_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(mover);
      }
      if (moveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(moveType);
      }
      if (speed != 0F) {
        size += 1 + 4;
      }
      if (time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(time);
      }
      if (lastState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(lastState);
      }
      size += targetPos_.CalculateSize(_repeated_targetPos_codec);
      size += sourcePos_.CalculateSize(_repeated_sourcePos_codec);
      size += moveDirection_.CalculateSize(_repeated_moveDirection_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckPlayerMove other) {
      if (other == null) {
        return;
      }
      if (other.mover_ != null) {
        if (mover_ == null) {
          mover_ = new global::NFMsg.Ident();
        }
        mover.MergeFrom(other.mover);
      }
      if (other.moveType != 0) {
        moveType = other.moveType;
      }
      if (other.speed != 0F) {
        speed = other.speed;
      }
      if (other.time != 0) {
        time = other.time;
      }
      if (other.lastState != 0) {
        lastState = other.lastState;
      }
      targetPos_.Add(other.targetPos_);
      sourcePos_.Add(other.sourcePos_);
      moveDirection_.Add(other.moveDirection_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mover_ == null) {
              mover_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(mover_);
            break;
          }
          case 16: {
            moveType = input.ReadInt32();
            break;
          }
          case 29: {
            speed = input.ReadFloat();
            break;
          }
          case 32: {
            time = input.ReadInt32();
            break;
          }
          case 40: {
            lastState = input.ReadInt32();
            break;
          }
          case 50: {
            targetPos_.AddEntriesFrom(input, _repeated_targetPos_codec);
            break;
          }
          case 58: {
            sourcePos_.AddEntriesFrom(input, _repeated_sourcePos_codec);
            break;
          }
          case 66: {
            moveDirection_.AddEntriesFrom(input, _repeated_moveDirection_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckPlayerChat : pb::IMessage<ReqAckPlayerChat> {
    private static readonly pb::MessageParser<ReqAckPlayerChat> _parser = new pb::MessageParser<ReqAckPlayerChat>(() => new ReqAckPlayerChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat(ReqAckPlayerChat other) : this() {
      chatId_ = other.chatId_ != null ? other.chatId_.Clone() : null;
      chatType_ = other.chatType_;
      chatInfo_ = other.chatInfo_;
      chatName_ = other.chatName_;
      targetId_ = other.targetId_ != null ? other.targetId_.Clone() : null;
      containerData_ = other.containerData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat Clone() {
      return new ReqAckPlayerChat(this);
    }

    /// <summary>Field number for the "chat_id" field.</summary>
    public const int chat_idFieldNumber = 1;
    private global::NFMsg.Ident chatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident chat_id {
      get { return chatId_; }
      set {
        chatId_ = value;
      }
    }

    /// <summary>Field number for the "chat_type" field.</summary>
    public const int chat_typeFieldNumber = 2;
    private global::NFMsg.ReqAckPlayerChat.Types.EGameChatType chatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckPlayerChat.Types.EGameChatType chat_type {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chat_info" field.</summary>
    public const int chat_infoFieldNumber = 3;
    private pb::ByteString chatInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString chat_info {
      get { return chatInfo_; }
      set {
        chatInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chat_name" field.</summary>
    public const int chat_nameFieldNumber = 4;
    private pb::ByteString chatName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString chat_name {
      get { return chatName_; }
      set {
        chatName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int target_idFieldNumber = 5;
    private global::NFMsg.Ident targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident target_id {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "Container_data" field.</summary>
    public const int Container_dataFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NFMsg.ReqAckPlayerChat.Types.ChatContainer> _repeated_containerData_codec
        = pb::FieldCodec.ForMessage(50, global::NFMsg.ReqAckPlayerChat.Types.ChatContainer.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ReqAckPlayerChat.Types.ChatContainer> containerData_ = new pbc::RepeatedField<global::NFMsg.ReqAckPlayerChat.Types.ChatContainer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ReqAckPlayerChat.Types.ChatContainer> Container_data {
      get { return containerData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(chat_id, other.chat_id)) return false;
      if (chat_type != other.chat_type) return false;
      if (chat_info != other.chat_info) return false;
      if (chat_name != other.chat_name) return false;
      if (!object.Equals(target_id, other.target_id)) return false;
      if(!containerData_.Equals(other.containerData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chatId_ != null) hash ^= chat_id.GetHashCode();
      if (chat_type != 0) hash ^= chat_type.GetHashCode();
      if (chat_info.Length != 0) hash ^= chat_info.GetHashCode();
      if (chat_name.Length != 0) hash ^= chat_name.GetHashCode();
      if (targetId_ != null) hash ^= target_id.GetHashCode();
      hash ^= containerData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chatId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(chat_id);
      }
      if (chat_type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) chat_type);
      }
      if (chat_info.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(chat_info);
      }
      if (chat_name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(chat_name);
      }
      if (targetId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(target_id);
      }
      containerData_.WriteTo(output, _repeated_containerData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chatId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(chat_id);
      }
      if (chat_type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) chat_type);
      }
      if (chat_info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(chat_info);
      }
      if (chat_name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(chat_name);
      }
      if (targetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(target_id);
      }
      size += containerData_.CalculateSize(_repeated_containerData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckPlayerChat other) {
      if (other == null) {
        return;
      }
      if (other.chatId_ != null) {
        if (chatId_ == null) {
          chatId_ = new global::NFMsg.Ident();
        }
        chat_id.MergeFrom(other.chat_id);
      }
      if (other.chat_type != 0) {
        chat_type = other.chat_type;
      }
      if (other.chat_info.Length != 0) {
        chat_info = other.chat_info;
      }
      if (other.chat_name.Length != 0) {
        chat_name = other.chat_name;
      }
      if (other.targetId_ != null) {
        if (targetId_ == null) {
          targetId_ = new global::NFMsg.Ident();
        }
        target_id.MergeFrom(other.target_id);
      }
      containerData_.Add(other.containerData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (chatId_ == null) {
              chatId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(chatId_);
            break;
          }
          case 16: {
            chatType_ = (global::NFMsg.ReqAckPlayerChat.Types.EGameChatType) input.ReadEnum();
            break;
          }
          case 26: {
            chat_info = input.ReadBytes();
            break;
          }
          case 34: {
            chat_name = input.ReadBytes();
            break;
          }
          case 42: {
            if (targetId_ == null) {
              targetId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(targetId_);
            break;
          }
          case 50: {
            containerData_.AddEntriesFrom(input, _repeated_containerData_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckPlayerChat message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameChatType {
        [pbr::OriginalName("EGCT_CLAN")] EGCT_CLAN = 0,
        [pbr::OriginalName("EGCT_PRIVATE")] EGCT_PRIVATE = 1,
        [pbr::OriginalName("EGCT_TEAM")] EGCT_TEAM = 2,
        [pbr::OriginalName("EGCT_WORLD")] EGCT_WORLD = 3,
      }

      public sealed partial class ChatContainer : pb::IMessage<ChatContainer> {
        private static readonly pb::MessageParser<ChatContainer> _parser = new pb::MessageParser<ChatContainer>(() => new ChatContainer());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ChatContainer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NFMsg.ReqAckPlayerChat.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatContainer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatContainer(ChatContainer other) : this() {
          conTainerType_ = other.conTainerType_;
          dataInfo_ = other.dataInfo_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ChatContainer Clone() {
          return new ChatContainer(this);
        }

        /// <summary>Field number for the "ConTainerType" field.</summary>
        public const int ConTainerTypeFieldNumber = 2;
        private int conTainerType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ConTainerType {
          get { return conTainerType_; }
          set {
            conTainerType_ = value;
          }
        }

        /// <summary>Field number for the "data_info" field.</summary>
        public const int data_infoFieldNumber = 3;
        private pb::ByteString dataInfo_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString data_info {
          get { return dataInfo_; }
          set {
            dataInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ChatContainer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ChatContainer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ConTainerType != other.ConTainerType) return false;
          if (data_info != other.data_info) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ConTainerType != 0) hash ^= ConTainerType.GetHashCode();
          if (data_info.Length != 0) hash ^= data_info.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ConTainerType != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(ConTainerType);
          }
          if (data_info.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(data_info);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ConTainerType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConTainerType);
          }
          if (data_info.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(data_info);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ChatContainer other) {
          if (other == null) {
            return;
          }
          if (other.ConTainerType != 0) {
            ConTainerType = other.ConTainerType;
          }
          if (other.data_info.Length != 0) {
            data_info = other.data_info;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 16: {
                ConTainerType = input.ReadInt32();
                break;
              }
              case 26: {
                data_info = input.ReadBytes();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ChatContainer message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum ContainerType {
            /// <summary>
            /// </summary>
            [pbr::OriginalName("EGCT_UNKNOW")] EGCT_UNKNOW = 0,
            /// <summary>
            ///道具
            /// </summary>
            [pbr::OriginalName("EGCT_ITEM")] EGCT_ITEM = 1,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class ReqAckPlayerPosSync : pb::IMessage<ReqAckPlayerPosSync> {
    private static readonly pb::MessageParser<ReqAckPlayerPosSync> _parser = new pb::MessageParser<ReqAckPlayerPosSync>(() => new ReqAckPlayerPosSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerPosSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync(ReqAckPlayerPosSync other) : this() {
      mover_ = other.mover_ != null ? other.mover_.Clone() : null;
      time_ = other.time_;
      interpolationTime_ = other.interpolationTime_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      status_ = other.status_;
      frame_ = other.frame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync Clone() {
      return new ReqAckPlayerPosSync(this);
    }

    /// <summary>Field number for the "mover" field.</summary>
    public const int moverFieldNumber = 1;
    private global::NFMsg.Ident mover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident mover {
      get { return mover_; }
      set {
        mover_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int timeFieldNumber = 2;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "InterpolationTime" field.</summary>
    public const int InterpolationTimeFieldNumber = 3;
    private float interpolationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InterpolationTime {
      get { return interpolationTime_; }
      set {
        interpolationTime_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int positionFieldNumber = 4;
    private global::NFMsg.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int directionFieldNumber = 5;
    private global::NFMsg.Vector3 direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int statusFieldNumber = 6;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int frameFieldNumber = 7;
    private int frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerPosSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerPosSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(mover, other.mover)) return false;
      if (time != other.time) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InterpolationTime, other.InterpolationTime)) return false;
      if (!object.Equals(position, other.position)) return false;
      if (!object.Equals(direction, other.direction)) return false;
      if (status != other.status) return false;
      if (frame != other.frame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mover_ != null) hash ^= mover.GetHashCode();
      if (time != 0) hash ^= time.GetHashCode();
      if (InterpolationTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InterpolationTime);
      if (position_ != null) hash ^= position.GetHashCode();
      if (direction_ != null) hash ^= direction.GetHashCode();
      if (status != 0) hash ^= status.GetHashCode();
      if (frame != 0) hash ^= frame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mover_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(mover);
      }
      if (time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(time);
      }
      if (InterpolationTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(InterpolationTime);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(position);
      }
      if (direction_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(direction);
      }
      if (status != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(status);
      }
      if (frame != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(frame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mover_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(mover);
      }
      if (time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(time);
      }
      if (InterpolationTime != 0F) {
        size += 1 + 4;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(direction);
      }
      if (status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(status);
      }
      if (frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(frame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckPlayerPosSync other) {
      if (other == null) {
        return;
      }
      if (other.mover_ != null) {
        if (mover_ == null) {
          mover_ = new global::NFMsg.Ident();
        }
        mover.MergeFrom(other.mover);
      }
      if (other.time != 0) {
        time = other.time;
      }
      if (other.InterpolationTime != 0F) {
        InterpolationTime = other.InterpolationTime;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::NFMsg.Vector3();
        }
        position.MergeFrom(other.position);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          direction_ = new global::NFMsg.Vector3();
        }
        direction.MergeFrom(other.direction);
      }
      if (other.status != 0) {
        status = other.status;
      }
      if (other.frame != 0) {
        frame = other.frame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mover_ == null) {
              mover_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(mover_);
            break;
          }
          case 16: {
            time = input.ReadInt32();
            break;
          }
          case 29: {
            InterpolationTime = input.ReadFloat();
            break;
          }
          case 34: {
            if (position_ == null) {
              position_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 42: {
            if (direction_ == null) {
              direction_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 48: {
            status = input.ReadInt32();
            break;
          }
          case 56: {
            frame = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectData : pb::IMessage<EffectData> {
    private static readonly pb::MessageParser<EffectData> _parser = new pb::MessageParser<EffectData>(() => new EffectData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData(EffectData other) : this() {
      effectIdent_ = other.effectIdent_ != null ? other.effectIdent_.Clone() : null;
      effectValue_ = other.effectValue_;
      effectRlt_ = other.effectRlt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData Clone() {
      return new EffectData(this);
    }

    /// <summary>Field number for the "effect_ident" field.</summary>
    public const int effect_identFieldNumber = 1;
    private global::NFMsg.Ident effectIdent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident effect_ident {
      get { return effectIdent_; }
      set {
        effectIdent_ = value;
      }
    }

    /// <summary>Field number for the "effect_value" field.</summary>
    public const int effect_valueFieldNumber = 2;
    private int effectValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int effect_value {
      get { return effectValue_; }
      set {
        effectValue_ = value;
      }
    }

    /// <summary>Field number for the "effect_rlt" field.</summary>
    public const int effect_rltFieldNumber = 3;
    private global::NFMsg.EffectData.Types.EResultType effectRlt_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.EffectData.Types.EResultType effect_rlt {
      get { return effectRlt_; }
      set {
        effectRlt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(effect_ident, other.effect_ident)) return false;
      if (effect_value != other.effect_value) return false;
      if (effect_rlt != other.effect_rlt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectIdent_ != null) hash ^= effect_ident.GetHashCode();
      if (effect_value != 0) hash ^= effect_value.GetHashCode();
      if (effect_rlt != 0) hash ^= effect_rlt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effectIdent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(effect_ident);
      }
      if (effect_value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(effect_value);
      }
      if (effect_rlt != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) effect_rlt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectIdent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(effect_ident);
      }
      if (effect_value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(effect_value);
      }
      if (effect_rlt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) effect_rlt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectData other) {
      if (other == null) {
        return;
      }
      if (other.effectIdent_ != null) {
        if (effectIdent_ == null) {
          effectIdent_ = new global::NFMsg.Ident();
        }
        effect_ident.MergeFrom(other.effect_ident);
      }
      if (other.effect_value != 0) {
        effect_value = other.effect_value;
      }
      if (other.effect_rlt != 0) {
        effect_rlt = other.effect_rlt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (effectIdent_ == null) {
              effectIdent_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(effectIdent_);
            break;
          }
          case 16: {
            effect_value = input.ReadInt32();
            break;
          }
          case 24: {
            effectRlt_ = (global::NFMsg.EffectData.Types.EResultType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EffectData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResultType {
        [pbr::OriginalName("EET_FAIL")] EET_FAIL = 0,
        [pbr::OriginalName("EET_SUCCESS")] EET_SUCCESS = 1,
        [pbr::OriginalName("EET_REFUSE")] EET_REFUSE = 2,
        [pbr::OriginalName("EET_MISS")] EET_MISS = 3,
        [pbr::OriginalName("EET_CRIT")] EET_CRIT = 4,
      }

    }
    #endregion

  }

  public sealed partial class ReqAckUseSkill : pb::IMessage<ReqAckUseSkill> {
    private static readonly pb::MessageParser<ReqAckUseSkill> _parser = new pb::MessageParser<ReqAckUseSkill>(() => new ReqAckUseSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckUseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill(ReqAckUseSkill other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      skillId_ = other.skillId_;
      useIndex_ = other.useIndex_;
      effectData_ = other.effectData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill Clone() {
      return new ReqAckUseSkill(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int userFieldNumber = 1;
    private global::NFMsg.Ident user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident user {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int skill_idFieldNumber = 2;
    private pb::ByteString skillId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString skill_id {
      get { return skillId_; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_index" field.</summary>
    public const int use_indexFieldNumber = 3;
    private int useIndex_;
    /// <summary>
    ///因为客户端要先展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int use_index {
      get { return useIndex_; }
      set {
        useIndex_ = value;
      }
    }

    /// <summary>Field number for the "effect_data" field.</summary>
    public const int effect_dataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NFMsg.EffectData> _repeated_effectData_codec
        = pb::FieldCodec.ForMessage(34, global::NFMsg.EffectData.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.EffectData> effectData_ = new pbc::RepeatedField<global::NFMsg.EffectData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.EffectData> effect_data {
      get { return effectData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckUseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckUseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(user, other.user)) return false;
      if (skill_id != other.skill_id) return false;
      if (use_index != other.use_index) return false;
      if(!effectData_.Equals(other.effectData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= user.GetHashCode();
      if (skill_id.Length != 0) hash ^= skill_id.GetHashCode();
      if (use_index != 0) hash ^= use_index.GetHashCode();
      hash ^= effectData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(user);
      }
      if (skill_id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(skill_id);
      }
      if (use_index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(use_index);
      }
      effectData_.WriteTo(output, _repeated_effectData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(user);
      }
      if (skill_id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(skill_id);
      }
      if (use_index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(use_index);
      }
      size += effectData_.CalculateSize(_repeated_effectData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckUseSkill other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::NFMsg.Ident();
        }
        user.MergeFrom(other.user);
      }
      if (other.skill_id.Length != 0) {
        skill_id = other.skill_id;
      }
      if (other.use_index != 0) {
        use_index = other.use_index;
      }
      effectData_.Add(other.effectData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(user_);
            break;
          }
          case 18: {
            skill_id = input.ReadBytes();
            break;
          }
          case 24: {
            use_index = input.ReadInt32();
            break;
          }
          case 34: {
            effectData_.AddEntriesFrom(input, _repeated_effectData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckUseItem : pb::IMessage<ReqAckUseItem> {
    private static readonly pb::MessageParser<ReqAckUseItem> _parser = new pb::MessageParser<ReqAckUseItem>(() => new ReqAckUseItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckUseItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem(ReqAckUseItem other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      itemGuid_ = other.itemGuid_ != null ? other.itemGuid_.Clone() : null;
      effectData_ = other.effectData_.Clone();
      item_ = other.item_ != null ? other.item_.Clone() : null;
      targetid_ = other.targetid_ != null ? other.targetid_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem Clone() {
      return new ReqAckUseItem(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int userFieldNumber = 1;
    private global::NFMsg.Ident user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident user {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "item_guid" field.</summary>
    public const int item_guidFieldNumber = 2;
    private global::NFMsg.Ident itemGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident item_guid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    /// <summary>Field number for the "effect_data" field.</summary>
    public const int effect_dataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.EffectData> _repeated_effectData_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.EffectData.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.EffectData> effectData_ = new pbc::RepeatedField<global::NFMsg.EffectData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.EffectData> effect_data {
      get { return effectData_; }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int itemFieldNumber = 4;
    private global::NFMsg.ItemStruct item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ItemStruct item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "targetid" field.</summary>
    public const int targetidFieldNumber = 5;
    private global::NFMsg.Ident targetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident targetid {
      get { return targetid_; }
      set {
        targetid_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int positionFieldNumber = 6;
    private global::NFMsg.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckUseItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckUseItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(user, other.user)) return false;
      if (!object.Equals(item_guid, other.item_guid)) return false;
      if(!effectData_.Equals(other.effectData_)) return false;
      if (!object.Equals(item, other.item)) return false;
      if (!object.Equals(targetid, other.targetid)) return false;
      if (!object.Equals(position, other.position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= user.GetHashCode();
      if (itemGuid_ != null) hash ^= item_guid.GetHashCode();
      hash ^= effectData_.GetHashCode();
      if (item_ != null) hash ^= item.GetHashCode();
      if (targetid_ != null) hash ^= targetid.GetHashCode();
      if (position_ != null) hash ^= position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(user);
      }
      if (itemGuid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(item_guid);
      }
      effectData_.WriteTo(output, _repeated_effectData_codec);
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(item);
      }
      if (targetid_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(targetid);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(user);
      }
      if (itemGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(item_guid);
      }
      size += effectData_.CalculateSize(_repeated_effectData_codec);
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(item);
      }
      if (targetid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(targetid);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckUseItem other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::NFMsg.Ident();
        }
        user.MergeFrom(other.user);
      }
      if (other.itemGuid_ != null) {
        if (itemGuid_ == null) {
          itemGuid_ = new global::NFMsg.Ident();
        }
        item_guid.MergeFrom(other.item_guid);
      }
      effectData_.Add(other.effectData_);
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::NFMsg.ItemStruct();
        }
        item.MergeFrom(other.item);
      }
      if (other.targetid_ != null) {
        if (targetid_ == null) {
          targetid_ = new global::NFMsg.Ident();
        }
        targetid.MergeFrom(other.targetid);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::NFMsg.Vector3();
        }
        position.MergeFrom(other.position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(user_);
            break;
          }
          case 18: {
            if (itemGuid_ == null) {
              itemGuid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(itemGuid_);
            break;
          }
          case 26: {
            effectData_.AddEntriesFrom(input, _repeated_effectData_codec);
            break;
          }
          case 34: {
            if (item_ == null) {
              item_ = new global::NFMsg.ItemStruct();
            }
            input.ReadMessage(item_);
            break;
          }
          case 42: {
            if (targetid_ == null) {
              targetid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(targetid_);
            break;
          }
          case 50: {
            if (position_ == null) {
              position_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //////////////////////////////////////////
  ///EGMI_REQ_SWAP_SCENE
  /// </summary>
  public sealed partial class ReqAckSwapScene : pb::IMessage<ReqAckSwapScene> {
    private static readonly pb::MessageParser<ReqAckSwapScene> _parser = new pb::MessageParser<ReqAckSwapScene>(() => new ReqAckSwapScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckSwapScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene(ReqAckSwapScene other) : this() {
      transferType_ = other.transferType_;
      sceneId_ = other.sceneId_;
      lineId_ = other.lineId_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene Clone() {
      return new ReqAckSwapScene(this);
    }

    /// <summary>Field number for the "transfer_type" field.</summary>
    public const int transfer_typeFieldNumber = 1;
    private global::NFMsg.ReqAckSwapScene.Types.EGameSwapType transferType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckSwapScene.Types.EGameSwapType transfer_type {
      get { return transferType_; }
      set {
        transferType_ = value;
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int scene_idFieldNumber = 2;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int scene_id {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "line_id" field.</summary>
    public const int line_idFieldNumber = 3;
    private int lineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int line_id {
      get { return lineId_; }
      set {
        lineId_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int xFieldNumber = 4;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float x {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int yFieldNumber = 5;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int zFieldNumber = 6;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int dataFieldNumber = 7;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckSwapScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckSwapScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (transfer_type != other.transfer_type) return false;
      if (scene_id != other.scene_id) return false;
      if (line_id != other.line_id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(x, other.x)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(y, other.y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(z, other.z)) return false;
      if (data != other.data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transfer_type != 0) hash ^= transfer_type.GetHashCode();
      if (scene_id != 0) hash ^= scene_id.GetHashCode();
      if (line_id != 0) hash ^= line_id.GetHashCode();
      if (x != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(x);
      if (y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(y);
      if (z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(z);
      if (data.Length != 0) hash ^= data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transfer_type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) transfer_type);
      }
      if (scene_id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(scene_id);
      }
      if (line_id != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(line_id);
      }
      if (x != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(x);
      }
      if (y != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(y);
      }
      if (z != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(z);
      }
      if (data.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transfer_type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) transfer_type);
      }
      if (scene_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(scene_id);
      }
      if (line_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(line_id);
      }
      if (x != 0F) {
        size += 1 + 4;
      }
      if (y != 0F) {
        size += 1 + 4;
      }
      if (z != 0F) {
        size += 1 + 4;
      }
      if (data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckSwapScene other) {
      if (other == null) {
        return;
      }
      if (other.transfer_type != 0) {
        transfer_type = other.transfer_type;
      }
      if (other.scene_id != 0) {
        scene_id = other.scene_id;
      }
      if (other.line_id != 0) {
        line_id = other.line_id;
      }
      if (other.x != 0F) {
        x = other.x;
      }
      if (other.y != 0F) {
        y = other.y;
      }
      if (other.z != 0F) {
        z = other.z;
      }
      if (other.data.Length != 0) {
        data = other.data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            transferType_ = (global::NFMsg.ReqAckSwapScene.Types.EGameSwapType) input.ReadEnum();
            break;
          }
          case 16: {
            scene_id = input.ReadInt32();
            break;
          }
          case 24: {
            line_id = input.ReadInt32();
            break;
          }
          case 37: {
            x = input.ReadFloat();
            break;
          }
          case 45: {
            y = input.ReadFloat();
            break;
          }
          case 53: {
            z = input.ReadFloat();
            break;
          }
          case 58: {
            data = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckSwapScene message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameSwapType {
        /// <summary>
        ///普通城镇传送
        /// </summary>
        [pbr::OriginalName("EGST_NARMAL")] EGST_NARMAL = 0,
        /// <summary>
        ///普通副本
        /// </summary>
        [pbr::OriginalName("EGST_CLONE")] EGST_CLONE = 1,
        /// <summary>
        ///竞技场
        /// </summary>
        [pbr::OriginalName("EGST_ARENA")] EGST_ARENA = 2,
        /// <summary>
        ///镜像空间
        /// </summary>
        [pbr::OriginalName("EGST_MIRROR")] EGST_MIRROR = 3,
      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_REQ_SWAP_HOME_SCENE
  /// </summary>
  public sealed partial class ReqAckHomeScene : pb::IMessage<ReqAckHomeScene> {
    private static readonly pb::MessageParser<ReqAckHomeScene> _parser = new pb::MessageParser<ReqAckHomeScene>(() => new ReqAckHomeScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckHomeScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckHomeScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckHomeScene(ReqAckHomeScene other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckHomeScene Clone() {
      return new ReqAckHomeScene(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int dataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckHomeScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckHomeScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (data != other.data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data.Length != 0) hash ^= data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckHomeScene other) {
      if (other == null) {
        return;
      }
      if (other.data.Length != 0) {
        data = other.data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemStruct : pb::IMessage<ItemStruct> {
    private static readonly pb::MessageParser<ItemStruct> _parser = new pb::MessageParser<ItemStruct>(() => new ItemStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct(ItemStruct other) : this() {
      itemId_ = other.itemId_;
      itemCount_ = other.itemCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct Clone() {
      return new ItemStruct(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int item_idFieldNumber = 1;
    private pb::ByteString itemId_ = pb::ByteString.Empty;
    /// <summary>
    /// 配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString item_id {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "item_count" field.</summary>
    public const int item_countFieldNumber = 2;
    private int itemCount_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int item_count {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (item_id != other.item_id) return false;
      if (item_count != other.item_count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (item_id.Length != 0) hash ^= item_id.GetHashCode();
      if (item_count != 0) hash ^= item_count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(item_id);
      }
      if (item_count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(item_count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(item_id);
      }
      if (item_count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(item_count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemStruct other) {
      if (other == null) {
        return;
      }
      if (other.item_id.Length != 0) {
        item_id = other.item_id;
      }
      if (other.item_count != 0) {
        item_count = other.item_count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            item_id = input.ReadBytes();
            break;
          }
          case 16: {
            item_count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurrencyStruct : pb::IMessage<CurrencyStruct> {
    private static readonly pb::MessageParser<CurrencyStruct> _parser = new pb::MessageParser<CurrencyStruct>(() => new CurrencyStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct(CurrencyStruct other) : this() {
      currencyType_ = other.currencyType_;
      currencyCount_ = other.currencyCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct Clone() {
      return new CurrencyStruct(this);
    }

    /// <summary>Field number for the "currency_type" field.</summary>
    public const int currency_typeFieldNumber = 1;
    private int currencyType_;
    /// <summary>
    /// 金币，钻石，体力等等东西的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int currency_type {
      get { return currencyType_; }
      set {
        currencyType_ = value;
      }
    }

    /// <summary>Field number for the "currency_count" field.</summary>
    public const int currency_countFieldNumber = 2;
    private int currencyCount_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int currency_count {
      get { return currencyCount_; }
      set {
        currencyCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (currency_type != other.currency_type) return false;
      if (currency_count != other.currency_count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (currency_type != 0) hash ^= currency_type.GetHashCode();
      if (currency_count != 0) hash ^= currency_count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (currency_type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(currency_type);
      }
      if (currency_count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(currency_count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (currency_type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(currency_type);
      }
      if (currency_count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(currency_count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyStruct other) {
      if (other == null) {
        return;
      }
      if (other.currency_type != 0) {
        currency_type = other.currency_type;
      }
      if (other.currency_count != 0) {
        currency_count = other.currency_count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            currency_type = input.ReadInt32();
            break;
          }
          case 16: {
            currency_count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_RELIVE_HERO						= 1522;		 //
  /// </summary>
  public sealed partial class ReqAckReliveHero : pb::IMessage<ReqAckReliveHero> {
    private static readonly pb::MessageParser<ReqAckReliveHero> _parser = new pb::MessageParser<ReqAckReliveHero>(() => new ReqAckReliveHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckReliveHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckReliveHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckReliveHero(ReqAckReliveHero other) : this() {
      diamond_ = other.diamond_;
      heroId_ = other.heroId_ != null ? other.heroId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckReliveHero Clone() {
      return new ReqAckReliveHero(this);
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int diamondFieldNumber = 1;
    private int diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int hero_idFieldNumber = 2;
    private global::NFMsg.Ident heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident hero_id {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckReliveHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckReliveHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (diamond != other.diamond) return false;
      if (!object.Equals(hero_id, other.hero_id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (diamond != 0) hash ^= diamond.GetHashCode();
      if (heroId_ != null) hash ^= hero_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (diamond != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(diamond);
      }
      if (heroId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(hero_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(diamond);
      }
      if (heroId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(hero_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckReliveHero other) {
      if (other == null) {
        return;
      }
      if (other.diamond != 0) {
        diamond = other.diamond;
      }
      if (other.heroId_ != null) {
        if (heroId_ == null) {
          heroId_ = new global::NFMsg.Ident();
        }
        hero_id.MergeFrom(other.hero_id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            diamond = input.ReadInt32();
            break;
          }
          case 18: {
            if (heroId_ == null) {
              heroId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroId_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqPickDropItem : pb::IMessage<ReqPickDropItem> {
    private static readonly pb::MessageParser<ReqPickDropItem> _parser = new pb::MessageParser<ReqPickDropItem>(() => new ReqPickDropItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPickDropItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem(ReqPickDropItem other) : this() {
      itemGuid_ = other.itemGuid_ != null ? other.itemGuid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem Clone() {
      return new ReqPickDropItem(this);
    }

    /// <summary>Field number for the "item_guid" field.</summary>
    public const int item_guidFieldNumber = 2;
    private global::NFMsg.Ident itemGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident item_guid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqPickDropItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqPickDropItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(item_guid, other.item_guid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (itemGuid_ != null) hash ^= item_guid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (itemGuid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(item_guid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (itemGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(item_guid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqPickDropItem other) {
      if (other == null) {
        return;
      }
      if (other.itemGuid_ != null) {
        if (itemGuid_ == null) {
          itemGuid_ = new global::NFMsg.Ident();
        }
        item_guid.MergeFrom(other.item_guid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (itemGuid_ == null) {
              itemGuid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(itemGuid_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAcceptTask : pb::IMessage<ReqAcceptTask> {
    private static readonly pb::MessageParser<ReqAcceptTask> _parser = new pb::MessageParser<ReqAcceptTask>(() => new ReqAcceptTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAcceptTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask(ReqAcceptTask other) : this() {
      taskId_ = other.taskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask Clone() {
      return new ReqAcceptTask(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int task_idFieldNumber = 1;
    private pb::ByteString taskId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString task_id {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAcceptTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAcceptTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (task_id != other.task_id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (task_id.Length != 0) hash ^= task_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (task_id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(task_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (task_id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(task_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAcceptTask other) {
      if (other == null) {
        return;
      }
      if (other.task_id.Length != 0) {
        task_id = other.task_id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            task_id = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqCompeleteTask : pb::IMessage<ReqCompeleteTask> {
    private static readonly pb::MessageParser<ReqCompeleteTask> _parser = new pb::MessageParser<ReqCompeleteTask>(() => new ReqCompeleteTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCompeleteTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask(ReqCompeleteTask other) : this() {
      taskId_ = other.taskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask Clone() {
      return new ReqCompeleteTask(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int task_idFieldNumber = 1;
    private pb::ByteString taskId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString task_id {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqCompeleteTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqCompeleteTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (task_id != other.task_id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (task_id.Length != 0) hash ^= task_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (task_id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(task_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (task_id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(task_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqCompeleteTask other) {
      if (other == null) {
        return;
      }
      if (other.task_id.Length != 0) {
        task_id = other.task_id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            task_id = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_ADD_BUILDING						= 5000; 	//
  /// </summary>
  public sealed partial class ReqAddSceneBuilding : pb::IMessage<ReqAddSceneBuilding> {
    private static readonly pb::MessageParser<ReqAddSceneBuilding> _parser = new pb::MessageParser<ReqAddSceneBuilding>(() => new ReqAddSceneBuilding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAddSceneBuilding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAddSceneBuilding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAddSceneBuilding(ReqAddSceneBuilding other) : this() {
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      guid_ = other.guid_ != null ? other.guid_.Clone() : null;
      master_ = other.master_ != null ? other.master_.Clone() : null;
      configId_ = other.configId_;
      sceneId_ = other.sceneId_;
      masterName_ = other.masterName_;
      isHomeScene_ = other.isHomeScene_;
      isBuilding_ = other.isBuilding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAddSceneBuilding Clone() {
      return new ReqAddSceneBuilding(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int posFieldNumber = 1;
    private global::NFMsg.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int guidFieldNumber = 2;
    private global::NFMsg.Ident guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "master" field.</summary>
    public const int masterFieldNumber = 3;
    private global::NFMsg.Ident master_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident master {
      get { return master_; }
      set {
        master_ = value;
      }
    }

    /// <summary>Field number for the "config_id" field.</summary>
    public const int config_idFieldNumber = 4;
    private pb::ByteString configId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString config_id {
      get { return configId_; }
      set {
        configId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int scene_idFieldNumber = 5;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int scene_id {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "master_name" field.</summary>
    public const int master_nameFieldNumber = 6;
    private pb::ByteString masterName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString master_name {
      get { return masterName_; }
      set {
        masterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_home_scene" field.</summary>
    public const int is_home_sceneFieldNumber = 7;
    private int isHomeScene_;
    /// <summary>
    ///is home or clan scene
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int is_home_scene {
      get { return isHomeScene_; }
      set {
        isHomeScene_ = value;
      }
    }

    /// <summary>Field number for the "is_building" field.</summary>
    public const int is_buildingFieldNumber = 8;
    private int isBuilding_;
    /// <summary>
    ///building or tree
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int is_building {
      get { return isBuilding_; }
      set {
        isBuilding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAddSceneBuilding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAddSceneBuilding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(pos, other.pos)) return false;
      if (!object.Equals(guid, other.guid)) return false;
      if (!object.Equals(master, other.master)) return false;
      if (config_id != other.config_id) return false;
      if (scene_id != other.scene_id) return false;
      if (master_name != other.master_name) return false;
      if (is_home_scene != other.is_home_scene) return false;
      if (is_building != other.is_building) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= pos.GetHashCode();
      if (guid_ != null) hash ^= guid.GetHashCode();
      if (master_ != null) hash ^= master.GetHashCode();
      if (config_id.Length != 0) hash ^= config_id.GetHashCode();
      if (scene_id != 0) hash ^= scene_id.GetHashCode();
      if (master_name.Length != 0) hash ^= master_name.GetHashCode();
      if (is_home_scene != 0) hash ^= is_home_scene.GetHashCode();
      if (is_building != 0) hash ^= is_building.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(pos);
      }
      if (guid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(guid);
      }
      if (master_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(master);
      }
      if (config_id.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(config_id);
      }
      if (scene_id != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(scene_id);
      }
      if (master_name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(master_name);
      }
      if (is_home_scene != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(is_home_scene);
      }
      if (is_building != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(is_building);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(pos);
      }
      if (guid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(guid);
      }
      if (master_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(master);
      }
      if (config_id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(config_id);
      }
      if (scene_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(scene_id);
      }
      if (master_name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(master_name);
      }
      if (is_home_scene != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(is_home_scene);
      }
      if (is_building != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(is_building);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAddSceneBuilding other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::NFMsg.Vector3();
        }
        pos.MergeFrom(other.pos);
      }
      if (other.guid_ != null) {
        if (guid_ == null) {
          guid_ = new global::NFMsg.Ident();
        }
        guid.MergeFrom(other.guid);
      }
      if (other.master_ != null) {
        if (master_ == null) {
          master_ = new global::NFMsg.Ident();
        }
        master.MergeFrom(other.master);
      }
      if (other.config_id.Length != 0) {
        config_id = other.config_id;
      }
      if (other.scene_id != 0) {
        scene_id = other.scene_id;
      }
      if (other.master_name.Length != 0) {
        master_name = other.master_name;
      }
      if (other.is_home_scene != 0) {
        is_home_scene = other.is_home_scene;
      }
      if (other.is_building != 0) {
        is_building = other.is_building;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 18: {
            if (guid_ == null) {
              guid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(guid_);
            break;
          }
          case 26: {
            if (master_ == null) {
              master_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(master_);
            break;
          }
          case 34: {
            config_id = input.ReadBytes();
            break;
          }
          case 40: {
            scene_id = input.ReadInt32();
            break;
          }
          case 50: {
            master_name = input.ReadBytes();
            break;
          }
          case 56: {
            is_home_scene = input.ReadInt32();
            break;
          }
          case 64: {
            is_building = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqSceneBuildings : pb::IMessage<ReqSceneBuildings> {
    private static readonly pb::MessageParser<ReqSceneBuildings> _parser = new pb::MessageParser<ReqSceneBuildings>(() => new ReqSceneBuildings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSceneBuildings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSceneBuildings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSceneBuildings(ReqSceneBuildings other) : this() {
      sceneId_ = other.sceneId_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSceneBuildings Clone() {
      return new ReqSceneBuildings(this);
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int scene_idFieldNumber = 1;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int scene_id {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int posFieldNumber = 2;
    private global::NFMsg.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSceneBuildings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSceneBuildings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (scene_id != other.scene_id) return false;
      if (!object.Equals(pos, other.pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scene_id != 0) hash ^= scene_id.GetHashCode();
      if (pos_ != null) hash ^= pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scene_id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(scene_id);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scene_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(scene_id);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSceneBuildings other) {
      if (other == null) {
        return;
      }
      if (other.scene_id != 0) {
        scene_id = other.scene_id;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::NFMsg.Vector3();
        }
        pos.MergeFrom(other.pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            scene_id = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::NFMsg.Vector3();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckSceneBuildings : pb::IMessage<AckSceneBuildings> {
    private static readonly pb::MessageParser<AckSceneBuildings> _parser = new pb::MessageParser<AckSceneBuildings>(() => new AckSceneBuildings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSceneBuildings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSceneBuildings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSceneBuildings(AckSceneBuildings other) : this() {
      buildings_ = other.buildings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSceneBuildings Clone() {
      return new AckSceneBuildings(this);
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int buildingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.ReqAddSceneBuilding> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.ReqAddSceneBuilding.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> buildings_ = new pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> buildings {
      get { return buildings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSceneBuildings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSceneBuildings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!buildings_.Equals(other.buildings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= buildings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buildings_.WriteTo(output, _repeated_buildings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckSceneBuildings other) {
      if (other == null) {
        return;
      }
      buildings_.Add(other.buildings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqStoreSceneBuildings : pb::IMessage<ReqStoreSceneBuildings> {
    private static readonly pb::MessageParser<ReqStoreSceneBuildings> _parser = new pb::MessageParser<ReqStoreSceneBuildings>(() => new ReqStoreSceneBuildings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqStoreSceneBuildings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqStoreSceneBuildings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqStoreSceneBuildings(ReqStoreSceneBuildings other) : this() {
      guid_ = other.guid_ != null ? other.guid_.Clone() : null;
      homeSceneId_ = other.homeSceneId_;
      buildings_ = other.buildings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqStoreSceneBuildings Clone() {
      return new ReqStoreSceneBuildings(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int guidFieldNumber = 1;
    private global::NFMsg.Ident guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "home_scene_id" field.</summary>
    public const int home_scene_idFieldNumber = 2;
    private int homeSceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int home_scene_id {
      get { return homeSceneId_; }
      set {
        homeSceneId_ = value;
      }
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int buildingsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.ReqAddSceneBuilding> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.ReqAddSceneBuilding.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> buildings_ = new pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> buildings {
      get { return buildings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqStoreSceneBuildings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqStoreSceneBuildings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(guid, other.guid)) return false;
      if (home_scene_id != other.home_scene_id) return false;
      if(!buildings_.Equals(other.buildings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guid_ != null) hash ^= guid.GetHashCode();
      if (home_scene_id != 0) hash ^= home_scene_id.GetHashCode();
      hash ^= buildings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(guid);
      }
      if (home_scene_id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(home_scene_id);
      }
      buildings_.WriteTo(output, _repeated_buildings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(guid);
      }
      if (home_scene_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(home_scene_id);
      }
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqStoreSceneBuildings other) {
      if (other == null) {
        return;
      }
      if (other.guid_ != null) {
        if (guid_ == null) {
          guid_ = new global::NFMsg.Ident();
        }
        guid.MergeFrom(other.guid);
      }
      if (other.home_scene_id != 0) {
        home_scene_id = other.home_scene_id;
      }
      buildings_.Add(other.buildings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guid_ == null) {
              guid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(guid_);
            break;
          }
          case 16: {
            home_scene_id = input.ReadInt32();
            break;
          }
          case 26: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////////////工会/////////////////////////////////////////////////////////////////////////////////////
  ///EGMI_REQ_CREATE_CLAN                       = 300; // 申请创建公会 EGMI_ACK_CREATE_CLAN						= 301; // 创建公会结果
  /// </summary>
  public sealed partial class ReqAckCreateClan : pb::IMessage<ReqAckCreateClan> {
    private static readonly pb::MessageParser<ReqAckCreateClan> _parser = new pb::MessageParser<ReqAckCreateClan>(() => new ReqAckCreateClan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckCreateClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateClan(ReqAckCreateClan other) : this() {
      clanId_ = other.clanId_ != null ? other.clanId_.Clone() : null;
      clanName_ = other.clanName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateClan Clone() {
      return new ReqAckCreateClan(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int clan_idFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident clan_id {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "clan_name" field.</summary>
    public const int clan_nameFieldNumber = 2;
    private pb::ByteString clanName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString clan_name {
      get { return clanName_; }
      set {
        clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckCreateClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckCreateClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(clan_id, other.clan_id)) return false;
      if (clan_name != other.clan_name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= clan_id.GetHashCode();
      if (clan_name.Length != 0) hash ^= clan_name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(clan_id);
      }
      if (clan_name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(clan_name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(clan_id);
      }
      if (clan_name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(clan_name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckCreateClan other) {
      if (other == null) {
        return;
      }
      if (other.clanId_ != null) {
        if (clanId_ == null) {
          clanId_ = new global::NFMsg.Ident();
        }
        clan_id.MergeFrom(other.clan_id);
      }
      if (other.clan_name.Length != 0) {
        clan_name = other.clan_name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clanId_ == null) {
              clanId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clanId_);
            break;
          }
          case 18: {
            clan_name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_SEARCH_CLAN                       = 308; // 申请搜索公会
  /// </summary>
  public sealed partial class ReqSearchClan : pb::IMessage<ReqSearchClan> {
    private static readonly pb::MessageParser<ReqSearchClan> _parser = new pb::MessageParser<ReqSearchClan>(() => new ReqSearchClan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSearchClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchClan(ReqSearchClan other) : this() {
      clanName_ = other.clanName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchClan Clone() {
      return new ReqSearchClan(this);
    }

    /// <summary>Field number for the "clan_name" field.</summary>
    public const int clan_nameFieldNumber = 1;
    private pb::ByteString clanName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString clan_name {
      get { return clanName_; }
      set {
        clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSearchClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSearchClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (clan_name != other.clan_name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clan_name.Length != 0) hash ^= clan_name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clan_name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(clan_name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clan_name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(clan_name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSearchClan other) {
      if (other == null) {
        return;
      }
      if (other.clan_name.Length != 0) {
        clan_name = other.clan_name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            clan_name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_SEARCH_CLAN                       = 309; // 返回搜索公会
  /// </summary>
  public sealed partial class AckSearchClan : pb::IMessage<AckSearchClan> {
    private static readonly pb::MessageParser<AckSearchClan> _parser = new pb::MessageParser<AckSearchClan>(() => new AckSearchClan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSearchClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchClan(AckSearchClan other) : this() {
      clanList_ = other.clanList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchClan Clone() {
      return new AckSearchClan(this);
    }

    /// <summary>Field number for the "clan_list" field.</summary>
    public const int clan_listFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.AckSearchClan.Types.SearchClanObject> _repeated_clanList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.AckSearchClan.Types.SearchClanObject.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.AckSearchClan.Types.SearchClanObject> clanList_ = new pbc::RepeatedField<global::NFMsg.AckSearchClan.Types.SearchClanObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.AckSearchClan.Types.SearchClanObject> clan_list {
      get { return clanList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSearchClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSearchClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!clanList_.Equals(other.clanList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= clanList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      clanList_.WriteTo(output, _repeated_clanList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += clanList_.CalculateSize(_repeated_clanList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckSearchClan other) {
      if (other == null) {
        return;
      }
      clanList_.Add(other.clanList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            clanList_.AddEntriesFrom(input, _repeated_clanList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AckSearchClan message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SearchClanObject : pb::IMessage<SearchClanObject> {
        private static readonly pb::MessageParser<SearchClanObject> _parser = new pb::MessageParser<SearchClanObject>(() => new SearchClanObject());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SearchClanObject> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NFMsg.AckSearchClan.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchClanObject() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchClanObject(SearchClanObject other) : this() {
          clanID_ = other.clanID_ != null ? other.clanID_.Clone() : null;
          clanName_ = other.clanName_;
          clanIcon_ = other.clanIcon_;
          clanMemberCount_ = other.clanMemberCount_;
          clanMemberMaxCount_ = other.clanMemberMaxCount_;
          clanHonor_ = other.clanHonor_;
          clanRank_ = other.clanRank_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchClanObject Clone() {
          return new SearchClanObject(this);
        }

        /// <summary>Field number for the "clan_ID" field.</summary>
        public const int clan_IDFieldNumber = 1;
        private global::NFMsg.Ident clanID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NFMsg.Ident clan_ID {
          get { return clanID_; }
          set {
            clanID_ = value;
          }
        }

        /// <summary>Field number for the "clan_name" field.</summary>
        public const int clan_nameFieldNumber = 2;
        private pb::ByteString clanName_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString clan_name {
          get { return clanName_; }
          set {
            clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "clan_icon" field.</summary>
        public const int clan_iconFieldNumber = 3;
        private pb::ByteString clanIcon_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString clan_icon {
          get { return clanIcon_; }
          set {
            clanIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "clan_member_count" field.</summary>
        public const int clan_member_countFieldNumber = 4;
        private int clanMemberCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int clan_member_count {
          get { return clanMemberCount_; }
          set {
            clanMemberCount_ = value;
          }
        }

        /// <summary>Field number for the "clan_member_max_count" field.</summary>
        public const int clan_member_max_countFieldNumber = 5;
        private int clanMemberMaxCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int clan_member_max_count {
          get { return clanMemberMaxCount_; }
          set {
            clanMemberMaxCount_ = value;
          }
        }

        /// <summary>Field number for the "clan_honor" field.</summary>
        public const int clan_honorFieldNumber = 6;
        private int clanHonor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int clan_honor {
          get { return clanHonor_; }
          set {
            clanHonor_ = value;
          }
        }

        /// <summary>Field number for the "clan_rank" field.</summary>
        public const int clan_rankFieldNumber = 7;
        private int clanRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int clan_rank {
          get { return clanRank_; }
          set {
            clanRank_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SearchClanObject);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SearchClanObject other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(clan_ID, other.clan_ID)) return false;
          if (clan_name != other.clan_name) return false;
          if (clan_icon != other.clan_icon) return false;
          if (clan_member_count != other.clan_member_count) return false;
          if (clan_member_max_count != other.clan_member_max_count) return false;
          if (clan_honor != other.clan_honor) return false;
          if (clan_rank != other.clan_rank) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (clanID_ != null) hash ^= clan_ID.GetHashCode();
          if (clan_name.Length != 0) hash ^= clan_name.GetHashCode();
          if (clan_icon.Length != 0) hash ^= clan_icon.GetHashCode();
          if (clan_member_count != 0) hash ^= clan_member_count.GetHashCode();
          if (clan_member_max_count != 0) hash ^= clan_member_max_count.GetHashCode();
          if (clan_honor != 0) hash ^= clan_honor.GetHashCode();
          if (clan_rank != 0) hash ^= clan_rank.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (clanID_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(clan_ID);
          }
          if (clan_name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(clan_name);
          }
          if (clan_icon.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(clan_icon);
          }
          if (clan_member_count != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(clan_member_count);
          }
          if (clan_member_max_count != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(clan_member_max_count);
          }
          if (clan_honor != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(clan_honor);
          }
          if (clan_rank != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(clan_rank);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (clanID_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(clan_ID);
          }
          if (clan_name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(clan_name);
          }
          if (clan_icon.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(clan_icon);
          }
          if (clan_member_count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(clan_member_count);
          }
          if (clan_member_max_count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(clan_member_max_count);
          }
          if (clan_honor != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(clan_honor);
          }
          if (clan_rank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(clan_rank);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SearchClanObject other) {
          if (other == null) {
            return;
          }
          if (other.clanID_ != null) {
            if (clanID_ == null) {
              clanID_ = new global::NFMsg.Ident();
            }
            clan_ID.MergeFrom(other.clan_ID);
          }
          if (other.clan_name.Length != 0) {
            clan_name = other.clan_name;
          }
          if (other.clan_icon.Length != 0) {
            clan_icon = other.clan_icon;
          }
          if (other.clan_member_count != 0) {
            clan_member_count = other.clan_member_count;
          }
          if (other.clan_member_max_count != 0) {
            clan_member_max_count = other.clan_member_max_count;
          }
          if (other.clan_honor != 0) {
            clan_honor = other.clan_honor;
          }
          if (other.clan_rank != 0) {
            clan_rank = other.clan_rank;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (clanID_ == null) {
                  clanID_ = new global::NFMsg.Ident();
                }
                input.ReadMessage(clanID_);
                break;
              }
              case 18: {
                clan_name = input.ReadBytes();
                break;
              }
              case 26: {
                clan_icon = input.ReadBytes();
                break;
              }
              case 32: {
                clan_member_count = input.ReadInt32();
                break;
              }
              case 40: {
                clan_member_max_count = input.ReadInt32();
                break;
              }
              case 48: {
                clan_honor = input.ReadInt32();
                break;
              }
              case 56: {
                clan_rank = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_REQ_JOIN_CLAN                         = 302; // 申请加入公会 EGMI_ACK_JOIN_CLAN							= 303; // 加入公会结果
  /// </summary>
  public sealed partial class ReqAckJoinClan : pb::IMessage<ReqAckJoinClan> {
    private static readonly pb::MessageParser<ReqAckJoinClan> _parser = new pb::MessageParser<ReqAckJoinClan>(() => new ReqAckJoinClan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckJoinClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinClan(ReqAckJoinClan other) : this() {
      clanId_ = other.clanId_ != null ? other.clanId_.Clone() : null;
      clanName_ = other.clanName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinClan Clone() {
      return new ReqAckJoinClan(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int clan_idFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident clan_id {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "clan_name" field.</summary>
    public const int clan_nameFieldNumber = 2;
    private pb::ByteString clanName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString clan_name {
      get { return clanName_; }
      set {
        clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckJoinClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckJoinClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(clan_id, other.clan_id)) return false;
      if (clan_name != other.clan_name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= clan_id.GetHashCode();
      if (clan_name.Length != 0) hash ^= clan_name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(clan_id);
      }
      if (clan_name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(clan_name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(clan_id);
      }
      if (clan_name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(clan_name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckJoinClan other) {
      if (other == null) {
        return;
      }
      if (other.clanId_ != null) {
        if (clanId_ == null) {
          clanId_ = new global::NFMsg.Ident();
        }
        clan_id.MergeFrom(other.clan_id);
      }
      if (other.clan_name.Length != 0) {
        clan_name = other.clan_name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clanId_ == null) {
              clanId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clanId_);
            break;
          }
          case 18: {
            clan_name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_LEAVE_CLAN						= 305; // 离开公会结果 
  /// </summary>
  public sealed partial class ReqAckLeaveClan : pb::IMessage<ReqAckLeaveClan> {
    private static readonly pb::MessageParser<ReqAckLeaveClan> _parser = new pb::MessageParser<ReqAckLeaveClan>(() => new ReqAckLeaveClan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckLeaveClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveClan(ReqAckLeaveClan other) : this() {
      clanId_ = other.clanId_ != null ? other.clanId_.Clone() : null;
      clanName_ = other.clanName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveClan Clone() {
      return new ReqAckLeaveClan(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int clan_idFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident clan_id {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "clan_name" field.</summary>
    public const int clan_nameFieldNumber = 2;
    private pb::ByteString clanName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString clan_name {
      get { return clanName_; }
      set {
        clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckLeaveClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckLeaveClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(clan_id, other.clan_id)) return false;
      if (clan_name != other.clan_name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= clan_id.GetHashCode();
      if (clan_name.Length != 0) hash ^= clan_name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(clan_id);
      }
      if (clan_name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(clan_name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(clan_id);
      }
      if (clan_name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(clan_name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckLeaveClan other) {
      if (other == null) {
        return;
      }
      if (other.clanId_ != null) {
        if (clanId_ == null) {
          clanId_ = new global::NFMsg.Ident();
        }
        clan_id.MergeFrom(other.clan_id);
      }
      if (other.clan_name.Length != 0) {
        clan_name = other.clan_name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clanId_ == null) {
              clanId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clanId_);
            break;
          }
          case 18: {
            clan_name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///操作成员 EGMI_REQ_OPR_CLAN                        	= 306; // 申请成员操作 EGMI_ACK_OPR_CLAN                        	= 307; // 成员操作结果
  /// </summary>
  public sealed partial class ReqAckOprClanMember : pb::IMessage<ReqAckOprClanMember> {
    private static readonly pb::MessageParser<ReqAckOprClanMember> _parser = new pb::MessageParser<ReqAckOprClanMember>(() => new ReqAckOprClanMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckOprClanMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprClanMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprClanMember(ReqAckOprClanMember other) : this() {
      clanId_ = other.clanId_ != null ? other.clanId_.Clone() : null;
      memberId_ = other.memberId_ != null ? other.memberId_.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprClanMember Clone() {
      return new ReqAckOprClanMember(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int clan_idFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident clan_id {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "member_id" field.</summary>
    public const int member_idFieldNumber = 2;
    private global::NFMsg.Ident memberId_;
    /// <summary>
    ///被操作的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident member_id {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int typeFieldNumber = 3;
    private global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckOprClanMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckOprClanMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(clan_id, other.clan_id)) return false;
      if (!object.Equals(member_id, other.member_id)) return false;
      if (type != other.type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= clan_id.GetHashCode();
      if (memberId_ != null) hash ^= member_id.GetHashCode();
      if (type != 0) hash ^= type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(clan_id);
      }
      if (memberId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(member_id);
      }
      if (type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(clan_id);
      }
      if (memberId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(member_id);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckOprClanMember other) {
      if (other == null) {
        return;
      }
      if (other.clanId_ != null) {
        if (clanId_ == null) {
          clanId_ = new global::NFMsg.Ident();
        }
        clan_id.MergeFrom(other.clan_id);
      }
      if (other.memberId_ != null) {
        if (memberId_ == null) {
          memberId_ = new global::NFMsg.Ident();
        }
        member_id.MergeFrom(other.member_id);
      }
      if (other.type != 0) {
        type = other.type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clanId_ == null) {
              clanId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clanId_);
            break;
          }
          case 18: {
            if (memberId_ == null) {
              memberId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(memberId_);
            break;
          }
          case 24: {
            type_ = (global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckOprClanMember message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGClanMemberOprType {
        [pbr::OriginalName("EGAT_DOWN")] EGAT_DOWN = 0,
        [pbr::OriginalName("EGAT_UP")] EGAT_UP = 1,
        [pbr::OriginalName("EGAT_KICK")] EGAT_KICK = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_ReqEnterClanEctype					= 315; // 
  /// </summary>
  public sealed partial class ReqEnterClanEctype : pb::IMessage<ReqEnterClanEctype> {
    private static readonly pb::MessageParser<ReqEnterClanEctype> _parser = new pb::MessageParser<ReqEnterClanEctype>(() => new ReqEnterClanEctype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEnterClanEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterClanEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterClanEctype(ReqEnterClanEctype other) : this() {
      clanId_ = other.clanId_ != null ? other.clanId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterClanEctype Clone() {
      return new ReqEnterClanEctype(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int clan_idFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident clan_id {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEnterClanEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEnterClanEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(clan_id, other.clan_id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= clan_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(clan_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(clan_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqEnterClanEctype other) {
      if (other == null) {
        return;
      }
      if (other.clanId_ != null) {
        if (clanId_ == null) {
          clanId_ = new global::NFMsg.Ident();
        }
        clan_id.MergeFrom(other.clan_id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clanId_ == null) {
              clanId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clanId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_SET_FIGHT_HERO						= 508;		 // 战斗武将
  /// </summary>
  public sealed partial class ReqSetFightHero : pb::IMessage<ReqSetFightHero> {
    private static readonly pb::MessageParser<ReqSetFightHero> _parser = new pb::MessageParser<ReqSetFightHero>(() => new ReqSetFightHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSetFightHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero(ReqSetFightHero other) : this() {
      heroid_ = other.heroid_ != null ? other.heroid_.Clone() : null;
      set_ = other.set_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero Clone() {
      return new ReqSetFightHero(this);
    }

    /// <summary>Field number for the "Heroid" field.</summary>
    public const int HeroidFieldNumber = 1;
    private global::NFMsg.Ident heroid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    /// <summary>Field number for the "Set" field.</summary>
    public const int SetFieldNumber = 2;
    private int set_;
    /// <summary>
    ///0,1,2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSetFightHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSetFightHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Heroid, other.Heroid)) return false;
      if (Set != other.Set) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (heroid_ != null) hash ^= Heroid.GetHashCode();
      if (Set != 0) hash ^= Set.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (heroid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Heroid);
      }
      if (Set != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Set);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (heroid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heroid);
      }
      if (Set != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Set);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSetFightHero other) {
      if (other == null) {
        return;
      }
      if (other.heroid_ != null) {
        if (heroid_ == null) {
          heroid_ = new global::NFMsg.Ident();
        }
        Heroid.MergeFrom(other.Heroid);
      }
      if (other.Set != 0) {
        Set = other.Set;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (heroid_ == null) {
              heroid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroid_);
            break;
          }
          case 16: {
            Set = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_SWITCH_FIGHT_HERO						= 508;		 // 战斗武将
  /// </summary>
  public sealed partial class ReqSwitchFightHero : pb::IMessage<ReqSwitchFightHero> {
    private static readonly pb::MessageParser<ReqSwitchFightHero> _parser = new pb::MessageParser<ReqSwitchFightHero>(() => new ReqSwitchFightHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSwitchFightHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchFightHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchFightHero(ReqSwitchFightHero other) : this() {
      heroid_ = other.heroid_ != null ? other.heroid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchFightHero Clone() {
      return new ReqSwitchFightHero(this);
    }

    /// <summary>Field number for the "Heroid" field.</summary>
    public const int HeroidFieldNumber = 1;
    private global::NFMsg.Ident heroid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSwitchFightHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSwitchFightHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Heroid, other.Heroid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (heroid_ != null) hash ^= Heroid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (heroid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Heroid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (heroid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heroid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSwitchFightHero other) {
      if (other == null) {
        return;
      }
      if (other.heroid_ != null) {
        if (heroid_ == null) {
          heroid_ = new global::NFMsg.Ident();
        }
        Heroid.MergeFrom(other.Heroid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (heroid_ == null) {
              heroid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroid_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_BUY_FORM_SHOP
  /// </summary>
  public sealed partial class ReqBuyItemFromShop : pb::IMessage<ReqBuyItemFromShop> {
    private static readonly pb::MessageParser<ReqBuyItemFromShop> _parser = new pb::MessageParser<ReqBuyItemFromShop>(() => new ReqBuyItemFromShop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBuyItemFromShop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBuyItemFromShop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBuyItemFromShop(ReqBuyItemFromShop other) : this() {
      itemID_ = other.itemID_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBuyItemFromShop Clone() {
      return new ReqBuyItemFromShop(this);
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int itemIDFieldNumber = 1;
    private pb::ByteString itemID_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString itemID {
      get { return itemID_; }
      set {
        itemID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int countFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBuyItemFromShop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBuyItemFromShop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (itemID != other.itemID) return false;
      if (count != other.count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (itemID.Length != 0) hash ^= itemID.GetHashCode();
      if (count != 0) hash ^= count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (itemID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(itemID);
      }
      if (count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (itemID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(itemID);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqBuyItemFromShop other) {
      if (other == null) {
        return;
      }
      if (other.itemID.Length != 0) {
        itemID = other.itemID;
      }
      if (other.count != 0) {
        count = other.count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            itemID = input.ReadBytes();
            break;
          }
          case 16: {
            count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PVPPlayerInfo : pb::IMessage<PVPPlayerInfo> {
    private static readonly pb::MessageParser<PVPPlayerInfo> _parser = new pb::MessageParser<PVPPlayerInfo>(() => new PVPPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PVPPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPPlayerInfo(PVPPlayerInfo other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      single_ = other.single_;
      level_ = other.level_;
      battlePoint_ = other.battlePoint_;
      name_ = other.name_;
      head_ = other.head_;
      gold_ = other.gold_;
      diamond_ = other.diamond_;
      heroCnf1_ = other.heroCnf1_;
      heroCnf2_ = other.heroCnf2_;
      heroCnf3_ = other.heroCnf3_;
      heroStar1_ = other.heroStar1_;
      heroStar2_ = other.heroStar2_;
      heroStar3_ = other.heroStar3_;
      heroId1_ = other.heroId1_ != null ? other.heroId1_.Clone() : null;
      heroId2_ = other.heroId2_ != null ? other.heroId2_.Clone() : null;
      heroId3_ = other.heroId3_ != null ? other.heroId3_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPPlayerInfo Clone() {
      return new PVPPlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 1;
    private global::NFMsg.Ident id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "single" field.</summary>
    public const int singleFieldNumber = 2;
    private int single_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int single {
      get { return single_; }
      set {
        single_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int levelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "battle_point" field.</summary>
    public const int battle_pointFieldNumber = 5;
    private int battlePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int battle_point {
      get { return battlePoint_; }
      set {
        battlePoint_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int nameFieldNumber = 6;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int headFieldNumber = 7;
    private pb::ByteString head_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString head {
      get { return head_; }
      set {
        head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int goldFieldNumber = 8;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int diamondFieldNumber = 9;
    private int diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "hero_cnf1" field.</summary>
    public const int hero_cnf1FieldNumber = 20;
    private pb::ByteString heroCnf1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString hero_cnf1 {
      get { return heroCnf1_; }
      set {
        heroCnf1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_cnf2" field.</summary>
    public const int hero_cnf2FieldNumber = 21;
    private pb::ByteString heroCnf2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString hero_cnf2 {
      get { return heroCnf2_; }
      set {
        heroCnf2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_cnf3" field.</summary>
    public const int hero_cnf3FieldNumber = 22;
    private pb::ByteString heroCnf3_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString hero_cnf3 {
      get { return heroCnf3_; }
      set {
        heroCnf3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_star1" field.</summary>
    public const int hero_star1FieldNumber = 25;
    private int heroStar1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int hero_star1 {
      get { return heroStar1_; }
      set {
        heroStar1_ = value;
      }
    }

    /// <summary>Field number for the "hero_star2" field.</summary>
    public const int hero_star2FieldNumber = 26;
    private int heroStar2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int hero_star2 {
      get { return heroStar2_; }
      set {
        heroStar2_ = value;
      }
    }

    /// <summary>Field number for the "hero_star3" field.</summary>
    public const int hero_star3FieldNumber = 27;
    private int heroStar3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int hero_star3 {
      get { return heroStar3_; }
      set {
        heroStar3_ = value;
      }
    }

    /// <summary>Field number for the "hero_id1" field.</summary>
    public const int hero_id1FieldNumber = 28;
    private global::NFMsg.Ident heroId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident hero_id1 {
      get { return heroId1_; }
      set {
        heroId1_ = value;
      }
    }

    /// <summary>Field number for the "hero_id2" field.</summary>
    public const int hero_id2FieldNumber = 29;
    private global::NFMsg.Ident heroId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident hero_id2 {
      get { return heroId2_; }
      set {
        heroId2_ = value;
      }
    }

    /// <summary>Field number for the "hero_id3" field.</summary>
    public const int hero_id3FieldNumber = 30;
    private global::NFMsg.Ident heroId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident hero_id3 {
      get { return heroId3_; }
      set {
        heroId3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PVPPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PVPPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(id, other.id)) return false;
      if (single != other.single) return false;
      if (level != other.level) return false;
      if (battle_point != other.battle_point) return false;
      if (name != other.name) return false;
      if (head != other.head) return false;
      if (gold != other.gold) return false;
      if (diamond != other.diamond) return false;
      if (hero_cnf1 != other.hero_cnf1) return false;
      if (hero_cnf2 != other.hero_cnf2) return false;
      if (hero_cnf3 != other.hero_cnf3) return false;
      if (hero_star1 != other.hero_star1) return false;
      if (hero_star2 != other.hero_star2) return false;
      if (hero_star3 != other.hero_star3) return false;
      if (!object.Equals(hero_id1, other.hero_id1)) return false;
      if (!object.Equals(hero_id2, other.hero_id2)) return false;
      if (!object.Equals(hero_id3, other.hero_id3)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= id.GetHashCode();
      if (single != 0) hash ^= single.GetHashCode();
      if (level != 0) hash ^= level.GetHashCode();
      if (battle_point != 0) hash ^= battle_point.GetHashCode();
      if (name.Length != 0) hash ^= name.GetHashCode();
      if (head.Length != 0) hash ^= head.GetHashCode();
      if (gold != 0) hash ^= gold.GetHashCode();
      if (diamond != 0) hash ^= diamond.GetHashCode();
      if (hero_cnf1.Length != 0) hash ^= hero_cnf1.GetHashCode();
      if (hero_cnf2.Length != 0) hash ^= hero_cnf2.GetHashCode();
      if (hero_cnf3.Length != 0) hash ^= hero_cnf3.GetHashCode();
      if (hero_star1 != 0) hash ^= hero_star1.GetHashCode();
      if (hero_star2 != 0) hash ^= hero_star2.GetHashCode();
      if (hero_star3 != 0) hash ^= hero_star3.GetHashCode();
      if (heroId1_ != null) hash ^= hero_id1.GetHashCode();
      if (heroId2_ != null) hash ^= hero_id2.GetHashCode();
      if (heroId3_ != null) hash ^= hero_id3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(id);
      }
      if (single != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(single);
      }
      if (level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(level);
      }
      if (battle_point != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(battle_point);
      }
      if (name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(name);
      }
      if (head.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(head);
      }
      if (gold != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(gold);
      }
      if (diamond != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(diamond);
      }
      if (hero_cnf1.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(hero_cnf1);
      }
      if (hero_cnf2.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(hero_cnf2);
      }
      if (hero_cnf3.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteBytes(hero_cnf3);
      }
      if (hero_star1 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(hero_star1);
      }
      if (hero_star2 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(hero_star2);
      }
      if (hero_star3 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(hero_star3);
      }
      if (heroId1_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(hero_id1);
      }
      if (heroId2_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(hero_id2);
      }
      if (heroId3_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(hero_id3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(id);
      }
      if (single != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(single);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (battle_point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(battle_point);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(name);
      }
      if (head.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(head);
      }
      if (gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(gold);
      }
      if (diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(diamond);
      }
      if (hero_cnf1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(hero_cnf1);
      }
      if (hero_cnf2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(hero_cnf2);
      }
      if (hero_cnf3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(hero_cnf3);
      }
      if (hero_star1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(hero_star1);
      }
      if (hero_star2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(hero_star2);
      }
      if (hero_star3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(hero_star3);
      }
      if (heroId1_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(hero_id1);
      }
      if (heroId2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(hero_id2);
      }
      if (heroId3_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(hero_id3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PVPPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::NFMsg.Ident();
        }
        id.MergeFrom(other.id);
      }
      if (other.single != 0) {
        single = other.single;
      }
      if (other.level != 0) {
        level = other.level;
      }
      if (other.battle_point != 0) {
        battle_point = other.battle_point;
      }
      if (other.name.Length != 0) {
        name = other.name;
      }
      if (other.head.Length != 0) {
        head = other.head;
      }
      if (other.gold != 0) {
        gold = other.gold;
      }
      if (other.diamond != 0) {
        diamond = other.diamond;
      }
      if (other.hero_cnf1.Length != 0) {
        hero_cnf1 = other.hero_cnf1;
      }
      if (other.hero_cnf2.Length != 0) {
        hero_cnf2 = other.hero_cnf2;
      }
      if (other.hero_cnf3.Length != 0) {
        hero_cnf3 = other.hero_cnf3;
      }
      if (other.hero_star1 != 0) {
        hero_star1 = other.hero_star1;
      }
      if (other.hero_star2 != 0) {
        hero_star2 = other.hero_star2;
      }
      if (other.hero_star3 != 0) {
        hero_star3 = other.hero_star3;
      }
      if (other.heroId1_ != null) {
        if (heroId1_ == null) {
          heroId1_ = new global::NFMsg.Ident();
        }
        hero_id1.MergeFrom(other.hero_id1);
      }
      if (other.heroId2_ != null) {
        if (heroId2_ == null) {
          heroId2_ = new global::NFMsg.Ident();
        }
        hero_id2.MergeFrom(other.hero_id2);
      }
      if (other.heroId3_ != null) {
        if (heroId3_ == null) {
          heroId3_ = new global::NFMsg.Ident();
        }
        hero_id3.MergeFrom(other.hero_id3);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            single = input.ReadInt32();
            break;
          }
          case 32: {
            level = input.ReadInt32();
            break;
          }
          case 40: {
            battle_point = input.ReadInt32();
            break;
          }
          case 50: {
            name = input.ReadBytes();
            break;
          }
          case 58: {
            head = input.ReadBytes();
            break;
          }
          case 64: {
            gold = input.ReadInt32();
            break;
          }
          case 72: {
            diamond = input.ReadInt32();
            break;
          }
          case 162: {
            hero_cnf1 = input.ReadBytes();
            break;
          }
          case 170: {
            hero_cnf2 = input.ReadBytes();
            break;
          }
          case 178: {
            hero_cnf3 = input.ReadBytes();
            break;
          }
          case 200: {
            hero_star1 = input.ReadInt32();
            break;
          }
          case 208: {
            hero_star2 = input.ReadInt32();
            break;
          }
          case 216: {
            hero_star3 = input.ReadInt32();
            break;
          }
          case 226: {
            if (heroId1_ == null) {
              heroId1_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroId1_);
            break;
          }
          case 234: {
            if (heroId2_ == null) {
              heroId2_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroId2_);
            break;
          }
          case 242: {
            if (heroId3_ == null) {
              heroId3_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(heroId3_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_SEARCH_OPPNENT
  /// </summary>
  public sealed partial class ReqSearchOppnent : pb::IMessage<ReqSearchOppnent> {
    private static readonly pb::MessageParser<ReqSearchOppnent> _parser = new pb::MessageParser<ReqSearchOppnent>(() => new ReqSearchOppnent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSearchOppnent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchOppnent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchOppnent(ReqSearchOppnent other) : this() {
      selfScene_ = other.selfScene_;
      diamond_ = other.diamond_;
      battlePoint_ = other.battlePoint_;
      friends_ = other.friends_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchOppnent Clone() {
      return new ReqSearchOppnent(this);
    }

    /// <summary>Field number for the "self_scene" field.</summary>
    public const int self_sceneFieldNumber = 1;
    private int selfScene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int self_scene {
      get { return selfScene_; }
      set {
        selfScene_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int diamondFieldNumber = 2;
    private int diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "battle_point" field.</summary>
    public const int battle_pointFieldNumber = 3;
    private int battlePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int battle_point {
      get { return battlePoint_; }
      set {
        battlePoint_ = value;
      }
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int friendsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(82, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> friends_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> friends {
      get { return friends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSearchOppnent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSearchOppnent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (self_scene != other.self_scene) return false;
      if (diamond != other.diamond) return false;
      if (battle_point != other.battle_point) return false;
      if(!friends_.Equals(other.friends_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (self_scene != 0) hash ^= self_scene.GetHashCode();
      if (diamond != 0) hash ^= diamond.GetHashCode();
      if (battle_point != 0) hash ^= battle_point.GetHashCode();
      hash ^= friends_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (self_scene != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(self_scene);
      }
      if (diamond != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(diamond);
      }
      if (battle_point != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(battle_point);
      }
      friends_.WriteTo(output, _repeated_friends_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (self_scene != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(self_scene);
      }
      if (diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(diamond);
      }
      if (battle_point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(battle_point);
      }
      size += friends_.CalculateSize(_repeated_friends_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSearchOppnent other) {
      if (other == null) {
        return;
      }
      if (other.self_scene != 0) {
        self_scene = other.self_scene;
      }
      if (other.diamond != 0) {
        diamond = other.diamond;
      }
      if (other.battle_point != 0) {
        battle_point = other.battle_point;
      }
      friends_.Add(other.friends_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            self_scene = input.ReadInt32();
            break;
          }
          case 16: {
            diamond = input.ReadInt32();
            break;
          }
          case 24: {
            battle_point = input.ReadInt32();
            break;
          }
          case 82: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_SEARCH_OPPNENT
  /// </summary>
  public sealed partial class AckSearchOppnent : pb::IMessage<AckSearchOppnent> {
    private static readonly pb::MessageParser<AckSearchOppnent> _parser = new pb::MessageParser<AckSearchOppnent>(() => new AckSearchOppnent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSearchOppnent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchOppnent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchOppnent(AckSearchOppnent other) : this() {
      sceneId_ = other.sceneId_;
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      gambleDiamond_ = other.gambleDiamond_;
      teamMembers_ = other.teamMembers_.Clone();
      opponent_ = other.opponent_ != null ? other.opponent_.Clone() : null;
      buildings_ = other.buildings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchOppnent Clone() {
      return new AckSearchOppnent(this);
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int scene_idFieldNumber = 1;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int scene_id {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 2;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "gamble_diamond" field.</summary>
    public const int gamble_diamondFieldNumber = 3;
    private int gambleDiamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int gamble_diamond {
      get { return gambleDiamond_; }
      set {
        gambleDiamond_ = value;
      }
    }

    /// <summary>Field number for the "team_members" field.</summary>
    public const int team_membersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_teamMembers_codec
        = pb::FieldCodec.ForMessage(42, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> teamMembers_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> team_members {
      get { return teamMembers_; }
    }

    /// <summary>Field number for the "opponent" field.</summary>
    public const int opponentFieldNumber = 14;
    private global::NFMsg.PVPPlayerInfo opponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.PVPPlayerInfo opponent {
      get { return opponent_; }
      set {
        opponent_ = value;
      }
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int buildingsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::NFMsg.ReqAddSceneBuilding> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(162, global::NFMsg.ReqAddSceneBuilding.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> buildings_ = new pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> buildings {
      get { return buildings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSearchOppnent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSearchOppnent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (scene_id != other.scene_id) return false;
      if (!object.Equals(team_id, other.team_id)) return false;
      if (gamble_diamond != other.gamble_diamond) return false;
      if(!teamMembers_.Equals(other.teamMembers_)) return false;
      if (!object.Equals(opponent, other.opponent)) return false;
      if(!buildings_.Equals(other.buildings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scene_id != 0) hash ^= scene_id.GetHashCode();
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (gamble_diamond != 0) hash ^= gamble_diamond.GetHashCode();
      hash ^= teamMembers_.GetHashCode();
      if (opponent_ != null) hash ^= opponent.GetHashCode();
      hash ^= buildings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scene_id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(scene_id);
      }
      if (teamId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(team_id);
      }
      if (gamble_diamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(gamble_diamond);
      }
      teamMembers_.WriteTo(output, _repeated_teamMembers_codec);
      if (opponent_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(opponent);
      }
      buildings_.WriteTo(output, _repeated_buildings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scene_id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(scene_id);
      }
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (gamble_diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(gamble_diamond);
      }
      size += teamMembers_.CalculateSize(_repeated_teamMembers_codec);
      if (opponent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(opponent);
      }
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckSearchOppnent other) {
      if (other == null) {
        return;
      }
      if (other.scene_id != 0) {
        scene_id = other.scene_id;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.gamble_diamond != 0) {
        gamble_diamond = other.gamble_diamond;
      }
      teamMembers_.Add(other.teamMembers_);
      if (other.opponent_ != null) {
        if (opponent_ == null) {
          opponent_ = new global::NFMsg.PVPPlayerInfo();
        }
        opponent.MergeFrom(other.opponent);
      }
      buildings_.Add(other.buildings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            scene_id = input.ReadInt32();
            break;
          }
          case 18: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 24: {
            gamble_diamond = input.ReadInt32();
            break;
          }
          case 42: {
            teamMembers_.AddEntriesFrom(input, _repeated_teamMembers_codec);
            break;
          }
          case 114: {
            if (opponent_ == null) {
              opponent_ = new global::NFMsg.PVPPlayerInfo();
            }
            input.ReadMessage(opponent_);
            break;
          }
          case 162: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_CANCEL_SEARCH
  /// </summary>
  public sealed partial class ReqAckCancelSearch : pb::IMessage<ReqAckCancelSearch> {
    private static readonly pb::MessageParser<ReqAckCancelSearch> _parser = new pb::MessageParser<ReqAckCancelSearch>(() => new ReqAckCancelSearch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckCancelSearch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCancelSearch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCancelSearch(ReqAckCancelSearch other) : this() {
      selfid_ = other.selfid_ != null ? other.selfid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCancelSearch Clone() {
      return new ReqAckCancelSearch(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int selfidFieldNumber = 1;
    private global::NFMsg.Ident selfid_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckCancelSearch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckCancelSearch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(selfid, other.selfid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= selfid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(selfid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(selfid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckCancelSearch other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::NFMsg.Ident();
        }
        selfid.MergeFrom(other.selfid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_END_OPPNENT
  /// </summary>
  public sealed partial class ReqEndBattle : pb::IMessage<ReqEndBattle> {
    private static readonly pb::MessageParser<ReqEndBattle> _parser = new pb::MessageParser<ReqEndBattle>(() => new ReqEndBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEndBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEndBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEndBattle(ReqEndBattle other) : this() {
      autoEnd_ = other.autoEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEndBattle Clone() {
      return new ReqEndBattle(this);
    }

    /// <summary>Field number for the "auto_end" field.</summary>
    public const int auto_endFieldNumber = 1;
    private int autoEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int auto_end {
      get { return autoEnd_; }
      set {
        autoEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEndBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEndBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (auto_end != other.auto_end) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (auto_end != 0) hash ^= auto_end.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (auto_end != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(auto_end);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (auto_end != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(auto_end);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqEndBattle other) {
      if (other == null) {
        return;
      }
      if (other.auto_end != 0) {
        auto_end = other.auto_end;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            auto_end = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_END_OPPNENT
  /// </summary>
  public sealed partial class AckEndBattle : pb::IMessage<AckEndBattle> {
    private static readonly pb::MessageParser<AckEndBattle> _parser = new pb::MessageParser<AckEndBattle>(() => new AckEndBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEndBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEndBattle(AckEndBattle other) : this() {
      win_ = other.win_;
      star_ = other.star_;
      gold_ = other.gold_;
      cup_ = other.cup_;
      diamond_ = other.diamond_;
      single_ = other.single_;
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      matchId_ = other.matchId_ != null ? other.matchId_.Clone() : null;
      members_ = other.members_.Clone();
      itemList_ = other.itemList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEndBattle Clone() {
      return new AckEndBattle(this);
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int winFieldNumber = 1;
    private int win_;
    /// <summary>
    ///下发的时候则为道具列表
    ///获得的金币等列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int starFieldNumber = 2;
    private int star_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int goldFieldNumber = 3;
    private int gold_;
    /// <summary>
    /// 副本获得的金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "cup" field.</summary>
    public const int cupFieldNumber = 4;
    private int cup_;
    /// <summary>
    /// 副本获得的经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int cup {
      get { return cup_; }
      set {
        cup_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int diamondFieldNumber = 5;
    private int diamond_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "single" field.</summary>
    public const int singleFieldNumber = 6;
    private int single_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int single {
      get { return single_; }
      set {
        single_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 7;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int match_idFieldNumber = 8;
    private global::NFMsg.Ident matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident match_id {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int membersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_members_codec
        = pb::FieldCodec.ForMessage(74, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> members_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> members {
      get { return members_; }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int item_listFieldNumber = 10;
    private static readonly pb::FieldCodec<global::NFMsg.ItemStruct> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(82, global::NFMsg.ItemStruct.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ItemStruct> itemList_ = new pbc::RepeatedField<global::NFMsg.ItemStruct>();
    /// <summary>
    /// 副本获得的道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ItemStruct> item_list {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckEndBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckEndBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (win != other.win) return false;
      if (star != other.star) return false;
      if (gold != other.gold) return false;
      if (cup != other.cup) return false;
      if (diamond != other.diamond) return false;
      if (single != other.single) return false;
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(match_id, other.match_id)) return false;
      if(!members_.Equals(other.members_)) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (win != 0) hash ^= win.GetHashCode();
      if (star != 0) hash ^= star.GetHashCode();
      if (gold != 0) hash ^= gold.GetHashCode();
      if (cup != 0) hash ^= cup.GetHashCode();
      if (diamond != 0) hash ^= diamond.GetHashCode();
      if (single != 0) hash ^= single.GetHashCode();
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (matchId_ != null) hash ^= match_id.GetHashCode();
      hash ^= members_.GetHashCode();
      hash ^= itemList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (win != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(win);
      }
      if (star != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(star);
      }
      if (gold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(gold);
      }
      if (cup != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(cup);
      }
      if (diamond != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(diamond);
      }
      if (single != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(single);
      }
      if (teamId_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(team_id);
      }
      if (matchId_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(match_id);
      }
      members_.WriteTo(output, _repeated_members_codec);
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(win);
      }
      if (star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(star);
      }
      if (gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(gold);
      }
      if (cup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(cup);
      }
      if (diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(diamond);
      }
      if (single != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(single);
      }
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (matchId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(match_id);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckEndBattle other) {
      if (other == null) {
        return;
      }
      if (other.win != 0) {
        win = other.win;
      }
      if (other.star != 0) {
        star = other.star;
      }
      if (other.gold != 0) {
        gold = other.gold;
      }
      if (other.cup != 0) {
        cup = other.cup;
      }
      if (other.diamond != 0) {
        diamond = other.diamond;
      }
      if (other.single != 0) {
        single = other.single;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.matchId_ != null) {
        if (matchId_ == null) {
          matchId_ = new global::NFMsg.Ident();
        }
        match_id.MergeFrom(other.match_id);
      }
      members_.Add(other.members_);
      itemList_.Add(other.itemList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            win = input.ReadInt32();
            break;
          }
          case 16: {
            star = input.ReadInt32();
            break;
          }
          case 24: {
            gold = input.ReadInt32();
            break;
          }
          case 32: {
            cup = input.ReadInt32();
            break;
          }
          case 40: {
            diamond = input.ReadInt32();
            break;
          }
          case 48: {
            single = input.ReadInt32();
            break;
          }
          case 58: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 66: {
            if (matchId_ == null) {
              matchId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(matchId_);
            break;
          }
          case 74: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 82: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_SEND_MAIL = 700; // 发送邮件
  /// </summary>
  public sealed partial class ReqSendMail : pb::IMessage<ReqSendMail> {
    private static readonly pb::MessageParser<ReqSendMail> _parser = new pb::MessageParser<ReqSendMail>(() => new ReqSendMail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSendMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail(ReqSendMail other) : this() {
      reciever_ = other.reciever_ != null ? other.reciever_.Clone() : null;
      itemList_ = other.itemList_.Clone();
      currencyList_ = other.currencyList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail Clone() {
      return new ReqSendMail(this);
    }

    /// <summary>Field number for the "reciever" field.</summary>
    public const int recieverFieldNumber = 1;
    private global::NFMsg.Ident reciever_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident reciever {
      get { return reciever_; }
      set {
        reciever_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int item_listFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.ItemStruct> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.ItemStruct.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ItemStruct> itemList_ = new pbc::RepeatedField<global::NFMsg.ItemStruct>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ItemStruct> item_list {
      get { return itemList_; }
    }

    /// <summary>Field number for the "currency_list" field.</summary>
    public const int currency_listFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.CurrencyStruct> _repeated_currencyList_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.CurrencyStruct.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.CurrencyStruct> currencyList_ = new pbc::RepeatedField<global::NFMsg.CurrencyStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.CurrencyStruct> currency_list {
      get { return currencyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSendMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSendMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(reciever, other.reciever)) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      if(!currencyList_.Equals(other.currencyList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reciever_ != null) hash ^= reciever.GetHashCode();
      hash ^= itemList_.GetHashCode();
      hash ^= currencyList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reciever_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(reciever);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      currencyList_.WriteTo(output, _repeated_currencyList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reciever_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(reciever);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      size += currencyList_.CalculateSize(_repeated_currencyList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSendMail other) {
      if (other == null) {
        return;
      }
      if (other.reciever_ != null) {
        if (reciever_ == null) {
          reciever_ = new global::NFMsg.Ident();
        }
        reciever.MergeFrom(other.reciever);
      }
      itemList_.Add(other.itemList_);
      currencyList_.Add(other.currencyList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (reciever_ == null) {
              reciever_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(reciever_);
            break;
          }
          case 18: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 26: {
            currencyList_.AddEntriesFrom(input, _repeated_currencyList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQSWICHSERVER							= 210;		 // 申请转服
  /// </summary>
  public sealed partial class ReqSwitchServer : pb::IMessage<ReqSwitchServer> {
    private static readonly pb::MessageParser<ReqSwitchServer> _parser = new pb::MessageParser<ReqSwitchServer>(() => new ReqSwitchServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSwitchServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer(ReqSwitchServer other) : this() {
      selfid_ = other.selfid_ != null ? other.selfid_.Clone() : null;
      selfServerid_ = other.selfServerid_;
      targetServerid_ = other.targetServerid_;
      gateServerid_ = other.gateServerid_;
      sceneID_ = other.sceneID_;
      clientId_ = other.clientId_ != null ? other.clientId_.Clone() : null;
      groupID_ = other.groupID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer Clone() {
      return new ReqSwitchServer(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int selfidFieldNumber = 1;
    private global::NFMsg.Ident selfid_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "self_serverid" field.</summary>
    public const int self_serveridFieldNumber = 2;
    private long selfServerid_;
    /// <summary>
    /// 本来所在的服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long self_serverid {
      get { return selfServerid_; }
      set {
        selfServerid_ = value;
      }
    }

    /// <summary>Field number for the "target_serverid" field.</summary>
    public const int target_serveridFieldNumber = 3;
    private long targetServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long target_serverid {
      get { return targetServerid_; }
      set {
        targetServerid_ = value;
      }
    }

    /// <summary>Field number for the "gate_serverid" field.</summary>
    public const int gate_serveridFieldNumber = 4;
    private long gateServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long gate_serverid {
      get { return gateServerid_; }
      set {
        gateServerid_ = value;
      }
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 5;
    private long sceneID_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int client_idFieldNumber = 6;
    private global::NFMsg.Ident clientId_;
    /// <summary>
    /// 客户端id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident client_id {
      get { return clientId_; }
      set {
        clientId_ = value;
      }
    }

    /// <summary>Field number for the "groupID" field.</summary>
    public const int groupIDFieldNumber = 7;
    private long groupID_;
    /// <summary>
    ///  group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long groupID {
      get { return groupID_; }
      set {
        groupID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSwitchServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSwitchServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(selfid, other.selfid)) return false;
      if (self_serverid != other.self_serverid) return false;
      if (target_serverid != other.target_serverid) return false;
      if (gate_serverid != other.gate_serverid) return false;
      if (SceneID != other.SceneID) return false;
      if (!object.Equals(client_id, other.client_id)) return false;
      if (groupID != other.groupID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= selfid.GetHashCode();
      if (self_serverid != 0L) hash ^= self_serverid.GetHashCode();
      if (target_serverid != 0L) hash ^= target_serverid.GetHashCode();
      if (gate_serverid != 0L) hash ^= gate_serverid.GetHashCode();
      if (SceneID != 0L) hash ^= SceneID.GetHashCode();
      if (clientId_ != null) hash ^= client_id.GetHashCode();
      if (groupID != 0L) hash ^= groupID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(selfid);
      }
      if (self_serverid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(self_serverid);
      }
      if (target_serverid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(target_serverid);
      }
      if (gate_serverid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(gate_serverid);
      }
      if (SceneID != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SceneID);
      }
      if (clientId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(client_id);
      }
      if (groupID != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(groupID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(selfid);
      }
      if (self_serverid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(self_serverid);
      }
      if (target_serverid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(target_serverid);
      }
      if (gate_serverid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(gate_serverid);
      }
      if (SceneID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneID);
      }
      if (clientId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(client_id);
      }
      if (groupID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(groupID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSwitchServer other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::NFMsg.Ident();
        }
        selfid.MergeFrom(other.selfid);
      }
      if (other.self_serverid != 0L) {
        self_serverid = other.self_serverid;
      }
      if (other.target_serverid != 0L) {
        target_serverid = other.target_serverid;
      }
      if (other.gate_serverid != 0L) {
        gate_serverid = other.gate_serverid;
      }
      if (other.SceneID != 0L) {
        SceneID = other.SceneID;
      }
      if (other.clientId_ != null) {
        if (clientId_ == null) {
          clientId_ = new global::NFMsg.Ident();
        }
        client_id.MergeFrom(other.client_id);
      }
      if (other.groupID != 0L) {
        groupID = other.groupID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 16: {
            self_serverid = input.ReadInt64();
            break;
          }
          case 24: {
            target_serverid = input.ReadInt64();
            break;
          }
          case 32: {
            gate_serverid = input.ReadInt64();
            break;
          }
          case 40: {
            SceneID = input.ReadInt64();
            break;
          }
          case 50: {
            if (clientId_ == null) {
              clientId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(clientId_);
            break;
          }
          case 56: {
            groupID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_ACKSWICHSERVER							= 211;		 // 申请转服
  /// </summary>
  public sealed partial class AckSwitchServer : pb::IMessage<AckSwitchServer> {
    private static readonly pb::MessageParser<AckSwitchServer> _parser = new pb::MessageParser<AckSwitchServer>(() => new AckSwitchServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSwitchServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer(AckSwitchServer other) : this() {
      selfid_ = other.selfid_ != null ? other.selfid_.Clone() : null;
      selfServerid_ = other.selfServerid_;
      targetServerid_ = other.targetServerid_;
      gateServerid_ = other.gateServerid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer Clone() {
      return new AckSwitchServer(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int selfidFieldNumber = 1;
    private global::NFMsg.Ident selfid_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "self_serverid" field.</summary>
    public const int self_serveridFieldNumber = 2;
    private long selfServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long self_serverid {
      get { return selfServerid_; }
      set {
        selfServerid_ = value;
      }
    }

    /// <summary>Field number for the "target_serverid" field.</summary>
    public const int target_serveridFieldNumber = 3;
    private long targetServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long target_serverid {
      get { return targetServerid_; }
      set {
        targetServerid_ = value;
      }
    }

    /// <summary>Field number for the "gate_serverid" field.</summary>
    public const int gate_serveridFieldNumber = 4;
    private long gateServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long gate_serverid {
      get { return gateServerid_; }
      set {
        gateServerid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSwitchServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSwitchServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(selfid, other.selfid)) return false;
      if (self_serverid != other.self_serverid) return false;
      if (target_serverid != other.target_serverid) return false;
      if (gate_serverid != other.gate_serverid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= selfid.GetHashCode();
      if (self_serverid != 0L) hash ^= self_serverid.GetHashCode();
      if (target_serverid != 0L) hash ^= target_serverid.GetHashCode();
      if (gate_serverid != 0L) hash ^= gate_serverid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(selfid);
      }
      if (self_serverid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(self_serverid);
      }
      if (target_serverid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(target_serverid);
      }
      if (gate_serverid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(gate_serverid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(selfid);
      }
      if (self_serverid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(self_serverid);
      }
      if (target_serverid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(target_serverid);
      }
      if (gate_serverid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(gate_serverid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckSwitchServer other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          selfid_ = new global::NFMsg.Ident();
        }
        selfid.MergeFrom(other.selfid);
      }
      if (other.self_serverid != 0L) {
        self_serverid = other.self_serverid;
      }
      if (other.target_serverid != 0L) {
        target_serverid = other.target_serverid;
      }
      if (other.gate_serverid != 0L) {
        gate_serverid = other.gate_serverid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              selfid_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfid_);
            break;
          }
          case 16: {
            self_serverid = input.ReadInt64();
            break;
          }
          case 24: {
            target_serverid = input.ReadInt64();
            break;
          }
          case 32: {
            gate_serverid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
