// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NFMsgExtra.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NFMsg {

  /// <summary>Holder for reflection information generated from NFMsgExtra.proto</summary>
  public static partial class NFMsgExtraReflection {

    #region Descriptor
    /// <summary>File descriptor for NFMsgExtra.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NFMsgExtraReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBORk1zZ0V4dHJhLnByb3RvEgVORk1zZxoPTkZNc2dCYXNlLnByb3RvIikK",
            "ClJlcUFJT253ZXISGwoFYWlfaWQYASABKAsyDC5ORk1zZy5JZGVudCJ6CghU",
            "ZWFtSW5mbxIdCgd0ZWFtX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSIAoKY2Fw",
            "dGFpbl9pZBgCIAEoCzIMLk5GTXNnLklkZW50Ei0KDnRlYW1tZW1iZXJJbmZv",
            "GAMgAygLMhUuTkZNc2cuVGVhbW1lbWJlckluZm8ibgoOVGVhbW1lbWJlcklu",
            "Zm8SHwoJcGxheWVyX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSDAoEbmFtZRgC",
            "IAEoCRIOCgZuTGV2ZWwYAyABKAUSCwoDam9iGAQgASgFEhAKCEhlYWRJY29u",
            "GAUgASgJIlUKEFJlcUFja0NyZWF0ZVRlYW0SHQoHdGVhbV9pZBgBIAEoCzIM",
            "Lk5GTXNnLklkZW50EiIKCXhUZWFtSW5mbxgCIAEoCzIPLk5GTXNnLlRlYW1J",
            "bmZvIlMKDlJlcUFja0pvaW5UZWFtEh0KB3RlYW1faWQYASABKAsyDC5ORk1z",
            "Zy5JZGVudBIiCgl4VGVhbUluZm8YAiABKAsyDy5ORk1zZy5UZWFtSW5mbyJU",
            "Cg9SZXFBY2tMZWF2ZVRlYW0SHQoHdGVhbV9pZBgBIAEoCzIMLk5GTXNnLklk",
            "ZW50EiIKCXhUZWFtSW5mbxgCIAEoCzIPLk5GTXNnLlRlYW1JbmZvIugCChNS",
            "ZXFBY2tPcHJUZWFtTWVtYmVyEh0KB3RlYW1faWQYASABKAsyDC5ORk1zZy5J",
            "ZGVudBIfCgltZW1iZXJfaWQYAiABKAsyDC5ORk1zZy5JZGVudBI8CgR0eXBl",
            "GAMgASgOMi4uTkZNc2cuUmVxQWNrT3ByVGVhbU1lbWJlci5FR1RlYW1NZW1i",
            "ZXJPcHJUeXBlEiIKCXhUZWFtSW5mbxgEIAEoCzIPLk5GTXNnLlRlYW1JbmZv",
            "Iq4BChNFR1RlYW1NZW1iZXJPcHJUeXBlEg0KCUVHQVRfRE9XThAAEgsKB0VH",
            "QVRfVVAQARINCglFR0FUX0tJQ0sQAhIQCgxFR0FUX0FQUE9JTlQQAxINCglF",
            "R0FUX0ZJUkUQBBIPCgtFR0FUX0RFTUlTRRAFEhQKEEVHQVRfQUNDRVBUQVBQ",
            "TFkQBhISCg5FR0FUX0RFTllBUFBMWRAHEhAKDEVHQVRfS0lDS09VVBAIIngK",
            "EFJlcUFja0ludml0ZVRlYW0SHQoHdGVhbV9pZBgBIAEoCzIMLk5GTXNnLklk",
            "ZW50Eh0KB3NlbGZfaWQYAiABKAsyDC5ORk1zZy5JZGVudBImChBpbnZpdGVf",
            "dGFyZ2V0X2lkGAMgASgLMgwuTkZNc2cuSWRlbnQimwEKElJlcVRlYW1FbnRl",
            "ckVjdHlwZRIdCgd0ZWFtX2lkGAEgASgLMgwuTkZNc2cuSWRlbnQSHQoHc2Vs",
            "Zl9pZBgCIAEoCzIMLk5GTXNnLklkZW50EhEKCW5FY3R5cGVJRBgDIAEoBRIQ",
            "CghuR3JvdXBJRBgEIAEoBRIPCgduUmVzdWx0GAUgASgFEhEKCW5TZXJ2ZXJJ",
            "RBgGIAEoBSKIAQoSQWNrVGVhbUVudGVyRWN0eXBlEh0KB3RlYW1faWQYASAB",
            "KAsyDC5ORk1zZy5JZGVudBIdCgdzZWxmX2lkGAIgASgLMgwuTkZNc2cuSWRl",
            "bnQSEQoJbkVjdHlwZUlEGAMgASgFEhAKCG5Hcm91cElEGAQgASgFEg8KB25S",
            "ZXN1bHQYBSABKAUiagoQR3JpZENsYW5CYXNlSW5mbxIYCgJpZBgBIAEoCzIM",
            "Lk5GTXNnLklkZW50Eg0KBWxldmVsGAIgASgFEg0KBWNvdW50GAMgASgFEhAK",
            "CHJlc291cmNlGAQgASgFEgwKBGljb24YBSABKAwiKQoRUmVxQmlnTWFwR3Jp",
            "ZEluZm8SFAoMbWFwX3RpdGxlX2lkGAEgAygMIrkBChJCaWdNYXBHcmlkQmFz",
            "ZUluZm8SCgoCaWQYASABKAwSKwoKZ3VpbGRfaW5mbxgCIAEoCzIXLk5GTXNn",
            "LkdyaWRDbGFuQmFzZUluZm8SFAoMa2luZ3dhcl90aW1lGAogASgFEiAKCmtp",
            "bmd3YXJyZXIYCyABKAsyDC5ORk1zZy5JZGVudBIUCgxodXJ0aW5nX3RpbWUY",
            "FCABKAUSHAoGaHVydGVyGBUgASgLMgwuTkZNc2cuSWRlbnQiegoOQmlnTWFw",
            "TGVhdmVNc2cSGwoFb3duZXIYASABKAsyDC5ORk1zZy5JZGVudBISCgpvd25l",
            "cl9uYW1lGAIgASgMEhAKCG1zZ19kYXRhGAMgASgMEhAKCG1zZ190aW1lGAQg",
            "ASgFEhMKC293bmVyX2xldmVsGAUgASgFIpwBChBCaWdNYXBXYXJIaXN0b3J5",
            "EikKCHJlZF9pbmZvGAEgASgLMhcuTkZNc2cuR3JpZENsYW5CYXNlSW5mbxIq",
            "CglibHVlX2luZm8YAiABKAsyFy5ORk1zZy5HcmlkQ2xhbkJhc2VJbmZvEh8K",
            "CXdpbm5lcl9pZBgKIAEoCzIMLk5GTXNnLklkZW50EhAKCHdhcl90aW1lGAsg",
            "ASgFItIBChRCaWdNYXBHcmlkRGV0YWlsSW5mbxIxCg5ncmlkX2Jhc2VfaW5m",
            "bxgBIAEoCzIZLk5GTXNnLkJpZ01hcEdyaWRCYXNlSW5mbxIvCg5zdGF5X2d1",
            "aWRfbGlzdBgCIAMoCzIXLk5GTXNnLkdyaWRDbGFuQmFzZUluZm8SKAoJbGVh",
            "dmVfbXNnGAMgAygLMhUuTkZNc2cuQmlnTWFwTGVhdmVNc2cSLAoLd2FyX2hp",
            "c3RvcnkYBCADKAsyFy5ORk1zZy5CaWdNYXBXYXJIaXN0b3J5IkIKEUFja0Jp",
            "Z01hcEdyaWRJbmZvEi0KCG1hcF9kYXRhGAEgAygLMhsuTkZNc2cuQmlnTWFw",
            "R3JpZERldGFpbEluZm8iDwoNUmVxQmlnTWFwSW5mbyJCCg1BY2tCaWdNYXBJ",
            "bmZvEjEKDmdyaWRfYmFzZV9pbmZvGAEgAygLMhkuTkZNc2cuQmlnTWFwR3Jp",
            "ZEJhc2VJbmZvIkYKDlJlcUhvbGRNYXBHcmlkEhQKDG1hcF90aXRsZV9pZBgB",
            "IAEoDBIeCghndWlsZF9pZBgCIAEoCzIMLk5GTXNnLklkZW50IhAKDkFja0hv",
            "bGRNYXBHcmlkIlAKDlJlcUxlYXZlTWFwTXNnEhQKDG1hcF90aXRsZV9pZBgB",
            "IAEoDBIoCglsZWF2ZV9tc2cYAiABKAsyFS5ORk1zZy5CaWdNYXBMZWF2ZU1z",
            "ZyIQCg5BY2tMZWF2ZU1hcE1zZyImCg5SZXFHZXRNYXBBd2FyZBIUCgxtYXBf",
            "dGl0bGVfaWQYASABKAwiEAoOQWNrR2V0TWFwQXdhcmQiJQoNUmVxTWFwSHVu",
            "dGluZxIUCgxtYXBfdGl0bGVfaWQYASABKAwiDwoNQWNrTWFwSHVudGluZyIi",
            "Cg1SZXFNYXBLaW5nV2FyEhEKCW1hcF90aXRsZRgBIAEoDCIiCg1BY2tNYXBL",
            "aW5nV2FyEhEKCW1hcF90aXRsZRgBIAEoDGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NFMsg.NFMsgBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAIOnwer), global::NFMsg.ReqAIOnwer.Parser, new[]{ "ai_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.TeamInfo), global::NFMsg.TeamInfo.Parser, new[]{ "team_id", "captain_id", "teammemberInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.TeammemberInfo), global::NFMsg.TeammemberInfo.Parser, new[]{ "player_id", "name", "nLevel", "job", "HeadIcon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckCreateTeam), global::NFMsg.ReqAckCreateTeam.Parser, new[]{ "team_id", "xTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckJoinTeam), global::NFMsg.ReqAckJoinTeam.Parser, new[]{ "team_id", "xTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckLeaveTeam), global::NFMsg.ReqAckLeaveTeam.Parser, new[]{ "team_id", "xTeamInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckOprTeamMember), global::NFMsg.ReqAckOprTeamMember.Parser, new[]{ "team_id", "member_id", "type", "xTeamInfo" }, null, new[]{ typeof(global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckInviteTeam), global::NFMsg.ReqAckInviteTeam.Parser, new[]{ "team_id", "self_id", "invite_target_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqTeamEnterEctype), global::NFMsg.ReqTeamEnterEctype.Parser, new[]{ "team_id", "self_id", "nEctypeID", "nGroupID", "nResult", "nServerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckTeamEnterEctype), global::NFMsg.AckTeamEnterEctype.Parser, new[]{ "team_id", "self_id", "nEctypeID", "nGroupID", "nResult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.GridClanBaseInfo), global::NFMsg.GridClanBaseInfo.Parser, new[]{ "id", "level", "count", "resource", "icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqBigMapGridInfo), global::NFMsg.ReqBigMapGridInfo.Parser, new[]{ "map_title_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapGridBaseInfo), global::NFMsg.BigMapGridBaseInfo.Parser, new[]{ "id", "guild_info", "kingwar_time", "kingwarrer", "hurting_time", "hurter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapLeaveMsg), global::NFMsg.BigMapLeaveMsg.Parser, new[]{ "owner", "owner_name", "msg_data", "msg_time", "owner_level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapWarHistory), global::NFMsg.BigMapWarHistory.Parser, new[]{ "red_info", "blue_info", "winner_id", "war_time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapGridDetailInfo), global::NFMsg.BigMapGridDetailInfo.Parser, new[]{ "grid_base_info", "stay_guid_list", "leave_msg", "war_history" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckBigMapGridInfo), global::NFMsg.AckBigMapGridInfo.Parser, new[]{ "map_data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqBigMapInfo), global::NFMsg.ReqBigMapInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckBigMapInfo), global::NFMsg.AckBigMapInfo.Parser, new[]{ "grid_base_info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqHoldMapGrid), global::NFMsg.ReqHoldMapGrid.Parser, new[]{ "map_title_id", "guild_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckHoldMapGrid), global::NFMsg.AckHoldMapGrid.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqLeaveMapMsg), global::NFMsg.ReqLeaveMapMsg.Parser, new[]{ "map_title_id", "leave_msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckLeaveMapMsg), global::NFMsg.AckLeaveMapMsg.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqGetMapAward), global::NFMsg.ReqGetMapAward.Parser, new[]{ "map_title_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckGetMapAward), global::NFMsg.AckGetMapAward.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqMapHunting), global::NFMsg.ReqMapHunting.Parser, new[]{ "map_title_id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckMapHunting), global::NFMsg.AckMapHunting.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqMapKingWar), global::NFMsg.ReqMapKingWar.Parser, new[]{ "map_title" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckMapKingWar), global::NFMsg.AckMapKingWar.Parser, new[]{ "map_title" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ////////////////AI/////////////////////////////////////////////////////////////////////////////////////
  ///EGMI_REQ_AI_ONWER
  /// </summary>
  public sealed partial class ReqAIOnwer : pb::IMessage<ReqAIOnwer> {
    private static readonly pb::MessageParser<ReqAIOnwer> _parser = new pb::MessageParser<ReqAIOnwer>(() => new ReqAIOnwer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAIOnwer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAIOnwer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAIOnwer(ReqAIOnwer other) : this() {
      aiId_ = other.aiId_ != null ? other.aiId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAIOnwer Clone() {
      return new ReqAIOnwer(this);
    }

    /// <summary>Field number for the "ai_id" field.</summary>
    public const int ai_idFieldNumber = 1;
    private global::NFMsg.Ident aiId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ai_id {
      get { return aiId_; }
      set {
        aiId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAIOnwer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAIOnwer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ai_id, other.ai_id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (aiId_ != null) hash ^= ai_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (aiId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ai_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (aiId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ai_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAIOnwer other) {
      if (other == null) {
        return;
      }
      if (other.aiId_ != null) {
        if (aiId_ == null) {
          aiId_ = new global::NFMsg.Ident();
        }
        ai_id.MergeFrom(other.ai_id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (aiId_ == null) {
              aiId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(aiId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////////////组队/////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class TeamInfo : pb::IMessage<TeamInfo> {
    private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo(TeamInfo other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      captainId_ = other.captainId_ != null ? other.captainId_.Clone() : null;
      teammemberInfo_ = other.teammemberInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo Clone() {
      return new TeamInfo(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    /// <summary>
    ///队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "captain_id" field.</summary>
    public const int captain_idFieldNumber = 2;
    private global::NFMsg.Ident captainId_;
    /// <summary>
    ///队长ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident captain_id {
      get { return captainId_; }
      set {
        captainId_ = value;
      }
    }

    /// <summary>Field number for the "teammemberInfo" field.</summary>
    public const int teammemberInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.TeammemberInfo> _repeated_teammemberInfo_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.TeammemberInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.TeammemberInfo> teammemberInfo_ = new pbc::RepeatedField<global::NFMsg.TeammemberInfo>();
    /// <summary>
    ///队伍成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.TeammemberInfo> teammemberInfo {
      get { return teammemberInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(captain_id, other.captain_id)) return false;
      if(!teammemberInfo_.Equals(other.teammemberInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (captainId_ != null) hash ^= captain_id.GetHashCode();
      hash ^= teammemberInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (captainId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(captain_id);
      }
      teammemberInfo_.WriteTo(output, _repeated_teammemberInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (captainId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(captain_id);
      }
      size += teammemberInfo_.CalculateSize(_repeated_teammemberInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.captainId_ != null) {
        if (captainId_ == null) {
          captainId_ = new global::NFMsg.Ident();
        }
        captain_id.MergeFrom(other.captain_id);
      }
      teammemberInfo_.Add(other.teammemberInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (captainId_ == null) {
              captainId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(captainId_);
            break;
          }
          case 26: {
            teammemberInfo_.AddEntriesFrom(input, _repeated_teammemberInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeammemberInfo : pb::IMessage<TeammemberInfo> {
    private static readonly pb::MessageParser<TeammemberInfo> _parser = new pb::MessageParser<TeammemberInfo>(() => new TeammemberInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeammemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo(TeammemberInfo other) : this() {
      playerId_ = other.playerId_ != null ? other.playerId_.Clone() : null;
      name_ = other.name_;
      nLevel_ = other.nLevel_;
      job_ = other.job_;
      headIcon_ = other.headIcon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeammemberInfo Clone() {
      return new TeammemberInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int player_idFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    /// <summary>
    ///成员ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident player_id {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int nameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nLevel" field.</summary>
    public const int nLevelFieldNumber = 3;
    private int nLevel_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nLevel {
      get { return nLevel_; }
      set {
        nLevel_ = value;
      }
    }

    /// <summary>Field number for the "job" field.</summary>
    public const int jobFieldNumber = 4;
    private int job_;
    /// <summary>
    ///职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int job {
      get { return job_; }
      set {
        job_ = value;
      }
    }

    /// <summary>Field number for the "HeadIcon" field.</summary>
    public const int HeadIconFieldNumber = 5;
    private string headIcon_ = "";
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadIcon {
      get { return headIcon_; }
      set {
        headIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeammemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeammemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(player_id, other.player_id)) return false;
      if (name != other.name) return false;
      if (nLevel != other.nLevel) return false;
      if (job != other.job) return false;
      if (HeadIcon != other.HeadIcon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= player_id.GetHashCode();
      if (name.Length != 0) hash ^= name.GetHashCode();
      if (nLevel != 0) hash ^= nLevel.GetHashCode();
      if (job != 0) hash ^= job.GetHashCode();
      if (HeadIcon.Length != 0) hash ^= HeadIcon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(player_id);
      }
      if (name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(name);
      }
      if (nLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(nLevel);
      }
      if (job != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(job);
      }
      if (HeadIcon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HeadIcon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(player_id);
      }
      if (name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(name);
      }
      if (nLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nLevel);
      }
      if (job != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(job);
      }
      if (HeadIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadIcon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeammemberInfo other) {
      if (other == null) {
        return;
      }
      if (other.playerId_ != null) {
        if (playerId_ == null) {
          playerId_ = new global::NFMsg.Ident();
        }
        player_id.MergeFrom(other.player_id);
      }
      if (other.name.Length != 0) {
        name = other.name;
      }
      if (other.nLevel != 0) {
        nLevel = other.nLevel;
      }
      if (other.job != 0) {
        job = other.job;
      }
      if (other.HeadIcon.Length != 0) {
        HeadIcon = other.HeadIcon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerId_ == null) {
              playerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(playerId_);
            break;
          }
          case 18: {
            name = input.ReadString();
            break;
          }
          case 24: {
            nLevel = input.ReadInt32();
            break;
          }
          case 32: {
            job = input.ReadInt32();
            break;
          }
          case 42: {
            HeadIcon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_CREATE_TEAM                       		= 860; 	// 申请创建队伍
  ///EGMI_ACK_CREATE_TEAM							= 861; 	// 创建队伍结果
  /// </summary>
  public sealed partial class ReqAckCreateTeam : pb::IMessage<ReqAckCreateTeam> {
    private static readonly pb::MessageParser<ReqAckCreateTeam> _parser = new pb::MessageParser<ReqAckCreateTeam>(() => new ReqAckCreateTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckCreateTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam(ReqAckCreateTeam other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      xTeamInfo_ = other.xTeamInfo_ != null ? other.xTeamInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateTeam Clone() {
      return new ReqAckCreateTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int xTeamInfoFieldNumber = 2;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo xTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckCreateTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckCreateTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(xTeamInfo, other.xTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (xTeamInfo_ != null) hash ^= xTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(xTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(xTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckCreateTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::NFMsg.TeamInfo();
        }
        xTeamInfo.MergeFrom(other.xTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_JOIN_TEAM                         		= 862; 	// 申请加入队伍
  ///EGMI_ACK_JOIN_TEAM								= 863; 	// 加入队伍结果
  /// </summary>
  public sealed partial class ReqAckJoinTeam : pb::IMessage<ReqAckJoinTeam> {
    private static readonly pb::MessageParser<ReqAckJoinTeam> _parser = new pb::MessageParser<ReqAckJoinTeam>(() => new ReqAckJoinTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckJoinTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam(ReqAckJoinTeam other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      xTeamInfo_ = other.xTeamInfo_ != null ? other.xTeamInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinTeam Clone() {
      return new ReqAckJoinTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int xTeamInfoFieldNumber = 2;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo xTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckJoinTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckJoinTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(xTeamInfo, other.xTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (xTeamInfo_ != null) hash ^= xTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(xTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(xTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckJoinTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::NFMsg.TeamInfo();
        }
        xTeamInfo.MergeFrom(other.xTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_LEAVE_TEAM                        		= 864; 	// 申请离开队伍/
  ///EGMI_ACK_LEAVE_TEAM								= 865; 	// 离开队伍结果 
  /// </summary>
  public sealed partial class ReqAckLeaveTeam : pb::IMessage<ReqAckLeaveTeam> {
    private static readonly pb::MessageParser<ReqAckLeaveTeam> _parser = new pb::MessageParser<ReqAckLeaveTeam>(() => new ReqAckLeaveTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckLeaveTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam(ReqAckLeaveTeam other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      xTeamInfo_ = other.xTeamInfo_ != null ? other.xTeamInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveTeam Clone() {
      return new ReqAckLeaveTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int xTeamInfoFieldNumber = 2;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo xTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckLeaveTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckLeaveTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(xTeamInfo, other.xTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (xTeamInfo_ != null) hash ^= xTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(xTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(xTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckLeaveTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::NFMsg.TeamInfo();
        }
        xTeamInfo.MergeFrom(other.xTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_OPRMEMBER_TEAM							= 867; 	// 操作成员
  ///	EGMI_ACK_OPRMEMBER_TEAM							= 868; 	// 操作成员 
  /// </summary>
  public sealed partial class ReqAckOprTeamMember : pb::IMessage<ReqAckOprTeamMember> {
    private static readonly pb::MessageParser<ReqAckOprTeamMember> _parser = new pb::MessageParser<ReqAckOprTeamMember>(() => new ReqAckOprTeamMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckOprTeamMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember(ReqAckOprTeamMember other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      memberId_ = other.memberId_ != null ? other.memberId_.Clone() : null;
      type_ = other.type_;
      xTeamInfo_ = other.xTeamInfo_ != null ? other.xTeamInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprTeamMember Clone() {
      return new ReqAckOprTeamMember(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "member_id" field.</summary>
    public const int member_idFieldNumber = 2;
    private global::NFMsg.Ident memberId_;
    /// <summary>
    ///被操作的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident member_id {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int typeFieldNumber = 3;
    private global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "xTeamInfo" field.</summary>
    public const int xTeamInfoFieldNumber = 4;
    private global::NFMsg.TeamInfo xTeamInfo_;
    /// <summary>
    ///队伍详细信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.TeamInfo xTeamInfo {
      get { return xTeamInfo_; }
      set {
        xTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckOprTeamMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckOprTeamMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(member_id, other.member_id)) return false;
      if (type != other.type) return false;
      if (!object.Equals(xTeamInfo, other.xTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (memberId_ != null) hash ^= member_id.GetHashCode();
      if (type != 0) hash ^= type.GetHashCode();
      if (xTeamInfo_ != null) hash ^= xTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (memberId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(member_id);
      }
      if (type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) type);
      }
      if (xTeamInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(xTeamInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (memberId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(member_id);
      }
      if (type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) type);
      }
      if (xTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(xTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckOprTeamMember other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.memberId_ != null) {
        if (memberId_ == null) {
          memberId_ = new global::NFMsg.Ident();
        }
        member_id.MergeFrom(other.member_id);
      }
      if (other.type != 0) {
        type = other.type;
      }
      if (other.xTeamInfo_ != null) {
        if (xTeamInfo_ == null) {
          xTeamInfo_ = new global::NFMsg.TeamInfo();
        }
        xTeamInfo.MergeFrom(other.xTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (memberId_ == null) {
              memberId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(memberId_);
            break;
          }
          case 24: {
            type_ = (global::NFMsg.ReqAckOprTeamMember.Types.EGTeamMemberOprType) input.ReadEnum();
            break;
          }
          case 34: {
            if (xTeamInfo_ == null) {
              xTeamInfo_ = new global::NFMsg.TeamInfo();
            }
            input.ReadMessage(xTeamInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckOprTeamMember message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGTeamMemberOprType {
        [pbr::OriginalName("EGAT_DOWN")] EGAT_DOWN = 0,
        [pbr::OriginalName("EGAT_UP")] EGAT_UP = 1,
        [pbr::OriginalName("EGAT_KICK")] EGAT_KICK = 2,
        /// <summary>
        ///任命
        /// </summary>
        [pbr::OriginalName("EGAT_APPOINT")] EGAT_APPOINT = 3,
        /// <summary>
        ///撤职
        /// </summary>
        [pbr::OriginalName("EGAT_FIRE")] EGAT_FIRE = 4,
        /// <summary>
        ///禅让
        /// </summary>
        [pbr::OriginalName("EGAT_DEMISE")] EGAT_DEMISE = 5,
        /// <summary>
        ///收人
        /// </summary>
        [pbr::OriginalName("EGAT_ACCEPTAPPLY")] EGAT_ACCEPTAPPLY = 6,
        /// <summary>
        ///拒收
        /// </summary>
        [pbr::OriginalName("EGAT_DENYAPPLY")] EGAT_DENYAPPLY = 7,
        /// <summary>
        ///开除
        /// </summary>
        [pbr::OriginalName("EGAT_KICKOUT")] EGAT_KICKOUT = 8,
      }

    }
    #endregion

  }

  /// <summary>
  ///	EGMI_REQ_INVITE_TEAM							= 866; 	// 邀请加入队伍
  /// </summary>
  public sealed partial class ReqAckInviteTeam : pb::IMessage<ReqAckInviteTeam> {
    private static readonly pb::MessageParser<ReqAckInviteTeam> _parser = new pb::MessageParser<ReqAckInviteTeam>(() => new ReqAckInviteTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckInviteTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam(ReqAckInviteTeam other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      selfId_ = other.selfId_ != null ? other.selfId_.Clone() : null;
      inviteTargetId_ = other.inviteTargetId_ != null ? other.inviteTargetId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckInviteTeam Clone() {
      return new ReqAckInviteTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int self_idFieldNumber = 2;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident self_id {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "invite_target_id" field.</summary>
    public const int invite_target_idFieldNumber = 3;
    private global::NFMsg.Ident inviteTargetId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident invite_target_id {
      get { return inviteTargetId_; }
      set {
        inviteTargetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckInviteTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckInviteTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(self_id, other.self_id)) return false;
      if (!object.Equals(invite_target_id, other.invite_target_id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (selfId_ != null) hash ^= self_id.GetHashCode();
      if (inviteTargetId_ != null) hash ^= invite_target_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(self_id);
      }
      if (inviteTargetId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(invite_target_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(self_id);
      }
      if (inviteTargetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(invite_target_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckInviteTeam other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::NFMsg.Ident();
        }
        self_id.MergeFrom(other.self_id);
      }
      if (other.inviteTargetId_ != null) {
        if (inviteTargetId_ == null) {
          inviteTargetId_ = new global::NFMsg.Ident();
        }
        invite_target_id.MergeFrom(other.invite_target_id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 26: {
            if (inviteTargetId_ == null) {
              inviteTargetId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(inviteTargetId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_TEAM_ENTER_ECTYPE					= 869; 	// 组队进副本
  /// </summary>
  public sealed partial class ReqTeamEnterEctype : pb::IMessage<ReqTeamEnterEctype> {
    private static readonly pb::MessageParser<ReqTeamEnterEctype> _parser = new pb::MessageParser<ReqTeamEnterEctype>(() => new ReqTeamEnterEctype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqTeamEnterEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype(ReqTeamEnterEctype other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      selfId_ = other.selfId_ != null ? other.selfId_.Clone() : null;
      nEctypeID_ = other.nEctypeID_;
      nGroupID_ = other.nGroupID_;
      nResult_ = other.nResult_;
      nServerID_ = other.nServerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqTeamEnterEctype Clone() {
      return new ReqTeamEnterEctype(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int self_idFieldNumber = 2;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident self_id {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "nEctypeID" field.</summary>
    public const int nEctypeIDFieldNumber = 3;
    private int nEctypeID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nEctypeID {
      get { return nEctypeID_; }
      set {
        nEctypeID_ = value;
      }
    }

    /// <summary>Field number for the "nGroupID" field.</summary>
    public const int nGroupIDFieldNumber = 4;
    private int nGroupID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nGroupID {
      get { return nGroupID_; }
      set {
        nGroupID_ = value;
      }
    }

    /// <summary>Field number for the "nResult" field.</summary>
    public const int nResultFieldNumber = 5;
    private int nResult_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nResult {
      get { return nResult_; }
      set {
        nResult_ = value;
      }
    }

    /// <summary>Field number for the "nServerID" field.</summary>
    public const int nServerIDFieldNumber = 6;
    private int nServerID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nServerID {
      get { return nServerID_; }
      set {
        nServerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqTeamEnterEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqTeamEnterEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(self_id, other.self_id)) return false;
      if (nEctypeID != other.nEctypeID) return false;
      if (nGroupID != other.nGroupID) return false;
      if (nResult != other.nResult) return false;
      if (nServerID != other.nServerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (selfId_ != null) hash ^= self_id.GetHashCode();
      if (nEctypeID != 0) hash ^= nEctypeID.GetHashCode();
      if (nGroupID != 0) hash ^= nGroupID.GetHashCode();
      if (nResult != 0) hash ^= nResult.GetHashCode();
      if (nServerID != 0) hash ^= nServerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(self_id);
      }
      if (nEctypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(nEctypeID);
      }
      if (nGroupID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(nGroupID);
      }
      if (nResult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(nResult);
      }
      if (nServerID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(nServerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(self_id);
      }
      if (nEctypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nEctypeID);
      }
      if (nGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nGroupID);
      }
      if (nResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nResult);
      }
      if (nServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nServerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqTeamEnterEctype other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::NFMsg.Ident();
        }
        self_id.MergeFrom(other.self_id);
      }
      if (other.nEctypeID != 0) {
        nEctypeID = other.nEctypeID;
      }
      if (other.nGroupID != 0) {
        nGroupID = other.nGroupID;
      }
      if (other.nResult != 0) {
        nResult = other.nResult;
      }
      if (other.nServerID != 0) {
        nServerID = other.nServerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 24: {
            nEctypeID = input.ReadInt32();
            break;
          }
          case 32: {
            nGroupID = input.ReadInt32();
            break;
          }
          case 40: {
            nResult = input.ReadInt32();
            break;
          }
          case 48: {
            nServerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_TEAM_ENTER_ECTYPE						= 870; 	// 组队进副本
  /// </summary>
  public sealed partial class AckTeamEnterEctype : pb::IMessage<AckTeamEnterEctype> {
    private static readonly pb::MessageParser<AckTeamEnterEctype> _parser = new pb::MessageParser<AckTeamEnterEctype>(() => new AckTeamEnterEctype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckTeamEnterEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype(AckTeamEnterEctype other) : this() {
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      selfId_ = other.selfId_ != null ? other.selfId_.Clone() : null;
      nEctypeID_ = other.nEctypeID_;
      nGroupID_ = other.nGroupID_;
      nResult_ = other.nResult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckTeamEnterEctype Clone() {
      return new AckTeamEnterEctype(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int team_idFieldNumber = 1;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident team_id {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int self_idFieldNumber = 2;
    private global::NFMsg.Ident selfId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident self_id {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "nEctypeID" field.</summary>
    public const int nEctypeIDFieldNumber = 3;
    private int nEctypeID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nEctypeID {
      get { return nEctypeID_; }
      set {
        nEctypeID_ = value;
      }
    }

    /// <summary>Field number for the "nGroupID" field.</summary>
    public const int nGroupIDFieldNumber = 4;
    private int nGroupID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nGroupID {
      get { return nGroupID_; }
      set {
        nGroupID_ = value;
      }
    }

    /// <summary>Field number for the "nResult" field.</summary>
    public const int nResultFieldNumber = 5;
    private int nResult_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int nResult {
      get { return nResult_; }
      set {
        nResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckTeamEnterEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckTeamEnterEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(team_id, other.team_id)) return false;
      if (!object.Equals(self_id, other.self_id)) return false;
      if (nEctypeID != other.nEctypeID) return false;
      if (nGroupID != other.nGroupID) return false;
      if (nResult != other.nResult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamId_ != null) hash ^= team_id.GetHashCode();
      if (selfId_ != null) hash ^= self_id.GetHashCode();
      if (nEctypeID != 0) hash ^= nEctypeID.GetHashCode();
      if (nGroupID != 0) hash ^= nGroupID.GetHashCode();
      if (nResult != 0) hash ^= nResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(team_id);
      }
      if (selfId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(self_id);
      }
      if (nEctypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(nEctypeID);
      }
      if (nGroupID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(nGroupID);
      }
      if (nResult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(nResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(team_id);
      }
      if (selfId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(self_id);
      }
      if (nEctypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nEctypeID);
      }
      if (nGroupID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nGroupID);
      }
      if (nResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(nResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckTeamEnterEctype other) {
      if (other == null) {
        return;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          teamId_ = new global::NFMsg.Ident();
        }
        team_id.MergeFrom(other.team_id);
      }
      if (other.selfId_ != null) {
        if (selfId_ == null) {
          selfId_ = new global::NFMsg.Ident();
        }
        self_id.MergeFrom(other.self_id);
      }
      if (other.nEctypeID != 0) {
        nEctypeID = other.nEctypeID;
      }
      if (other.nGroupID != 0) {
        nGroupID = other.nGroupID;
      }
      if (other.nResult != 0) {
        nResult = other.nResult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (teamId_ == null) {
              teamId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(teamId_);
            break;
          }
          case 18: {
            if (selfId_ == null) {
              selfId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(selfId_);
            break;
          }
          case 24: {
            nEctypeID = input.ReadInt32();
            break;
          }
          case 32: {
            nGroupID = input.ReadInt32();
            break;
          }
          case 40: {
            nResult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////////////big map/////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class GridClanBaseInfo : pb::IMessage<GridClanBaseInfo> {
    private static readonly pb::MessageParser<GridClanBaseInfo> _parser = new pb::MessageParser<GridClanBaseInfo>(() => new GridClanBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GridClanBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridClanBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridClanBaseInfo(GridClanBaseInfo other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      level_ = other.level_;
      count_ = other.count_;
      resource_ = other.resource_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridClanBaseInfo Clone() {
      return new GridClanBaseInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 1;
    private global::NFMsg.Ident id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int levelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///Level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int countFieldNumber = 3;
    private int count_;
    /// <summary>
    ///人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int resourceFieldNumber = 4;
    private int resource_;
    /// <summary>
    ///资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int iconFieldNumber = 5;
    private pb::ByteString icon_ = pb::ByteString.Empty;
    /// <summary>
    ///Icon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GridClanBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GridClanBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(id, other.id)) return false;
      if (level != other.level) return false;
      if (count != other.count) return false;
      if (resource != other.resource) return false;
      if (icon != other.icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= id.GetHashCode();
      if (level != 0) hash ^= level.GetHashCode();
      if (count != 0) hash ^= count.GetHashCode();
      if (resource != 0) hash ^= resource.GetHashCode();
      if (icon.Length != 0) hash ^= icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(id);
      }
      if (level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(level);
      }
      if (count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(count);
      }
      if (resource != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(resource);
      }
      if (icon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(id);
      }
      if (level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(level);
      }
      if (count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(count);
      }
      if (resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(resource);
      }
      if (icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GridClanBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::NFMsg.Ident();
        }
        id.MergeFrom(other.id);
      }
      if (other.level != 0) {
        level = other.level;
      }
      if (other.count != 0) {
        count = other.count;
      }
      if (other.resource != 0) {
        resource = other.resource;
      }
      if (other.icon.Length != 0) {
        icon = other.icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            level = input.ReadInt32();
            break;
          }
          case 24: {
            count = input.ReadInt32();
            break;
          }
          case 32: {
            resource = input.ReadInt32();
            break;
          }
          case 42: {
            icon = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_INFO
  /// </summary>
  public sealed partial class ReqBigMapGridInfo : pb::IMessage<ReqBigMapGridInfo> {
    private static readonly pb::MessageParser<ReqBigMapGridInfo> _parser = new pb::MessageParser<ReqBigMapGridInfo>(() => new ReqBigMapGridInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBigMapGridInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo(ReqBigMapGridInfo other) : this() {
      mapTitleId_ = other.mapTitleId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo Clone() {
      return new ReqBigMapGridInfo(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int map_title_idFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_mapTitleId_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> mapTitleId_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> map_title_id {
      get { return mapTitleId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBigMapGridInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBigMapGridInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapTitleId_.Equals(other.mapTitleId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapTitleId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapTitleId_.WriteTo(output, _repeated_mapTitleId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapTitleId_.CalculateSize(_repeated_mapTitleId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqBigMapGridInfo other) {
      if (other == null) {
        return;
      }
      mapTitleId_.Add(other.mapTitleId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mapTitleId_.AddEntriesFrom(input, _repeated_mapTitleId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapGridBaseInfo : pb::IMessage<BigMapGridBaseInfo> {
    private static readonly pb::MessageParser<BigMapGridBaseInfo> _parser = new pb::MessageParser<BigMapGridBaseInfo>(() => new BigMapGridBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapGridBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo(BigMapGridBaseInfo other) : this() {
      id_ = other.id_;
      guildInfo_ = other.guildInfo_ != null ? other.guildInfo_.Clone() : null;
      kingwarTime_ = other.kingwarTime_;
      kingwarrer_ = other.kingwarrer_ != null ? other.kingwarrer_.Clone() : null;
      hurtingTime_ = other.hurtingTime_;
      hurter_ = other.hurter_ != null ? other.hurter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo Clone() {
      return new BigMapGridBaseInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int idFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    /// <summary>
    ///GridID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_info" field.</summary>
    public const int guild_infoFieldNumber = 2;
    private global::NFMsg.GridClanBaseInfo guildInfo_;
    /// <summary>
    ///所属占领公会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.GridClanBaseInfo guild_info {
      get { return guildInfo_; }
      set {
        guildInfo_ = value;
      }
    }

    /// <summary>Field number for the "kingwar_time" field.</summary>
    public const int kingwar_timeFieldNumber = 10;
    private int kingwarTime_;
    /// <summary>
    ///kingwar
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int kingwar_time {
      get { return kingwarTime_; }
      set {
        kingwarTime_ = value;
      }
    }

    /// <summary>Field number for the "kingwarrer" field.</summary>
    public const int kingwarrerFieldNumber = 11;
    private global::NFMsg.Ident kingwarrer_;
    /// <summary>
    ///发动者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident kingwarrer {
      get { return kingwarrer_; }
      set {
        kingwarrer_ = value;
      }
    }

    /// <summary>Field number for the "hurting_time" field.</summary>
    public const int hurting_timeFieldNumber = 20;
    private int hurtingTime_;
    /// <summary>
    ///hurting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int hurting_time {
      get { return hurtingTime_; }
      set {
        hurtingTime_ = value;
      }
    }

    /// <summary>Field number for the "hurter" field.</summary>
    public const int hurterFieldNumber = 21;
    private global::NFMsg.Ident hurter_;
    /// <summary>
    ///狩猎者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident hurter {
      get { return hurter_; }
      set {
        hurter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapGridBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapGridBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (id != other.id) return false;
      if (!object.Equals(guild_info, other.guild_info)) return false;
      if (kingwar_time != other.kingwar_time) return false;
      if (!object.Equals(kingwarrer, other.kingwarrer)) return false;
      if (hurting_time != other.hurting_time) return false;
      if (!object.Equals(hurter, other.hurter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id.Length != 0) hash ^= id.GetHashCode();
      if (guildInfo_ != null) hash ^= guild_info.GetHashCode();
      if (kingwar_time != 0) hash ^= kingwar_time.GetHashCode();
      if (kingwarrer_ != null) hash ^= kingwarrer.GetHashCode();
      if (hurting_time != 0) hash ^= hurting_time.GetHashCode();
      if (hurter_ != null) hash ^= hurter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(id);
      }
      if (guildInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(guild_info);
      }
      if (kingwar_time != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(kingwar_time);
      }
      if (kingwarrer_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(kingwarrer);
      }
      if (hurting_time != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(hurting_time);
      }
      if (hurter_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(hurter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(id);
      }
      if (guildInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(guild_info);
      }
      if (kingwar_time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(kingwar_time);
      }
      if (kingwarrer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(kingwarrer);
      }
      if (hurting_time != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(hurting_time);
      }
      if (hurter_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(hurter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapGridBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.id.Length != 0) {
        id = other.id;
      }
      if (other.guildInfo_ != null) {
        if (guildInfo_ == null) {
          guildInfo_ = new global::NFMsg.GridClanBaseInfo();
        }
        guild_info.MergeFrom(other.guild_info);
      }
      if (other.kingwar_time != 0) {
        kingwar_time = other.kingwar_time;
      }
      if (other.kingwarrer_ != null) {
        if (kingwarrer_ == null) {
          kingwarrer_ = new global::NFMsg.Ident();
        }
        kingwarrer.MergeFrom(other.kingwarrer);
      }
      if (other.hurting_time != 0) {
        hurting_time = other.hurting_time;
      }
      if (other.hurter_ != null) {
        if (hurter_ == null) {
          hurter_ = new global::NFMsg.Ident();
        }
        hurter.MergeFrom(other.hurter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            id = input.ReadBytes();
            break;
          }
          case 18: {
            if (guildInfo_ == null) {
              guildInfo_ = new global::NFMsg.GridClanBaseInfo();
            }
            input.ReadMessage(guildInfo_);
            break;
          }
          case 80: {
            kingwar_time = input.ReadInt32();
            break;
          }
          case 90: {
            if (kingwarrer_ == null) {
              kingwarrer_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(kingwarrer_);
            break;
          }
          case 160: {
            hurting_time = input.ReadInt32();
            break;
          }
          case 170: {
            if (hurter_ == null) {
              hurter_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(hurter_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapLeaveMsg : pb::IMessage<BigMapLeaveMsg> {
    private static readonly pb::MessageParser<BigMapLeaveMsg> _parser = new pb::MessageParser<BigMapLeaveMsg>(() => new BigMapLeaveMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapLeaveMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg(BigMapLeaveMsg other) : this() {
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      ownerName_ = other.ownerName_;
      msgData_ = other.msgData_;
      msgTime_ = other.msgTime_;
      ownerLevel_ = other.ownerLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg Clone() {
      return new BigMapLeaveMsg(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int ownerFieldNumber = 1;
    private global::NFMsg.Ident owner_;
    /// <summary>
    ///留言者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "owner_name" field.</summary>
    public const int owner_nameFieldNumber = 2;
    private pb::ByteString ownerName_ = pb::ByteString.Empty;
    /// <summary>
    ///留言者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString owner_name {
      get { return ownerName_; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_data" field.</summary>
    public const int msg_dataFieldNumber = 3;
    private pb::ByteString msgData_ = pb::ByteString.Empty;
    /// <summary>
    ///留言内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString msg_data {
      get { return msgData_; }
      set {
        msgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_time" field.</summary>
    public const int msg_timeFieldNumber = 4;
    private int msgTime_;
    /// <summary>
    ///留言时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int msg_time {
      get { return msgTime_; }
      set {
        msgTime_ = value;
      }
    }

    /// <summary>Field number for the "owner_level" field.</summary>
    public const int owner_levelFieldNumber = 5;
    private int ownerLevel_;
    /// <summary>
    ///留言时level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int owner_level {
      get { return ownerLevel_; }
      set {
        ownerLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapLeaveMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapLeaveMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(owner, other.owner)) return false;
      if (owner_name != other.owner_name) return false;
      if (msg_data != other.msg_data) return false;
      if (msg_time != other.msg_time) return false;
      if (owner_level != other.owner_level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= owner.GetHashCode();
      if (owner_name.Length != 0) hash ^= owner_name.GetHashCode();
      if (msg_data.Length != 0) hash ^= msg_data.GetHashCode();
      if (msg_time != 0) hash ^= msg_time.GetHashCode();
      if (owner_level != 0) hash ^= owner_level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(owner);
      }
      if (owner_name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(owner_name);
      }
      if (msg_data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(msg_data);
      }
      if (msg_time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(msg_time);
      }
      if (owner_level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(owner_level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(owner);
      }
      if (owner_name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(owner_name);
      }
      if (msg_data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(msg_data);
      }
      if (msg_time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(msg_time);
      }
      if (owner_level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(owner_level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapLeaveMsg other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          owner_ = new global::NFMsg.Ident();
        }
        owner.MergeFrom(other.owner);
      }
      if (other.owner_name.Length != 0) {
        owner_name = other.owner_name;
      }
      if (other.msg_data.Length != 0) {
        msg_data = other.msg_data;
      }
      if (other.msg_time != 0) {
        msg_time = other.msg_time;
      }
      if (other.owner_level != 0) {
        owner_level = other.owner_level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              owner_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 18: {
            owner_name = input.ReadBytes();
            break;
          }
          case 26: {
            msg_data = input.ReadBytes();
            break;
          }
          case 32: {
            msg_time = input.ReadInt32();
            break;
          }
          case 40: {
            owner_level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapWarHistory : pb::IMessage<BigMapWarHistory> {
    private static readonly pb::MessageParser<BigMapWarHistory> _parser = new pb::MessageParser<BigMapWarHistory>(() => new BigMapWarHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapWarHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory(BigMapWarHistory other) : this() {
      redInfo_ = other.redInfo_ != null ? other.redInfo_.Clone() : null;
      blueInfo_ = other.blueInfo_ != null ? other.blueInfo_.Clone() : null;
      winnerId_ = other.winnerId_ != null ? other.winnerId_.Clone() : null;
      warTime_ = other.warTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory Clone() {
      return new BigMapWarHistory(this);
    }

    /// <summary>Field number for the "red_info" field.</summary>
    public const int red_infoFieldNumber = 1;
    private global::NFMsg.GridClanBaseInfo redInfo_;
    /// <summary>
    ///红方	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.GridClanBaseInfo red_info {
      get { return redInfo_; }
      set {
        redInfo_ = value;
      }
    }

    /// <summary>Field number for the "blue_info" field.</summary>
    public const int blue_infoFieldNumber = 2;
    private global::NFMsg.GridClanBaseInfo blueInfo_;
    /// <summary>
    ///蓝方	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.GridClanBaseInfo blue_info {
      get { return blueInfo_; }
      set {
        blueInfo_ = value;
      }
    }

    /// <summary>Field number for the "winner_id" field.</summary>
    public const int winner_idFieldNumber = 10;
    private global::NFMsg.Ident winnerId_;
    /// <summary>
    ///winner
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident winner_id {
      get { return winnerId_; }
      set {
        winnerId_ = value;
      }
    }

    /// <summary>Field number for the "war_time" field.</summary>
    public const int war_timeFieldNumber = 11;
    private int warTime_;
    /// <summary>
    ///war时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int war_time {
      get { return warTime_; }
      set {
        warTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapWarHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapWarHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(red_info, other.red_info)) return false;
      if (!object.Equals(blue_info, other.blue_info)) return false;
      if (!object.Equals(winner_id, other.winner_id)) return false;
      if (war_time != other.war_time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (redInfo_ != null) hash ^= red_info.GetHashCode();
      if (blueInfo_ != null) hash ^= blue_info.GetHashCode();
      if (winnerId_ != null) hash ^= winner_id.GetHashCode();
      if (war_time != 0) hash ^= war_time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (redInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(red_info);
      }
      if (blueInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(blue_info);
      }
      if (winnerId_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(winner_id);
      }
      if (war_time != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(war_time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (redInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(red_info);
      }
      if (blueInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(blue_info);
      }
      if (winnerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(winner_id);
      }
      if (war_time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(war_time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapWarHistory other) {
      if (other == null) {
        return;
      }
      if (other.redInfo_ != null) {
        if (redInfo_ == null) {
          redInfo_ = new global::NFMsg.GridClanBaseInfo();
        }
        red_info.MergeFrom(other.red_info);
      }
      if (other.blueInfo_ != null) {
        if (blueInfo_ == null) {
          blueInfo_ = new global::NFMsg.GridClanBaseInfo();
        }
        blue_info.MergeFrom(other.blue_info);
      }
      if (other.winnerId_ != null) {
        if (winnerId_ == null) {
          winnerId_ = new global::NFMsg.Ident();
        }
        winner_id.MergeFrom(other.winner_id);
      }
      if (other.war_time != 0) {
        war_time = other.war_time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (redInfo_ == null) {
              redInfo_ = new global::NFMsg.GridClanBaseInfo();
            }
            input.ReadMessage(redInfo_);
            break;
          }
          case 18: {
            if (blueInfo_ == null) {
              blueInfo_ = new global::NFMsg.GridClanBaseInfo();
            }
            input.ReadMessage(blueInfo_);
            break;
          }
          case 82: {
            if (winnerId_ == null) {
              winnerId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(winnerId_);
            break;
          }
          case 88: {
            war_time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapGridDetailInfo : pb::IMessage<BigMapGridDetailInfo> {
    private static readonly pb::MessageParser<BigMapGridDetailInfo> _parser = new pb::MessageParser<BigMapGridDetailInfo>(() => new BigMapGridDetailInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapGridDetailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo(BigMapGridDetailInfo other) : this() {
      gridBaseInfo_ = other.gridBaseInfo_ != null ? other.gridBaseInfo_.Clone() : null;
      stayGuidList_ = other.stayGuidList_.Clone();
      leaveMsg_ = other.leaveMsg_.Clone();
      warHistory_ = other.warHistory_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo Clone() {
      return new BigMapGridDetailInfo(this);
    }

    /// <summary>Field number for the "grid_base_info" field.</summary>
    public const int grid_base_infoFieldNumber = 1;
    private global::NFMsg.BigMapGridBaseInfo gridBaseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.BigMapGridBaseInfo grid_base_info {
      get { return gridBaseInfo_; }
      set {
        gridBaseInfo_ = value;
      }
    }

    /// <summary>Field number for the "stay_guid_list" field.</summary>
    public const int stay_guid_listFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.GridClanBaseInfo> _repeated_stayGuidList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.GridClanBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.GridClanBaseInfo> stayGuidList_ = new pbc::RepeatedField<global::NFMsg.GridClanBaseInfo>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.GridClanBaseInfo> stay_guid_list {
      get { return stayGuidList_; }
    }

    /// <summary>Field number for the "leave_msg" field.</summary>
    public const int leave_msgFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapLeaveMsg> _repeated_leaveMsg_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.BigMapLeaveMsg.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapLeaveMsg> leaveMsg_ = new pbc::RepeatedField<global::NFMsg.BigMapLeaveMsg>();
    /// <summary>
    ///此地图留言(&lt;=10)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapLeaveMsg> leave_msg {
      get { return leaveMsg_; }
    }

    /// <summary>Field number for the "war_history" field.</summary>
    public const int war_historyFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapWarHistory> _repeated_warHistory_codec
        = pb::FieldCodec.ForMessage(34, global::NFMsg.BigMapWarHistory.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapWarHistory> warHistory_ = new pbc::RepeatedField<global::NFMsg.BigMapWarHistory>();
    /// <summary>
    ///此地图历史战争信息(&lt;=10)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapWarHistory> war_history {
      get { return warHistory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapGridDetailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapGridDetailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(grid_base_info, other.grid_base_info)) return false;
      if(!stayGuidList_.Equals(other.stayGuidList_)) return false;
      if(!leaveMsg_.Equals(other.leaveMsg_)) return false;
      if(!warHistory_.Equals(other.warHistory_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gridBaseInfo_ != null) hash ^= grid_base_info.GetHashCode();
      hash ^= stayGuidList_.GetHashCode();
      hash ^= leaveMsg_.GetHashCode();
      hash ^= warHistory_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gridBaseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(grid_base_info);
      }
      stayGuidList_.WriteTo(output, _repeated_stayGuidList_codec);
      leaveMsg_.WriteTo(output, _repeated_leaveMsg_codec);
      warHistory_.WriteTo(output, _repeated_warHistory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gridBaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(grid_base_info);
      }
      size += stayGuidList_.CalculateSize(_repeated_stayGuidList_codec);
      size += leaveMsg_.CalculateSize(_repeated_leaveMsg_codec);
      size += warHistory_.CalculateSize(_repeated_warHistory_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapGridDetailInfo other) {
      if (other == null) {
        return;
      }
      if (other.gridBaseInfo_ != null) {
        if (gridBaseInfo_ == null) {
          gridBaseInfo_ = new global::NFMsg.BigMapGridBaseInfo();
        }
        grid_base_info.MergeFrom(other.grid_base_info);
      }
      stayGuidList_.Add(other.stayGuidList_);
      leaveMsg_.Add(other.leaveMsg_);
      warHistory_.Add(other.warHistory_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gridBaseInfo_ == null) {
              gridBaseInfo_ = new global::NFMsg.BigMapGridBaseInfo();
            }
            input.ReadMessage(gridBaseInfo_);
            break;
          }
          case 18: {
            stayGuidList_.AddEntriesFrom(input, _repeated_stayGuidList_codec);
            break;
          }
          case 26: {
            leaveMsg_.AddEntriesFrom(input, _repeated_leaveMsg_codec);
            break;
          }
          case 34: {
            warHistory_.AddEntriesFrom(input, _repeated_warHistory_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_INFO
  /// </summary>
  public sealed partial class AckBigMapGridInfo : pb::IMessage<AckBigMapGridInfo> {
    private static readonly pb::MessageParser<AckBigMapGridInfo> _parser = new pb::MessageParser<AckBigMapGridInfo>(() => new AckBigMapGridInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBigMapGridInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo(AckBigMapGridInfo other) : this() {
      mapData_ = other.mapData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo Clone() {
      return new AckBigMapGridInfo(this);
    }

    /// <summary>Field number for the "map_data" field.</summary>
    public const int map_dataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapGridDetailInfo> _repeated_mapData_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.BigMapGridDetailInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapGridDetailInfo> mapData_ = new pbc::RepeatedField<global::NFMsg.BigMapGridDetailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapGridDetailInfo> map_data {
      get { return mapData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckBigMapGridInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckBigMapGridInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapData_.Equals(other.mapData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapData_.WriteTo(output, _repeated_mapData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapData_.CalculateSize(_repeated_mapData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckBigMapGridInfo other) {
      if (other == null) {
        return;
      }
      mapData_.Add(other.mapData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mapData_.AddEntriesFrom(input, _repeated_mapData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_BIG_MAP_GRID
  /// </summary>
  public sealed partial class ReqBigMapInfo : pb::IMessage<ReqBigMapInfo> {
    private static readonly pb::MessageParser<ReqBigMapInfo> _parser = new pb::MessageParser<ReqBigMapInfo>(() => new ReqBigMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBigMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo(ReqBigMapInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo Clone() {
      return new ReqBigMapInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBigMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBigMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqBigMapInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_BIG_MAP_GRID
  /// </summary>
  public sealed partial class AckBigMapInfo : pb::IMessage<AckBigMapInfo> {
    private static readonly pb::MessageParser<AckBigMapInfo> _parser = new pb::MessageParser<AckBigMapInfo>(() => new AckBigMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBigMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo(AckBigMapInfo other) : this() {
      gridBaseInfo_ = other.gridBaseInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo Clone() {
      return new AckBigMapInfo(this);
    }

    /// <summary>Field number for the "grid_base_info" field.</summary>
    public const int grid_base_infoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapGridBaseInfo> _repeated_gridBaseInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.BigMapGridBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapGridBaseInfo> gridBaseInfo_ = new pbc::RepeatedField<global::NFMsg.BigMapGridBaseInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapGridBaseInfo> grid_base_info {
      get { return gridBaseInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckBigMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckBigMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gridBaseInfo_.Equals(other.gridBaseInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gridBaseInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gridBaseInfo_.WriteTo(output, _repeated_gridBaseInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gridBaseInfo_.CalculateSize(_repeated_gridBaseInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckBigMapInfo other) {
      if (other == null) {
        return;
      }
      gridBaseInfo_.Add(other.gridBaseInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gridBaseInfo_.AddEntriesFrom(input, _repeated_gridBaseInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_HOLD_MAP_GRID
  /// </summary>
  public sealed partial class ReqHoldMapGrid : pb::IMessage<ReqHoldMapGrid> {
    private static readonly pb::MessageParser<ReqHoldMapGrid> _parser = new pb::MessageParser<ReqHoldMapGrid>(() => new ReqHoldMapGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHoldMapGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid(ReqHoldMapGrid other) : this() {
      mapTitleId_ = other.mapTitleId_;
      guildId_ = other.guildId_ != null ? other.guildId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid Clone() {
      return new ReqHoldMapGrid(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int map_title_idFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString map_title_id {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int guild_idFieldNumber = 2;
    private global::NFMsg.Ident guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident guild_id {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqHoldMapGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqHoldMapGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (map_title_id != other.map_title_id) return false;
      if (!object.Equals(guild_id, other.guild_id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (map_title_id.Length != 0) hash ^= map_title_id.GetHashCode();
      if (guildId_ != null) hash ^= guild_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (map_title_id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(map_title_id);
      }
      if (guildId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(guild_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (map_title_id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(map_title_id);
      }
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(guild_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqHoldMapGrid other) {
      if (other == null) {
        return;
      }
      if (other.map_title_id.Length != 0) {
        map_title_id = other.map_title_id;
      }
      if (other.guildId_ != null) {
        if (guildId_ == null) {
          guildId_ = new global::NFMsg.Ident();
        }
        guild_id.MergeFrom(other.guild_id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            map_title_id = input.ReadBytes();
            break;
          }
          case 18: {
            if (guildId_ == null) {
              guildId_ = new global::NFMsg.Ident();
            }
            input.ReadMessage(guildId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_HOLD_MAP_GRID
  /// </summary>
  public sealed partial class AckHoldMapGrid : pb::IMessage<AckHoldMapGrid> {
    private static readonly pb::MessageParser<AckHoldMapGrid> _parser = new pb::MessageParser<AckHoldMapGrid>(() => new AckHoldMapGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHoldMapGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid(AckHoldMapGrid other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid Clone() {
      return new AckHoldMapGrid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckHoldMapGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckHoldMapGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckHoldMapGrid other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_LEAVE_MSG_MAP_GRID
  /// </summary>
  public sealed partial class ReqLeaveMapMsg : pb::IMessage<ReqLeaveMapMsg> {
    private static readonly pb::MessageParser<ReqLeaveMapMsg> _parser = new pb::MessageParser<ReqLeaveMapMsg>(() => new ReqLeaveMapMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLeaveMapMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg(ReqLeaveMapMsg other) : this() {
      mapTitleId_ = other.mapTitleId_;
      leaveMsg_ = other.leaveMsg_ != null ? other.leaveMsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg Clone() {
      return new ReqLeaveMapMsg(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int map_title_idFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString map_title_id {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leave_msg" field.</summary>
    public const int leave_msgFieldNumber = 2;
    private global::NFMsg.BigMapLeaveMsg leaveMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.BigMapLeaveMsg leave_msg {
      get { return leaveMsg_; }
      set {
        leaveMsg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqLeaveMapMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqLeaveMapMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (map_title_id != other.map_title_id) return false;
      if (!object.Equals(leave_msg, other.leave_msg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (map_title_id.Length != 0) hash ^= map_title_id.GetHashCode();
      if (leaveMsg_ != null) hash ^= leave_msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (map_title_id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(map_title_id);
      }
      if (leaveMsg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(leave_msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (map_title_id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(map_title_id);
      }
      if (leaveMsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(leave_msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqLeaveMapMsg other) {
      if (other == null) {
        return;
      }
      if (other.map_title_id.Length != 0) {
        map_title_id = other.map_title_id;
      }
      if (other.leaveMsg_ != null) {
        if (leaveMsg_ == null) {
          leaveMsg_ = new global::NFMsg.BigMapLeaveMsg();
        }
        leave_msg.MergeFrom(other.leave_msg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            map_title_id = input.ReadBytes();
            break;
          }
          case 18: {
            if (leaveMsg_ == null) {
              leaveMsg_ = new global::NFMsg.BigMapLeaveMsg();
            }
            input.ReadMessage(leaveMsg_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_LEAVE_MSG_MAP_GRID
  /// </summary>
  public sealed partial class AckLeaveMapMsg : pb::IMessage<AckLeaveMapMsg> {
    private static readonly pb::MessageParser<AckLeaveMapMsg> _parser = new pb::MessageParser<AckLeaveMapMsg>(() => new AckLeaveMapMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckLeaveMapMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg(AckLeaveMapMsg other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg Clone() {
      return new AckLeaveMapMsg(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckLeaveMapMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckLeaveMapMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckLeaveMapMsg other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_GET_MAP_GRID_AWARD
  /// </summary>
  public sealed partial class ReqGetMapAward : pb::IMessage<ReqGetMapAward> {
    private static readonly pb::MessageParser<ReqGetMapAward> _parser = new pb::MessageParser<ReqGetMapAward>(() => new ReqGetMapAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetMapAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward(ReqGetMapAward other) : this() {
      mapTitleId_ = other.mapTitleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward Clone() {
      return new ReqGetMapAward(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int map_title_idFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString map_title_id {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqGetMapAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqGetMapAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (map_title_id != other.map_title_id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (map_title_id.Length != 0) hash ^= map_title_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (map_title_id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(map_title_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (map_title_id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(map_title_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqGetMapAward other) {
      if (other == null) {
        return;
      }
      if (other.map_title_id.Length != 0) {
        map_title_id = other.map_title_id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            map_title_id = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_GET_MAP_GRID_AWARD
  /// </summary>
  public sealed partial class AckGetMapAward : pb::IMessage<AckGetMapAward> {
    private static readonly pb::MessageParser<AckGetMapAward> _parser = new pb::MessageParser<AckGetMapAward>(() => new AckGetMapAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGetMapAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward(AckGetMapAward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward Clone() {
      return new AckGetMapAward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckGetMapAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckGetMapAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckGetMapAward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_HUNTING
  /// </summary>
  public sealed partial class ReqMapHunting : pb::IMessage<ReqMapHunting> {
    private static readonly pb::MessageParser<ReqMapHunting> _parser = new pb::MessageParser<ReqMapHunting>(() => new ReqMapHunting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMapHunting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting(ReqMapHunting other) : this() {
      mapTitleId_ = other.mapTitleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting Clone() {
      return new ReqMapHunting(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int map_title_idFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString map_title_id {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqMapHunting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqMapHunting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (map_title_id != other.map_title_id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (map_title_id.Length != 0) hash ^= map_title_id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (map_title_id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(map_title_id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (map_title_id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(map_title_id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqMapHunting other) {
      if (other == null) {
        return;
      }
      if (other.map_title_id.Length != 0) {
        map_title_id = other.map_title_id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            map_title_id = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_HUNTING
  /// </summary>
  public sealed partial class AckMapHunting : pb::IMessage<AckMapHunting> {
    private static readonly pb::MessageParser<AckMapHunting> _parser = new pb::MessageParser<AckMapHunting>(() => new AckMapHunting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMapHunting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting(AckMapHunting other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting Clone() {
      return new AckMapHunting(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckMapHunting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckMapHunting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckMapHunting other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_KING_WAR
  /// </summary>
  public sealed partial class ReqMapKingWar : pb::IMessage<ReqMapKingWar> {
    private static readonly pb::MessageParser<ReqMapKingWar> _parser = new pb::MessageParser<ReqMapKingWar>(() => new ReqMapKingWar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMapKingWar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar(ReqMapKingWar other) : this() {
      mapTitle_ = other.mapTitle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar Clone() {
      return new ReqMapKingWar(this);
    }

    /// <summary>Field number for the "map_title" field.</summary>
    public const int map_titleFieldNumber = 1;
    private pb::ByteString mapTitle_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString map_title {
      get { return mapTitle_; }
      set {
        mapTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqMapKingWar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqMapKingWar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (map_title != other.map_title) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (map_title.Length != 0) hash ^= map_title.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (map_title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(map_title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (map_title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(map_title);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqMapKingWar other) {
      if (other == null) {
        return;
      }
      if (other.map_title.Length != 0) {
        map_title = other.map_title;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            map_title = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_KING_WAR
  /// </summary>
  public sealed partial class AckMapKingWar : pb::IMessage<AckMapKingWar> {
    private static readonly pb::MessageParser<AckMapKingWar> _parser = new pb::MessageParser<AckMapKingWar>(() => new AckMapKingWar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMapKingWar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar(AckMapKingWar other) : this() {
      mapTitle_ = other.mapTitle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar Clone() {
      return new AckMapKingWar(this);
    }

    /// <summary>Field number for the "map_title" field.</summary>
    public const int map_titleFieldNumber = 1;
    private pb::ByteString mapTitle_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString map_title {
      get { return mapTitle_; }
      set {
        mapTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckMapKingWar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckMapKingWar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (map_title != other.map_title) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (map_title.Length != 0) hash ^= map_title.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (map_title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(map_title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (map_title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(map_title);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckMapKingWar other) {
      if (other == null) {
        return;
      }
      if (other.map_title.Length != 0) {
        map_title = other.map_title;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            map_title = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
