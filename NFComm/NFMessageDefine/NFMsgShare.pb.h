// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#ifndef PROTOBUF_INCLUDED_NFMsgShare_2eproto
#define PROTOBUF_INCLUDED_NFMsgShare_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "NFDefine.pb.h"
#include "NFMsgBase.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto LIBPROTOC_EXPORT

namespace protobuf_NFMsgShare_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[47];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_NFMsgShare_2eproto
namespace NFMsg {
class AckEndBattle;
class AckEndBattleDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckEndBattleDefaultTypeInternal _AckEndBattle_default_instance_;
class AckPlayerEntryList;
class AckPlayerEntryListDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckPlayerEntryListDefaultTypeInternal _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveList;
class AckPlayerLeaveListDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckPlayerLeaveListDefaultTypeInternal _AckPlayerLeaveList_default_instance_;
class AckSceneBuildings;
class AckSceneBuildingsDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckSceneBuildingsDefaultTypeInternal _AckSceneBuildings_default_instance_;
class AckSearchClan;
class AckSearchClanDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckSearchClanDefaultTypeInternal _AckSearchClan_default_instance_;
class AckSearchClan_SearchClanObject;
class AckSearchClan_SearchClanObjectDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckSearchClan_SearchClanObjectDefaultTypeInternal _AckSearchClan_SearchClanObject_default_instance_;
class AckSearchOppnent;
class AckSearchOppnentDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckSearchOppnentDefaultTypeInternal _AckSearchOppnent_default_instance_;
class AckSwitchServer;
class AckSwitchServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern AckSwitchServerDefaultTypeInternal _AckSwitchServer_default_instance_;
class CurrencyStruct;
class CurrencyStructDefaultTypeInternal;
LIBPROTOC_EXPORT extern CurrencyStructDefaultTypeInternal _CurrencyStruct_default_instance_;
class EffectData;
class EffectDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern EffectDataDefaultTypeInternal _EffectData_default_instance_;
class ItemStruct;
class ItemStructDefaultTypeInternal;
LIBPROTOC_EXPORT extern ItemStructDefaultTypeInternal _ItemStruct_default_instance_;
class PVPPlayerInfo;
class PVPPlayerInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern PVPPlayerInfoDefaultTypeInternal _PVPPlayerInfo_default_instance_;
class PlayerEntryInfo;
class PlayerEntryInfoDefaultTypeInternal;
LIBPROTOC_EXPORT extern PlayerEntryInfoDefaultTypeInternal _PlayerEntryInfo_default_instance_;
class ReqAcceptTask;
class ReqAcceptTaskDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAcceptTaskDefaultTypeInternal _ReqAcceptTask_default_instance_;
class ReqAckCancelSearch;
class ReqAckCancelSearchDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckCancelSearchDefaultTypeInternal _ReqAckCancelSearch_default_instance_;
class ReqAckCreateClan;
class ReqAckCreateClanDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckCreateClanDefaultTypeInternal _ReqAckCreateClan_default_instance_;
class ReqAckEnterGameSuccess;
class ReqAckEnterGameSuccessDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckEnterGameSuccessDefaultTypeInternal _ReqAckEnterGameSuccess_default_instance_;
class ReqAckHomeScene;
class ReqAckHomeSceneDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckHomeSceneDefaultTypeInternal _ReqAckHomeScene_default_instance_;
class ReqAckJoinClan;
class ReqAckJoinClanDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckJoinClanDefaultTypeInternal _ReqAckJoinClan_default_instance_;
class ReqAckLeaveClan;
class ReqAckLeaveClanDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckLeaveClanDefaultTypeInternal _ReqAckLeaveClan_default_instance_;
class ReqAckOprClanMember;
class ReqAckOprClanMemberDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckOprClanMemberDefaultTypeInternal _ReqAckOprClanMember_default_instance_;
class ReqAckPlayerChat;
class ReqAckPlayerChatDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckPlayerChatDefaultTypeInternal _ReqAckPlayerChat_default_instance_;
class ReqAckPlayerChat_ChatContainer;
class ReqAckPlayerChat_ChatContainerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckPlayerChat_ChatContainerDefaultTypeInternal _ReqAckPlayerChat_ChatContainer_default_instance_;
class ReqAckPlayerMove;
class ReqAckPlayerMoveDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckPlayerMoveDefaultTypeInternal _ReqAckPlayerMove_default_instance_;
class ReqAckPlayerPosSync;
class ReqAckPlayerPosSyncDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckPlayerPosSyncDefaultTypeInternal _ReqAckPlayerPosSync_default_instance_;
class ReqAckReliveHero;
class ReqAckReliveHeroDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckReliveHeroDefaultTypeInternal _ReqAckReliveHero_default_instance_;
class ReqAckSwapScene;
class ReqAckSwapSceneDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckSwapSceneDefaultTypeInternal _ReqAckSwapScene_default_instance_;
class ReqAckSynData;
class ReqAckSynDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckSynDataDefaultTypeInternal _ReqAckSynData_default_instance_;
class ReqAckUseItem;
class ReqAckUseItemDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckUseItemDefaultTypeInternal _ReqAckUseItem_default_instance_;
class ReqAckUseSkill;
class ReqAckUseSkillDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckUseSkillDefaultTypeInternal _ReqAckUseSkill_default_instance_;
class ReqAddSceneBuilding;
class ReqAddSceneBuildingDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAddSceneBuildingDefaultTypeInternal _ReqAddSceneBuilding_default_instance_;
class ReqBuyItemFromShop;
class ReqBuyItemFromShopDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqBuyItemFromShopDefaultTypeInternal _ReqBuyItemFromShop_default_instance_;
class ReqCompeleteTask;
class ReqCompeleteTaskDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqCompeleteTaskDefaultTypeInternal _ReqCompeleteTask_default_instance_;
class ReqEndBattle;
class ReqEndBattleDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqEndBattleDefaultTypeInternal _ReqEndBattle_default_instance_;
class ReqEnterClanEctype;
class ReqEnterClanEctypeDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqEnterClanEctypeDefaultTypeInternal _ReqEnterClanEctype_default_instance_;
class ReqEnterGameServer;
class ReqEnterGameServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqEnterGameServerDefaultTypeInternal _ReqEnterGameServer_default_instance_;
class ReqHeartBeat;
class ReqHeartBeatDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqHeartBeatDefaultTypeInternal _ReqHeartBeat_default_instance_;
class ReqLeaveGameServer;
class ReqLeaveGameServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqLeaveGameServerDefaultTypeInternal _ReqLeaveGameServer_default_instance_;
class ReqPickDropItem;
class ReqPickDropItemDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqPickDropItemDefaultTypeInternal _ReqPickDropItem_default_instance_;
class ReqSceneBuildings;
class ReqSceneBuildingsDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSceneBuildingsDefaultTypeInternal _ReqSceneBuildings_default_instance_;
class ReqSearchClan;
class ReqSearchClanDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSearchClanDefaultTypeInternal _ReqSearchClan_default_instance_;
class ReqSearchOppnent;
class ReqSearchOppnentDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSearchOppnentDefaultTypeInternal _ReqSearchOppnent_default_instance_;
class ReqSendMail;
class ReqSendMailDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSendMailDefaultTypeInternal _ReqSendMail_default_instance_;
class ReqSetFightHero;
class ReqSetFightHeroDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSetFightHeroDefaultTypeInternal _ReqSetFightHero_default_instance_;
class ReqStoreSceneBuildings;
class ReqStoreSceneBuildingsDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqStoreSceneBuildingsDefaultTypeInternal _ReqStoreSceneBuildings_default_instance_;
class ReqSwitchFightHero;
class ReqSwitchFightHeroDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSwitchFightHeroDefaultTypeInternal _ReqSwitchFightHero_default_instance_;
class ReqSwitchServer;
class ReqSwitchServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqSwitchServerDefaultTypeInternal _ReqSwitchServer_default_instance_;
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::NFMsg::AckEndBattle* Arena::CreateMaybeMessage<::NFMsg::AckEndBattle>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::AckPlayerEntryList* Arena::CreateMaybeMessage<::NFMsg::AckPlayerEntryList>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::AckPlayerLeaveList* Arena::CreateMaybeMessage<::NFMsg::AckPlayerLeaveList>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::AckSceneBuildings* Arena::CreateMaybeMessage<::NFMsg::AckSceneBuildings>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::AckSearchClan* Arena::CreateMaybeMessage<::NFMsg::AckSearchClan>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::AckSearchClan_SearchClanObject* Arena::CreateMaybeMessage<::NFMsg::AckSearchClan_SearchClanObject>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::AckSearchOppnent* Arena::CreateMaybeMessage<::NFMsg::AckSearchOppnent>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::AckSwitchServer* Arena::CreateMaybeMessage<::NFMsg::AckSwitchServer>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::CurrencyStruct* Arena::CreateMaybeMessage<::NFMsg::CurrencyStruct>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::EffectData* Arena::CreateMaybeMessage<::NFMsg::EffectData>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ItemStruct* Arena::CreateMaybeMessage<::NFMsg::ItemStruct>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::PVPPlayerInfo* Arena::CreateMaybeMessage<::NFMsg::PVPPlayerInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::PlayerEntryInfo* Arena::CreateMaybeMessage<::NFMsg::PlayerEntryInfo>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAcceptTask* Arena::CreateMaybeMessage<::NFMsg::ReqAcceptTask>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckCancelSearch* Arena::CreateMaybeMessage<::NFMsg::ReqAckCancelSearch>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckCreateClan* Arena::CreateMaybeMessage<::NFMsg::ReqAckCreateClan>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckEnterGameSuccess* Arena::CreateMaybeMessage<::NFMsg::ReqAckEnterGameSuccess>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckHomeScene* Arena::CreateMaybeMessage<::NFMsg::ReqAckHomeScene>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckJoinClan* Arena::CreateMaybeMessage<::NFMsg::ReqAckJoinClan>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckLeaveClan* Arena::CreateMaybeMessage<::NFMsg::ReqAckLeaveClan>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckOprClanMember* Arena::CreateMaybeMessage<::NFMsg::ReqAckOprClanMember>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckPlayerChat* Arena::CreateMaybeMessage<::NFMsg::ReqAckPlayerChat>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckPlayerChat_ChatContainer* Arena::CreateMaybeMessage<::NFMsg::ReqAckPlayerChat_ChatContainer>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckPlayerMove* Arena::CreateMaybeMessage<::NFMsg::ReqAckPlayerMove>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckPlayerPosSync* Arena::CreateMaybeMessage<::NFMsg::ReqAckPlayerPosSync>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckReliveHero* Arena::CreateMaybeMessage<::NFMsg::ReqAckReliveHero>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckSwapScene* Arena::CreateMaybeMessage<::NFMsg::ReqAckSwapScene>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckSynData* Arena::CreateMaybeMessage<::NFMsg::ReqAckSynData>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckUseItem* Arena::CreateMaybeMessage<::NFMsg::ReqAckUseItem>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckUseSkill* Arena::CreateMaybeMessage<::NFMsg::ReqAckUseSkill>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAddSceneBuilding* Arena::CreateMaybeMessage<::NFMsg::ReqAddSceneBuilding>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqBuyItemFromShop* Arena::CreateMaybeMessage<::NFMsg::ReqBuyItemFromShop>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqCompeleteTask* Arena::CreateMaybeMessage<::NFMsg::ReqCompeleteTask>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqEndBattle* Arena::CreateMaybeMessage<::NFMsg::ReqEndBattle>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqEnterClanEctype* Arena::CreateMaybeMessage<::NFMsg::ReqEnterClanEctype>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqEnterGameServer* Arena::CreateMaybeMessage<::NFMsg::ReqEnterGameServer>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqHeartBeat* Arena::CreateMaybeMessage<::NFMsg::ReqHeartBeat>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage<::NFMsg::ReqLeaveGameServer>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqPickDropItem* Arena::CreateMaybeMessage<::NFMsg::ReqPickDropItem>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqSceneBuildings* Arena::CreateMaybeMessage<::NFMsg::ReqSceneBuildings>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqSearchClan* Arena::CreateMaybeMessage<::NFMsg::ReqSearchClan>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqSearchOppnent* Arena::CreateMaybeMessage<::NFMsg::ReqSearchOppnent>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqSendMail* Arena::CreateMaybeMessage<::NFMsg::ReqSendMail>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqSetFightHero* Arena::CreateMaybeMessage<::NFMsg::ReqSetFightHero>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqStoreSceneBuildings* Arena::CreateMaybeMessage<::NFMsg::ReqStoreSceneBuildings>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqSwitchFightHero* Arena::CreateMaybeMessage<::NFMsg::ReqSwitchFightHero>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqSwitchServer* Arena::CreateMaybeMessage<::NFMsg::ReqSwitchServer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFMsg {

enum ReqAckSynData_SynType {
  ReqAckSynData_SynType_EST_UNKNOW = 0,
  ReqAckSynData_SynType_EST_GROUP = 1,
  ReqAckSynData_SynType_EST_SCENE = 2,
  ReqAckSynData_SynType_EST_CLAN = 3,
  ReqAckSynData_SynType_EST_FRIEND = 4,
  ReqAckSynData_SynType_ReqAckSynData_SynType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckSynData_SynType_ReqAckSynData_SynType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckSynData_SynType_IsValid(int value);
const ReqAckSynData_SynType ReqAckSynData_SynType_SynType_MIN = ReqAckSynData_SynType_EST_UNKNOW;
const ReqAckSynData_SynType ReqAckSynData_SynType_SynType_MAX = ReqAckSynData_SynType_EST_FRIEND;
const int ReqAckSynData_SynType_SynType_ARRAYSIZE = ReqAckSynData_SynType_SynType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckSynData_SynType_descriptor();
inline const ::std::string& ReqAckSynData_SynType_Name(ReqAckSynData_SynType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckSynData_SynType_descriptor(), value);
}
inline bool ReqAckSynData_SynType_Parse(
    const ::std::string& name, ReqAckSynData_SynType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckSynData_SynType>(
    ReqAckSynData_SynType_descriptor(), name, value);
}
enum ReqAckPlayerChat_ChatContainer_ContainerType {
  ReqAckPlayerChat_ChatContainer_ContainerType_EGCT_UNKNOW = 0,
  ReqAckPlayerChat_ChatContainer_ContainerType_EGCT_ITEM = 1,
  ReqAckPlayerChat_ChatContainer_ContainerType_ReqAckPlayerChat_ChatContainer_ContainerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckPlayerChat_ChatContainer_ContainerType_ReqAckPlayerChat_ChatContainer_ContainerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckPlayerChat_ChatContainer_ContainerType_IsValid(int value);
const ReqAckPlayerChat_ChatContainer_ContainerType ReqAckPlayerChat_ChatContainer_ContainerType_ContainerType_MIN = ReqAckPlayerChat_ChatContainer_ContainerType_EGCT_UNKNOW;
const ReqAckPlayerChat_ChatContainer_ContainerType ReqAckPlayerChat_ChatContainer_ContainerType_ContainerType_MAX = ReqAckPlayerChat_ChatContainer_ContainerType_EGCT_ITEM;
const int ReqAckPlayerChat_ChatContainer_ContainerType_ContainerType_ARRAYSIZE = ReqAckPlayerChat_ChatContainer_ContainerType_ContainerType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_ChatContainer_ContainerType_descriptor();
inline const ::std::string& ReqAckPlayerChat_ChatContainer_ContainerType_Name(ReqAckPlayerChat_ChatContainer_ContainerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckPlayerChat_ChatContainer_ContainerType_descriptor(), value);
}
inline bool ReqAckPlayerChat_ChatContainer_ContainerType_Parse(
    const ::std::string& name, ReqAckPlayerChat_ChatContainer_ContainerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckPlayerChat_ChatContainer_ContainerType>(
    ReqAckPlayerChat_ChatContainer_ContainerType_descriptor(), name, value);
}
enum ReqAckPlayerChat_EGameChatType {
  ReqAckPlayerChat_EGameChatType_EGCT_CLAN = 0,
  ReqAckPlayerChat_EGameChatType_EGCT_PRIVATE = 1,
  ReqAckPlayerChat_EGameChatType_EGCT_TEAM = 2,
  ReqAckPlayerChat_EGameChatType_EGCT_WORLD = 3,
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckPlayerChat_EGameChatType_IsValid(int value);
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MIN = ReqAckPlayerChat_EGameChatType_EGCT_CLAN;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MAX = ReqAckPlayerChat_EGameChatType_EGCT_WORLD;
const int ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE = ReqAckPlayerChat_EGameChatType_EGameChatType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor();
inline const ::std::string& ReqAckPlayerChat_EGameChatType_Name(ReqAckPlayerChat_EGameChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatType_descriptor(), value);
}
inline bool ReqAckPlayerChat_EGameChatType_Parse(
    const ::std::string& name, ReqAckPlayerChat_EGameChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatType>(
    ReqAckPlayerChat_EGameChatType_descriptor(), name, value);
}
enum EffectData_EResultType {
  EffectData_EResultType_EET_FAIL = 0,
  EffectData_EResultType_EET_SUCCESS = 1,
  EffectData_EResultType_EET_REFUSE = 2,
  EffectData_EResultType_EET_MISS = 3,
  EffectData_EResultType_EET_CRIT = 4,
  EffectData_EResultType_EffectData_EResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EffectData_EResultType_EffectData_EResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool EffectData_EResultType_IsValid(int value);
const EffectData_EResultType EffectData_EResultType_EResultType_MIN = EffectData_EResultType_EET_FAIL;
const EffectData_EResultType EffectData_EResultType_EResultType_MAX = EffectData_EResultType_EET_CRIT;
const int EffectData_EResultType_EResultType_ARRAYSIZE = EffectData_EResultType_EResultType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EffectData_EResultType_descriptor();
inline const ::std::string& EffectData_EResultType_Name(EffectData_EResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EffectData_EResultType_descriptor(), value);
}
inline bool EffectData_EResultType_Parse(
    const ::std::string& name, EffectData_EResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EffectData_EResultType>(
    EffectData_EResultType_descriptor(), name, value);
}
enum ReqAckSwapScene_EGameSwapType {
  ReqAckSwapScene_EGameSwapType_EGST_NARMAL = 0,
  ReqAckSwapScene_EGameSwapType_EGST_CLONE = 1,
  ReqAckSwapScene_EGameSwapType_EGST_ARENA = 2,
  ReqAckSwapScene_EGameSwapType_EGST_MIRROR = 3,
  ReqAckSwapScene_EGameSwapType_ReqAckSwapScene_EGameSwapType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckSwapScene_EGameSwapType_ReqAckSwapScene_EGameSwapType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckSwapScene_EGameSwapType_IsValid(int value);
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene_EGameSwapType_EGameSwapType_MIN = ReqAckSwapScene_EGameSwapType_EGST_NARMAL;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX = ReqAckSwapScene_EGameSwapType_EGST_MIRROR;
const int ReqAckSwapScene_EGameSwapType_EGameSwapType_ARRAYSIZE = ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor();
inline const ::std::string& ReqAckSwapScene_EGameSwapType_Name(ReqAckSwapScene_EGameSwapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckSwapScene_EGameSwapType_descriptor(), value);
}
inline bool ReqAckSwapScene_EGameSwapType_Parse(
    const ::std::string& name, ReqAckSwapScene_EGameSwapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckSwapScene_EGameSwapType>(
    ReqAckSwapScene_EGameSwapType_descriptor(), name, value);
}
enum ReqAckOprClanMember_EGClanMemberOprType {
  ReqAckOprClanMember_EGClanMemberOprType_EGAT_DOWN = 0,
  ReqAckOprClanMember_EGClanMemberOprType_EGAT_UP = 1,
  ReqAckOprClanMember_EGClanMemberOprType_EGAT_KICK = 2,
  ReqAckOprClanMember_EGClanMemberOprType_ReqAckOprClanMember_EGClanMemberOprType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqAckOprClanMember_EGClanMemberOprType_ReqAckOprClanMember_EGClanMemberOprType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqAckOprClanMember_EGClanMemberOprType_IsValid(int value);
const ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember_EGClanMemberOprType_EGClanMemberOprType_MIN = ReqAckOprClanMember_EGClanMemberOprType_EGAT_DOWN;
const ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember_EGClanMemberOprType_EGClanMemberOprType_MAX = ReqAckOprClanMember_EGClanMemberOprType_EGAT_KICK;
const int ReqAckOprClanMember_EGClanMemberOprType_EGClanMemberOprType_ARRAYSIZE = ReqAckOprClanMember_EGClanMemberOprType_EGClanMemberOprType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckOprClanMember_EGClanMemberOprType_descriptor();
inline const ::std::string& ReqAckOprClanMember_EGClanMemberOprType_Name(ReqAckOprClanMember_EGClanMemberOprType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckOprClanMember_EGClanMemberOprType_descriptor(), value);
}
inline bool ReqAckOprClanMember_EGClanMemberOprType_Parse(
    const ::std::string& name, ReqAckOprClanMember_EGClanMemberOprType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckOprClanMember_EGClanMemberOprType>(
    ReqAckOprClanMember_EGClanMemberOprType_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT ReqEnterGameServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqEnterGameServer) */ {
 public:
  ReqEnterGameServer();
  virtual ~ReqEnterGameServer();

  ReqEnterGameServer(const ReqEnterGameServer& from);

  inline ReqEnterGameServer& operator=(const ReqEnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqEnterGameServer(ReqEnterGameServer&& from) noexcept
    : ReqEnterGameServer() {
    *this = ::std::move(from);
  }

  inline ReqEnterGameServer& operator=(ReqEnterGameServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterGameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqEnterGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqEnterGameServer*>(
               &_ReqEnterGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReqEnterGameServer* other);
  friend void swap(ReqEnterGameServer& a, ReqEnterGameServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqEnterGameServer* New() const final {
    return CreateMaybeMessage<ReqEnterGameServer>(NULL);
  }

  ReqEnterGameServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqEnterGameServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqEnterGameServer& from);
  void MergeFrom(const ReqEnterGameServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqEnterGameServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // bytes name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .NFMsg.Ident id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_id() const;
  public:
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);

  // int32 game_id = 3;
  void clear_game_id();
  static const int kGameIdFieldNumber = 3;
  ::google::protobuf::int32 game_id() const;
  void set_game_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqEnterGameServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::NFMsg::Ident* id_;
  ::google::protobuf::int32 game_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckEnterGameSuccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckEnterGameSuccess) */ {
 public:
  ReqAckEnterGameSuccess();
  virtual ~ReqAckEnterGameSuccess();

  ReqAckEnterGameSuccess(const ReqAckEnterGameSuccess& from);

  inline ReqAckEnterGameSuccess& operator=(const ReqAckEnterGameSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckEnterGameSuccess(ReqAckEnterGameSuccess&& from) noexcept
    : ReqAckEnterGameSuccess() {
    *this = ::std::move(from);
  }

  inline ReqAckEnterGameSuccess& operator=(ReqAckEnterGameSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckEnterGameSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckEnterGameSuccess* internal_default_instance() {
    return reinterpret_cast<const ReqAckEnterGameSuccess*>(
               &_ReqAckEnterGameSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ReqAckEnterGameSuccess* other);
  friend void swap(ReqAckEnterGameSuccess& a, ReqAckEnterGameSuccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckEnterGameSuccess* New() const final {
    return CreateMaybeMessage<ReqAckEnterGameSuccess>(NULL);
  }

  ReqAckEnterGameSuccess* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckEnterGameSuccess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckEnterGameSuccess& from);
  void MergeFrom(const ReqAckEnterGameSuccess& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckEnterGameSuccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 arg = 1;
  void clear_arg();
  static const int kArgFieldNumber = 1;
  ::google::protobuf::int32 arg() const;
  void set_arg(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckEnterGameSuccess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 arg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqHeartBeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqHeartBeat) */ {
 public:
  ReqHeartBeat();
  virtual ~ReqHeartBeat();

  ReqHeartBeat(const ReqHeartBeat& from);

  inline ReqHeartBeat& operator=(const ReqHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqHeartBeat(ReqHeartBeat&& from) noexcept
    : ReqHeartBeat() {
    *this = ::std::move(from);
  }

  inline ReqHeartBeat& operator=(ReqHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ReqHeartBeat*>(
               &_ReqHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReqHeartBeat* other);
  friend void swap(ReqHeartBeat& a, ReqHeartBeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqHeartBeat* New() const final {
    return CreateMaybeMessage<ReqHeartBeat>(NULL);
  }

  ReqHeartBeat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqHeartBeat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqHeartBeat& from);
  void MergeFrom(const ReqHeartBeat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqHeartBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 arg = 1;
  void clear_arg();
  static const int kArgFieldNumber = 1;
  ::google::protobuf::int32 arg() const;
  void set_arg(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqHeartBeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 arg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqLeaveGameServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqLeaveGameServer) */ {
 public:
  ReqLeaveGameServer();
  virtual ~ReqLeaveGameServer();

  ReqLeaveGameServer(const ReqLeaveGameServer& from);

  inline ReqLeaveGameServer& operator=(const ReqLeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqLeaveGameServer(ReqLeaveGameServer&& from) noexcept
    : ReqLeaveGameServer() {
    *this = ::std::move(from);
  }

  inline ReqLeaveGameServer& operator=(ReqLeaveGameServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLeaveGameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqLeaveGameServer*>(
               &_ReqLeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ReqLeaveGameServer* other);
  friend void swap(ReqLeaveGameServer& a, ReqLeaveGameServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqLeaveGameServer* New() const final {
    return CreateMaybeMessage<ReqLeaveGameServer>(NULL);
  }

  ReqLeaveGameServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqLeaveGameServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqLeaveGameServer& from);
  void MergeFrom(const ReqLeaveGameServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLeaveGameServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 arg = 1;
  void clear_arg();
  static const int kArgFieldNumber = 1;
  ::google::protobuf::int32 arg() const;
  void set_arg(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqLeaveGameServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 arg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PlayerEntryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.PlayerEntryInfo) */ {
 public:
  PlayerEntryInfo();
  virtual ~PlayerEntryInfo();

  PlayerEntryInfo(const PlayerEntryInfo& from);

  inline PlayerEntryInfo& operator=(const PlayerEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerEntryInfo(PlayerEntryInfo&& from) noexcept
    : PlayerEntryInfo() {
    *this = ::std::move(from);
  }

  inline PlayerEntryInfo& operator=(PlayerEntryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerEntryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerEntryInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerEntryInfo*>(
               &_PlayerEntryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PlayerEntryInfo* other);
  friend void swap(PlayerEntryInfo& a, PlayerEntryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerEntryInfo* New() const final {
    return CreateMaybeMessage<PlayerEntryInfo>(NULL);
  }

  PlayerEntryInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerEntryInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerEntryInfo& from);
  void MergeFrom(const PlayerEntryInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerEntryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes config_id = 7;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 7;
  const ::std::string& config_id() const;
  void set_config_id(const ::std::string& value);
  #if LANG_CXX11
  void set_config_id(::std::string&& value);
  #endif
  void set_config_id(const char* value);
  void set_config_id(const void* value, size_t size);
  ::std::string* mutable_config_id();
  ::std::string* release_config_id();
  void set_allocated_config_id(::std::string* config_id);

  // bytes class_id = 9;
  void clear_class_id();
  static const int kClassIdFieldNumber = 9;
  const ::std::string& class_id() const;
  void set_class_id(const ::std::string& value);
  #if LANG_CXX11
  void set_class_id(::std::string&& value);
  #endif
  void set_class_id(const char* value);
  void set_class_id(const void* value, size_t size);
  ::std::string* mutable_class_id();
  ::std::string* release_class_id();
  void set_allocated_class_id(::std::string* class_id);

  // .NFMsg.Ident object_guid = 1;
  bool has_object_guid() const;
  void clear_object_guid();
  static const int kObjectGuidFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_object_guid() const;
  public:
  const ::NFMsg::Ident& object_guid() const;
  ::NFMsg::Ident* release_object_guid();
  ::NFMsg::Ident* mutable_object_guid();
  void set_allocated_object_guid(::NFMsg::Ident* object_guid);

  // float x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // float y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // float z = 4;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z() const;
  void set_z(float value);

  // int32 career_type = 5;
  void clear_career_type();
  static const int kCareerTypeFieldNumber = 5;
  ::google::protobuf::int32 career_type() const;
  void set_career_type(::google::protobuf::int32 value);

  // int32 player_state = 6;
  void clear_player_state();
  static const int kPlayerStateFieldNumber = 6;
  ::google::protobuf::int32 player_state() const;
  void set_player_state(::google::protobuf::int32 value);

  // int32 scene_id = 8;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 8;
  ::google::protobuf::int32 scene_id() const;
  void set_scene_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.PlayerEntryInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr config_id_;
  ::google::protobuf::internal::ArenaStringPtr class_id_;
  ::NFMsg::Ident* object_guid_;
  float x_;
  float y_;
  float z_;
  ::google::protobuf::int32 career_type_;
  ::google::protobuf::int32 player_state_;
  ::google::protobuf::int32 scene_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckPlayerEntryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckPlayerEntryList) */ {
 public:
  AckPlayerEntryList();
  virtual ~AckPlayerEntryList();

  AckPlayerEntryList(const AckPlayerEntryList& from);

  inline AckPlayerEntryList& operator=(const AckPlayerEntryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckPlayerEntryList(AckPlayerEntryList&& from) noexcept
    : AckPlayerEntryList() {
    *this = ::std::move(from);
  }

  inline AckPlayerEntryList& operator=(AckPlayerEntryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPlayerEntryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckPlayerEntryList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerEntryList*>(
               &_AckPlayerEntryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AckPlayerEntryList* other);
  friend void swap(AckPlayerEntryList& a, AckPlayerEntryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerEntryList* New() const final {
    return CreateMaybeMessage<AckPlayerEntryList>(NULL);
  }

  AckPlayerEntryList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckPlayerEntryList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckPlayerEntryList& from);
  void MergeFrom(const AckPlayerEntryList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerEntryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  int object_list_size() const;
  void clear_object_list();
  static const int kObjectListFieldNumber = 1;
  ::NFMsg::PlayerEntryInfo* mutable_object_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >*
      mutable_object_list();
  const ::NFMsg::PlayerEntryInfo& object_list(int index) const;
  ::NFMsg::PlayerEntryInfo* add_object_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:NFMsg.AckPlayerEntryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo > object_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckPlayerLeaveList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckPlayerLeaveList) */ {
 public:
  AckPlayerLeaveList();
  virtual ~AckPlayerLeaveList();

  AckPlayerLeaveList(const AckPlayerLeaveList& from);

  inline AckPlayerLeaveList& operator=(const AckPlayerLeaveList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckPlayerLeaveList(AckPlayerLeaveList&& from) noexcept
    : AckPlayerLeaveList() {
    *this = ::std::move(from);
  }

  inline AckPlayerLeaveList& operator=(AckPlayerLeaveList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPlayerLeaveList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckPlayerLeaveList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerLeaveList*>(
               &_AckPlayerLeaveList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AckPlayerLeaveList* other);
  friend void swap(AckPlayerLeaveList& a, AckPlayerLeaveList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerLeaveList* New() const final {
    return CreateMaybeMessage<AckPlayerLeaveList>(NULL);
  }

  AckPlayerLeaveList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckPlayerLeaveList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckPlayerLeaveList& from);
  void MergeFrom(const AckPlayerLeaveList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerLeaveList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.Ident object_list = 1;
  int object_list_size() const;
  void clear_object_list();
  static const int kObjectListFieldNumber = 1;
  ::NFMsg::Ident* mutable_object_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_object_list();
  const ::NFMsg::Ident& object_list(int index) const;
  ::NFMsg::Ident* add_object_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:NFMsg.AckPlayerLeaveList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident > object_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckSynData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckSynData) */ {
 public:
  ReqAckSynData();
  virtual ~ReqAckSynData();

  ReqAckSynData(const ReqAckSynData& from);

  inline ReqAckSynData& operator=(const ReqAckSynData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckSynData(ReqAckSynData&& from) noexcept
    : ReqAckSynData() {
    *this = ::std::move(from);
  }

  inline ReqAckSynData& operator=(ReqAckSynData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckSynData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckSynData* internal_default_instance() {
    return reinterpret_cast<const ReqAckSynData*>(
               &_ReqAckSynData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ReqAckSynData* other);
  friend void swap(ReqAckSynData& a, ReqAckSynData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckSynData* New() const final {
    return CreateMaybeMessage<ReqAckSynData>(NULL);
  }

  ReqAckSynData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckSynData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckSynData& from);
  void MergeFrom(const ReqAckSynData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckSynData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqAckSynData_SynType SynType;
  static const SynType EST_UNKNOW =
    ReqAckSynData_SynType_EST_UNKNOW;
  static const SynType EST_GROUP =
    ReqAckSynData_SynType_EST_GROUP;
  static const SynType EST_SCENE =
    ReqAckSynData_SynType_EST_SCENE;
  static const SynType EST_CLAN =
    ReqAckSynData_SynType_EST_CLAN;
  static const SynType EST_FRIEND =
    ReqAckSynData_SynType_EST_FRIEND;
  static inline bool SynType_IsValid(int value) {
    return ReqAckSynData_SynType_IsValid(value);
  }
  static const SynType SynType_MIN =
    ReqAckSynData_SynType_SynType_MIN;
  static const SynType SynType_MAX =
    ReqAckSynData_SynType_SynType_MAX;
  static const int SynType_ARRAYSIZE =
    ReqAckSynData_SynType_SynType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SynType_descriptor() {
    return ReqAckSynData_SynType_descriptor();
  }
  static inline const ::std::string& SynType_Name(SynType value) {
    return ReqAckSynData_SynType_Name(value);
  }
  static inline bool SynType_Parse(const ::std::string& name,
      SynType* value) {
    return ReqAckSynData_SynType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFMsg.Ident object_list = 2;
  int object_list_size() const;
  void clear_object_list();
  static const int kObjectListFieldNumber = 2;
  ::NFMsg::Ident* mutable_object_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_object_list();
  const ::NFMsg::Ident& object_list(int index) const;
  ::NFMsg::Ident* add_object_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
      object_list() const;

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .NFMsg.Ident syser = 1;
  bool has_syser() const;
  void clear_syser();
  static const int kSyserFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_syser() const;
  public:
  const ::NFMsg::Ident& syser() const;
  ::NFMsg::Ident* release_syser();
  ::NFMsg::Ident* mutable_syser();
  void set_allocated_syser(::NFMsg::Ident* syser);

  // .NFMsg.ReqAckSynData.SynType syn_type = 4;
  void clear_syn_type();
  static const int kSynTypeFieldNumber = 4;
  ::NFMsg::ReqAckSynData_SynType syn_type() const;
  void set_syn_type(::NFMsg::ReqAckSynData_SynType value);

  // .NFMsg.ESynMsgID msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  ::NFMsg::ESynMsgID msg_id() const;
  void set_msg_id(::NFMsg::ESynMsgID value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckSynData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident > object_list_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::NFMsg::Ident* syser_;
  int syn_type_;
  int msg_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckPlayerMove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckPlayerMove) */ {
 public:
  ReqAckPlayerMove();
  virtual ~ReqAckPlayerMove();

  ReqAckPlayerMove(const ReqAckPlayerMove& from);

  inline ReqAckPlayerMove& operator=(const ReqAckPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckPlayerMove(ReqAckPlayerMove&& from) noexcept
    : ReqAckPlayerMove() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerMove& operator=(ReqAckPlayerMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckPlayerMove* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerMove*>(
               &_ReqAckPlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ReqAckPlayerMove* other);
  friend void swap(ReqAckPlayerMove& a, ReqAckPlayerMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerMove* New() const final {
    return CreateMaybeMessage<ReqAckPlayerMove>(NULL);
  }

  ReqAckPlayerMove* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckPlayerMove>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckPlayerMove& from);
  void MergeFrom(const ReqAckPlayerMove& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerMove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.Vector3 target_pos = 6;
  int target_pos_size() const;
  void clear_target_pos();
  static const int kTargetPosFieldNumber = 6;
  ::NFMsg::Vector3* mutable_target_pos(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >*
      mutable_target_pos();
  const ::NFMsg::Vector3& target_pos(int index) const;
  ::NFMsg::Vector3* add_target_pos();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >&
      target_pos() const;

  // repeated .NFMsg.Vector3 source_pos = 7;
  int source_pos_size() const;
  void clear_source_pos();
  static const int kSourcePosFieldNumber = 7;
  ::NFMsg::Vector3* mutable_source_pos(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >*
      mutable_source_pos();
  const ::NFMsg::Vector3& source_pos(int index) const;
  ::NFMsg::Vector3* add_source_pos();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >&
      source_pos() const;

  // repeated .NFMsg.Vector3 move_direction = 8;
  int move_direction_size() const;
  void clear_move_direction();
  static const int kMoveDirectionFieldNumber = 8;
  ::NFMsg::Vector3* mutable_move_direction(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >*
      mutable_move_direction();
  const ::NFMsg::Vector3& move_direction(int index) const;
  ::NFMsg::Vector3* add_move_direction();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >&
      move_direction() const;

  // .NFMsg.Ident mover = 1;
  bool has_mover() const;
  void clear_mover();
  static const int kMoverFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_mover() const;
  public:
  const ::NFMsg::Ident& mover() const;
  ::NFMsg::Ident* release_mover();
  ::NFMsg::Ident* mutable_mover();
  void set_allocated_mover(::NFMsg::Ident* mover);

  // int32 moveType = 2;
  void clear_movetype();
  static const int kMoveTypeFieldNumber = 2;
  ::google::protobuf::int32 movetype() const;
  void set_movetype(::google::protobuf::int32 value);

  // float speed = 3;
  void clear_speed();
  static const int kSpeedFieldNumber = 3;
  float speed() const;
  void set_speed(float value);

  // int32 time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // int32 lastState = 5;
  void clear_laststate();
  static const int kLastStateFieldNumber = 5;
  ::google::protobuf::int32 laststate() const;
  void set_laststate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerMove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 > target_pos_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 > source_pos_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 > move_direction_;
  ::NFMsg::Ident* mover_;
  ::google::protobuf::int32 movetype_;
  float speed_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 laststate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckPlayerChat_ChatContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckPlayerChat.ChatContainer) */ {
 public:
  ReqAckPlayerChat_ChatContainer();
  virtual ~ReqAckPlayerChat_ChatContainer();

  ReqAckPlayerChat_ChatContainer(const ReqAckPlayerChat_ChatContainer& from);

  inline ReqAckPlayerChat_ChatContainer& operator=(const ReqAckPlayerChat_ChatContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckPlayerChat_ChatContainer(ReqAckPlayerChat_ChatContainer&& from) noexcept
    : ReqAckPlayerChat_ChatContainer() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerChat_ChatContainer& operator=(ReqAckPlayerChat_ChatContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerChat_ChatContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckPlayerChat_ChatContainer* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerChat_ChatContainer*>(
               &_ReqAckPlayerChat_ChatContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ReqAckPlayerChat_ChatContainer* other);
  friend void swap(ReqAckPlayerChat_ChatContainer& a, ReqAckPlayerChat_ChatContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerChat_ChatContainer* New() const final {
    return CreateMaybeMessage<ReqAckPlayerChat_ChatContainer>(NULL);
  }

  ReqAckPlayerChat_ChatContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckPlayerChat_ChatContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckPlayerChat_ChatContainer& from);
  void MergeFrom(const ReqAckPlayerChat_ChatContainer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerChat_ChatContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqAckPlayerChat_ChatContainer_ContainerType ContainerType;
  static const ContainerType EGCT_UNKNOW =
    ReqAckPlayerChat_ChatContainer_ContainerType_EGCT_UNKNOW;
  static const ContainerType EGCT_ITEM =
    ReqAckPlayerChat_ChatContainer_ContainerType_EGCT_ITEM;
  static inline bool ContainerType_IsValid(int value) {
    return ReqAckPlayerChat_ChatContainer_ContainerType_IsValid(value);
  }
  static const ContainerType ContainerType_MIN =
    ReqAckPlayerChat_ChatContainer_ContainerType_ContainerType_MIN;
  static const ContainerType ContainerType_MAX =
    ReqAckPlayerChat_ChatContainer_ContainerType_ContainerType_MAX;
  static const int ContainerType_ARRAYSIZE =
    ReqAckPlayerChat_ChatContainer_ContainerType_ContainerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContainerType_descriptor() {
    return ReqAckPlayerChat_ChatContainer_ContainerType_descriptor();
  }
  static inline const ::std::string& ContainerType_Name(ContainerType value) {
    return ReqAckPlayerChat_ChatContainer_ContainerType_Name(value);
  }
  static inline bool ContainerType_Parse(const ::std::string& name,
      ContainerType* value) {
    return ReqAckPlayerChat_ChatContainer_ContainerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data_info = 3;
  void clear_data_info();
  static const int kDataInfoFieldNumber = 3;
  const ::std::string& data_info() const;
  void set_data_info(const ::std::string& value);
  #if LANG_CXX11
  void set_data_info(::std::string&& value);
  #endif
  void set_data_info(const char* value);
  void set_data_info(const void* value, size_t size);
  ::std::string* mutable_data_info();
  ::std::string* release_data_info();
  void set_allocated_data_info(::std::string* data_info);

  // int32 ConTainerType = 2;
  void clear_containertype();
  static const int kConTainerTypeFieldNumber = 2;
  ::google::protobuf::int32 containertype() const;
  void set_containertype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerChat.ChatContainer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_info_;
  ::google::protobuf::int32 containertype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckPlayerChat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckPlayerChat) */ {
 public:
  ReqAckPlayerChat();
  virtual ~ReqAckPlayerChat();

  ReqAckPlayerChat(const ReqAckPlayerChat& from);

  inline ReqAckPlayerChat& operator=(const ReqAckPlayerChat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckPlayerChat(ReqAckPlayerChat&& from) noexcept
    : ReqAckPlayerChat() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerChat& operator=(ReqAckPlayerChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckPlayerChat* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerChat*>(
               &_ReqAckPlayerChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ReqAckPlayerChat* other);
  friend void swap(ReqAckPlayerChat& a, ReqAckPlayerChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerChat* New() const final {
    return CreateMaybeMessage<ReqAckPlayerChat>(NULL);
  }

  ReqAckPlayerChat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckPlayerChat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckPlayerChat& from);
  void MergeFrom(const ReqAckPlayerChat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqAckPlayerChat_ChatContainer ChatContainer;

  typedef ReqAckPlayerChat_EGameChatType EGameChatType;
  static const EGameChatType EGCT_CLAN =
    ReqAckPlayerChat_EGameChatType_EGCT_CLAN;
  static const EGameChatType EGCT_PRIVATE =
    ReqAckPlayerChat_EGameChatType_EGCT_PRIVATE;
  static const EGameChatType EGCT_TEAM =
    ReqAckPlayerChat_EGameChatType_EGCT_TEAM;
  static const EGameChatType EGCT_WORLD =
    ReqAckPlayerChat_EGameChatType_EGCT_WORLD;
  static inline bool EGameChatType_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatType_IsValid(value);
  }
  static const EGameChatType EGameChatType_MIN =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MIN;
  static const EGameChatType EGameChatType_MAX =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MAX;
  static const int EGameChatType_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameChatType_descriptor() {
    return ReqAckPlayerChat_EGameChatType_descriptor();
  }
  static inline const ::std::string& EGameChatType_Name(EGameChatType value) {
    return ReqAckPlayerChat_EGameChatType_Name(value);
  }
  static inline bool EGameChatType_Parse(const ::std::string& name,
      EGameChatType* value) {
    return ReqAckPlayerChat_EGameChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFMsg.ReqAckPlayerChat.ChatContainer Container_data = 6;
  int container_data_size() const;
  void clear_container_data();
  static const int kContainerDataFieldNumber = 6;
  ::NFMsg::ReqAckPlayerChat_ChatContainer* mutable_container_data(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAckPlayerChat_ChatContainer >*
      mutable_container_data();
  const ::NFMsg::ReqAckPlayerChat_ChatContainer& container_data(int index) const;
  ::NFMsg::ReqAckPlayerChat_ChatContainer* add_container_data();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAckPlayerChat_ChatContainer >&
      container_data() const;

  // bytes chat_info = 3;
  void clear_chat_info();
  static const int kChatInfoFieldNumber = 3;
  const ::std::string& chat_info() const;
  void set_chat_info(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_info(::std::string&& value);
  #endif
  void set_chat_info(const char* value);
  void set_chat_info(const void* value, size_t size);
  ::std::string* mutable_chat_info();
  ::std::string* release_chat_info();
  void set_allocated_chat_info(::std::string* chat_info);

  // bytes chat_name = 4;
  void clear_chat_name();
  static const int kChatNameFieldNumber = 4;
  const ::std::string& chat_name() const;
  void set_chat_name(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_name(::std::string&& value);
  #endif
  void set_chat_name(const char* value);
  void set_chat_name(const void* value, size_t size);
  ::std::string* mutable_chat_name();
  ::std::string* release_chat_name();
  void set_allocated_chat_name(::std::string* chat_name);

  // .NFMsg.Ident chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_chat_id() const;
  public:
  const ::NFMsg::Ident& chat_id() const;
  ::NFMsg::Ident* release_chat_id();
  ::NFMsg::Ident* mutable_chat_id();
  void set_allocated_chat_id(::NFMsg::Ident* chat_id);

  // .NFMsg.Ident target_id = 5;
  bool has_target_id() const;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 5;
  private:
  const ::NFMsg::Ident& _internal_target_id() const;
  public:
  const ::NFMsg::Ident& target_id() const;
  ::NFMsg::Ident* release_target_id();
  ::NFMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::NFMsg::Ident* target_id);

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  void clear_chat_type();
  static const int kChatTypeFieldNumber = 2;
  ::NFMsg::ReqAckPlayerChat_EGameChatType chat_type() const;
  void set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerChat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAckPlayerChat_ChatContainer > container_data_;
  ::google::protobuf::internal::ArenaStringPtr chat_info_;
  ::google::protobuf::internal::ArenaStringPtr chat_name_;
  ::NFMsg::Ident* chat_id_;
  ::NFMsg::Ident* target_id_;
  int chat_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckPlayerPosSync : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckPlayerPosSync) */ {
 public:
  ReqAckPlayerPosSync();
  virtual ~ReqAckPlayerPosSync();

  ReqAckPlayerPosSync(const ReqAckPlayerPosSync& from);

  inline ReqAckPlayerPosSync& operator=(const ReqAckPlayerPosSync& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckPlayerPosSync(ReqAckPlayerPosSync&& from) noexcept
    : ReqAckPlayerPosSync() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerPosSync& operator=(ReqAckPlayerPosSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerPosSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckPlayerPosSync* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerPosSync*>(
               &_ReqAckPlayerPosSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ReqAckPlayerPosSync* other);
  friend void swap(ReqAckPlayerPosSync& a, ReqAckPlayerPosSync& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerPosSync* New() const final {
    return CreateMaybeMessage<ReqAckPlayerPosSync>(NULL);
  }

  ReqAckPlayerPosSync* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckPlayerPosSync>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckPlayerPosSync& from);
  void MergeFrom(const ReqAckPlayerPosSync& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerPosSync* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident mover = 1;
  bool has_mover() const;
  void clear_mover();
  static const int kMoverFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_mover() const;
  public:
  const ::NFMsg::Ident& mover() const;
  ::NFMsg::Ident* release_mover();
  ::NFMsg::Ident* mutable_mover();
  void set_allocated_mover(::NFMsg::Ident* mover);

  // .NFMsg.Vector3 position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  private:
  const ::NFMsg::Vector3& _internal_position() const;
  public:
  const ::NFMsg::Vector3& position() const;
  ::NFMsg::Vector3* release_position();
  ::NFMsg::Vector3* mutable_position();
  void set_allocated_position(::NFMsg::Vector3* position);

  // .NFMsg.Vector3 direction = 5;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 5;
  private:
  const ::NFMsg::Vector3& _internal_direction() const;
  public:
  const ::NFMsg::Vector3& direction() const;
  ::NFMsg::Vector3* release_direction();
  ::NFMsg::Vector3* mutable_direction();
  void set_allocated_direction(::NFMsg::Vector3* direction);

  // int32 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // float InterpolationTime = 3;
  void clear_interpolationtime();
  static const int kInterpolationTimeFieldNumber = 3;
  float interpolationtime() const;
  void set_interpolationtime(float value);

  // int32 status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // int32 frame = 7;
  void clear_frame();
  static const int kFrameFieldNumber = 7;
  ::google::protobuf::int32 frame() const;
  void set_frame(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerPosSync)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* mover_;
  ::NFMsg::Vector3* position_;
  ::NFMsg::Vector3* direction_;
  ::google::protobuf::int32 time_;
  float interpolationtime_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 frame_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT EffectData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.EffectData) */ {
 public:
  EffectData();
  virtual ~EffectData();

  EffectData(const EffectData& from);

  inline EffectData& operator=(const EffectData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EffectData(EffectData&& from) noexcept
    : EffectData() {
    *this = ::std::move(from);
  }

  inline EffectData& operator=(EffectData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EffectData* internal_default_instance() {
    return reinterpret_cast<const EffectData*>(
               &_EffectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(EffectData* other);
  friend void swap(EffectData& a, EffectData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EffectData* New() const final {
    return CreateMaybeMessage<EffectData>(NULL);
  }

  EffectData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EffectData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EffectData& from);
  void MergeFrom(const EffectData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EffectData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EffectData_EResultType EResultType;
  static const EResultType EET_FAIL =
    EffectData_EResultType_EET_FAIL;
  static const EResultType EET_SUCCESS =
    EffectData_EResultType_EET_SUCCESS;
  static const EResultType EET_REFUSE =
    EffectData_EResultType_EET_REFUSE;
  static const EResultType EET_MISS =
    EffectData_EResultType_EET_MISS;
  static const EResultType EET_CRIT =
    EffectData_EResultType_EET_CRIT;
  static inline bool EResultType_IsValid(int value) {
    return EffectData_EResultType_IsValid(value);
  }
  static const EResultType EResultType_MIN =
    EffectData_EResultType_EResultType_MIN;
  static const EResultType EResultType_MAX =
    EffectData_EResultType_EResultType_MAX;
  static const int EResultType_ARRAYSIZE =
    EffectData_EResultType_EResultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResultType_descriptor() {
    return EffectData_EResultType_descriptor();
  }
  static inline const ::std::string& EResultType_Name(EResultType value) {
    return EffectData_EResultType_Name(value);
  }
  static inline bool EResultType_Parse(const ::std::string& name,
      EResultType* value) {
    return EffectData_EResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .NFMsg.Ident effect_ident = 1;
  bool has_effect_ident() const;
  void clear_effect_ident();
  static const int kEffectIdentFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_effect_ident() const;
  public:
  const ::NFMsg::Ident& effect_ident() const;
  ::NFMsg::Ident* release_effect_ident();
  ::NFMsg::Ident* mutable_effect_ident();
  void set_allocated_effect_ident(::NFMsg::Ident* effect_ident);

  // int32 effect_value = 2;
  void clear_effect_value();
  static const int kEffectValueFieldNumber = 2;
  ::google::protobuf::int32 effect_value() const;
  void set_effect_value(::google::protobuf::int32 value);

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  void clear_effect_rlt();
  static const int kEffectRltFieldNumber = 3;
  ::NFMsg::EffectData_EResultType effect_rlt() const;
  void set_effect_rlt(::NFMsg::EffectData_EResultType value);

  // @@protoc_insertion_point(class_scope:NFMsg.EffectData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* effect_ident_;
  ::google::protobuf::int32 effect_value_;
  int effect_rlt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckUseSkill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckUseSkill) */ {
 public:
  ReqAckUseSkill();
  virtual ~ReqAckUseSkill();

  ReqAckUseSkill(const ReqAckUseSkill& from);

  inline ReqAckUseSkill& operator=(const ReqAckUseSkill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckUseSkill(ReqAckUseSkill&& from) noexcept
    : ReqAckUseSkill() {
    *this = ::std::move(from);
  }

  inline ReqAckUseSkill& operator=(ReqAckUseSkill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckUseSkill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckUseSkill* internal_default_instance() {
    return reinterpret_cast<const ReqAckUseSkill*>(
               &_ReqAckUseSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ReqAckUseSkill* other);
  friend void swap(ReqAckUseSkill& a, ReqAckUseSkill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckUseSkill* New() const final {
    return CreateMaybeMessage<ReqAckUseSkill>(NULL);
  }

  ReqAckUseSkill* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckUseSkill>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckUseSkill& from);
  void MergeFrom(const ReqAckUseSkill& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckUseSkill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.EffectData effect_data = 4;
  int effect_data_size() const;
  void clear_effect_data();
  static const int kEffectDataFieldNumber = 4;
  ::NFMsg::EffectData* mutable_effect_data(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::EffectData >*
      mutable_effect_data();
  const ::NFMsg::EffectData& effect_data(int index) const;
  ::NFMsg::EffectData* add_effect_data();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::EffectData >&
      effect_data() const;

  // bytes skill_id = 2;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  const ::std::string& skill_id() const;
  void set_skill_id(const ::std::string& value);
  #if LANG_CXX11
  void set_skill_id(::std::string&& value);
  #endif
  void set_skill_id(const char* value);
  void set_skill_id(const void* value, size_t size);
  ::std::string* mutable_skill_id();
  ::std::string* release_skill_id();
  void set_allocated_skill_id(::std::string* skill_id);

  // .NFMsg.Ident user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_user() const;
  public:
  const ::NFMsg::Ident& user() const;
  ::NFMsg::Ident* release_user();
  ::NFMsg::Ident* mutable_user();
  void set_allocated_user(::NFMsg::Ident* user);

  // int32 use_index = 3;
  void clear_use_index();
  static const int kUseIndexFieldNumber = 3;
  ::google::protobuf::int32 use_index() const;
  void set_use_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckUseSkill)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::EffectData > effect_data_;
  ::google::protobuf::internal::ArenaStringPtr skill_id_;
  ::NFMsg::Ident* user_;
  ::google::protobuf::int32 use_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckUseItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckUseItem) */ {
 public:
  ReqAckUseItem();
  virtual ~ReqAckUseItem();

  ReqAckUseItem(const ReqAckUseItem& from);

  inline ReqAckUseItem& operator=(const ReqAckUseItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckUseItem(ReqAckUseItem&& from) noexcept
    : ReqAckUseItem() {
    *this = ::std::move(from);
  }

  inline ReqAckUseItem& operator=(ReqAckUseItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckUseItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckUseItem* internal_default_instance() {
    return reinterpret_cast<const ReqAckUseItem*>(
               &_ReqAckUseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ReqAckUseItem* other);
  friend void swap(ReqAckUseItem& a, ReqAckUseItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckUseItem* New() const final {
    return CreateMaybeMessage<ReqAckUseItem>(NULL);
  }

  ReqAckUseItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckUseItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckUseItem& from);
  void MergeFrom(const ReqAckUseItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckUseItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.EffectData effect_data = 3;
  int effect_data_size() const;
  void clear_effect_data();
  static const int kEffectDataFieldNumber = 3;
  ::NFMsg::EffectData* mutable_effect_data(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::EffectData >*
      mutable_effect_data();
  const ::NFMsg::EffectData& effect_data(int index) const;
  ::NFMsg::EffectData* add_effect_data();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::EffectData >&
      effect_data() const;

  // .NFMsg.Ident user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_user() const;
  public:
  const ::NFMsg::Ident& user() const;
  ::NFMsg::Ident* release_user();
  ::NFMsg::Ident* mutable_user();
  void set_allocated_user(::NFMsg::Ident* user);

  // .NFMsg.Ident item_guid = 2;
  bool has_item_guid() const;
  void clear_item_guid();
  static const int kItemGuidFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_item_guid() const;
  public:
  const ::NFMsg::Ident& item_guid() const;
  ::NFMsg::Ident* release_item_guid();
  ::NFMsg::Ident* mutable_item_guid();
  void set_allocated_item_guid(::NFMsg::Ident* item_guid);

  // .NFMsg.ItemStruct item = 4;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 4;
  private:
  const ::NFMsg::ItemStruct& _internal_item() const;
  public:
  const ::NFMsg::ItemStruct& item() const;
  ::NFMsg::ItemStruct* release_item();
  ::NFMsg::ItemStruct* mutable_item();
  void set_allocated_item(::NFMsg::ItemStruct* item);

  // .NFMsg.Ident targetid = 5;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetidFieldNumber = 5;
  private:
  const ::NFMsg::Ident& _internal_targetid() const;
  public:
  const ::NFMsg::Ident& targetid() const;
  ::NFMsg::Ident* release_targetid();
  ::NFMsg::Ident* mutable_targetid();
  void set_allocated_targetid(::NFMsg::Ident* targetid);

  // .NFMsg.Vector3 position = 6;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 6;
  private:
  const ::NFMsg::Vector3& _internal_position() const;
  public:
  const ::NFMsg::Vector3& position() const;
  ::NFMsg::Vector3* release_position();
  ::NFMsg::Vector3* mutable_position();
  void set_allocated_position(::NFMsg::Vector3* position);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckUseItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::EffectData > effect_data_;
  ::NFMsg::Ident* user_;
  ::NFMsg::Ident* item_guid_;
  ::NFMsg::ItemStruct* item_;
  ::NFMsg::Ident* targetid_;
  ::NFMsg::Vector3* position_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckSwapScene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckSwapScene) */ {
 public:
  ReqAckSwapScene();
  virtual ~ReqAckSwapScene();

  ReqAckSwapScene(const ReqAckSwapScene& from);

  inline ReqAckSwapScene& operator=(const ReqAckSwapScene& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckSwapScene(ReqAckSwapScene&& from) noexcept
    : ReqAckSwapScene() {
    *this = ::std::move(from);
  }

  inline ReqAckSwapScene& operator=(ReqAckSwapScene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckSwapScene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckSwapScene* internal_default_instance() {
    return reinterpret_cast<const ReqAckSwapScene*>(
               &_ReqAckSwapScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ReqAckSwapScene* other);
  friend void swap(ReqAckSwapScene& a, ReqAckSwapScene& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckSwapScene* New() const final {
    return CreateMaybeMessage<ReqAckSwapScene>(NULL);
  }

  ReqAckSwapScene* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckSwapScene>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckSwapScene& from);
  void MergeFrom(const ReqAckSwapScene& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckSwapScene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqAckSwapScene_EGameSwapType EGameSwapType;
  static const EGameSwapType EGST_NARMAL =
    ReqAckSwapScene_EGameSwapType_EGST_NARMAL;
  static const EGameSwapType EGST_CLONE =
    ReqAckSwapScene_EGameSwapType_EGST_CLONE;
  static const EGameSwapType EGST_ARENA =
    ReqAckSwapScene_EGameSwapType_EGST_ARENA;
  static const EGameSwapType EGST_MIRROR =
    ReqAckSwapScene_EGameSwapType_EGST_MIRROR;
  static inline bool EGameSwapType_IsValid(int value) {
    return ReqAckSwapScene_EGameSwapType_IsValid(value);
  }
  static const EGameSwapType EGameSwapType_MIN =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_MIN;
  static const EGameSwapType EGameSwapType_MAX =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX;
  static const int EGameSwapType_ARRAYSIZE =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameSwapType_descriptor() {
    return ReqAckSwapScene_EGameSwapType_descriptor();
  }
  static inline const ::std::string& EGameSwapType_Name(EGameSwapType value) {
    return ReqAckSwapScene_EGameSwapType_Name(value);
  }
  static inline bool EGameSwapType_Parse(const ::std::string& name,
      EGameSwapType* value) {
    return ReqAckSwapScene_EGameSwapType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data = 7;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  void clear_transfer_type();
  static const int kTransferTypeFieldNumber = 1;
  ::NFMsg::ReqAckSwapScene_EGameSwapType transfer_type() const;
  void set_transfer_type(::NFMsg::ReqAckSwapScene_EGameSwapType value);

  // int32 scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  ::google::protobuf::int32 scene_id() const;
  void set_scene_id(::google::protobuf::int32 value);

  // int32 line_id = 3;
  void clear_line_id();
  static const int kLineIdFieldNumber = 3;
  ::google::protobuf::int32 line_id() const;
  void set_line_id(::google::protobuf::int32 value);

  // float x = 4;
  void clear_x();
  static const int kXFieldNumber = 4;
  float x() const;
  void set_x(float value);

  // float y = 5;
  void clear_y();
  static const int kYFieldNumber = 5;
  float y() const;
  void set_y(float value);

  // float z = 6;
  void clear_z();
  static const int kZFieldNumber = 6;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckSwapScene)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int transfer_type_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 line_id_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckHomeScene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckHomeScene) */ {
 public:
  ReqAckHomeScene();
  virtual ~ReqAckHomeScene();

  ReqAckHomeScene(const ReqAckHomeScene& from);

  inline ReqAckHomeScene& operator=(const ReqAckHomeScene& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckHomeScene(ReqAckHomeScene&& from) noexcept
    : ReqAckHomeScene() {
    *this = ::std::move(from);
  }

  inline ReqAckHomeScene& operator=(ReqAckHomeScene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckHomeScene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckHomeScene* internal_default_instance() {
    return reinterpret_cast<const ReqAckHomeScene*>(
               &_ReqAckHomeScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ReqAckHomeScene* other);
  friend void swap(ReqAckHomeScene& a, ReqAckHomeScene& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckHomeScene* New() const final {
    return CreateMaybeMessage<ReqAckHomeScene>(NULL);
  }

  ReqAckHomeScene* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckHomeScene>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckHomeScene& from);
  void MergeFrom(const ReqAckHomeScene& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckHomeScene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckHomeScene)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ItemStruct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ItemStruct) */ {
 public:
  ItemStruct();
  virtual ~ItemStruct();

  ItemStruct(const ItemStruct& from);

  inline ItemStruct& operator=(const ItemStruct& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemStruct(ItemStruct&& from) noexcept
    : ItemStruct() {
    *this = ::std::move(from);
  }

  inline ItemStruct& operator=(ItemStruct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemStruct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemStruct* internal_default_instance() {
    return reinterpret_cast<const ItemStruct*>(
               &_ItemStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ItemStruct* other);
  friend void swap(ItemStruct& a, ItemStruct& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemStruct* New() const final {
    return CreateMaybeMessage<ItemStruct>(NULL);
  }

  ItemStruct* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ItemStruct>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ItemStruct& from);
  void MergeFrom(const ItemStruct& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemStruct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes item_id = 1;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  #if LANG_CXX11
  void set_item_id(::std::string&& value);
  #endif
  void set_item_id(const char* value);
  void set_item_id(const void* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // int32 item_count = 2;
  void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  ::google::protobuf::int32 item_count() const;
  void set_item_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ItemStruct)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  ::google::protobuf::int32 item_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT CurrencyStruct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.CurrencyStruct) */ {
 public:
  CurrencyStruct();
  virtual ~CurrencyStruct();

  CurrencyStruct(const CurrencyStruct& from);

  inline CurrencyStruct& operator=(const CurrencyStruct& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CurrencyStruct(CurrencyStruct&& from) noexcept
    : CurrencyStruct() {
    *this = ::std::move(from);
  }

  inline CurrencyStruct& operator=(CurrencyStruct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrencyStruct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrencyStruct* internal_default_instance() {
    return reinterpret_cast<const CurrencyStruct*>(
               &_CurrencyStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CurrencyStruct* other);
  friend void swap(CurrencyStruct& a, CurrencyStruct& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CurrencyStruct* New() const final {
    return CreateMaybeMessage<CurrencyStruct>(NULL);
  }

  CurrencyStruct* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CurrencyStruct>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CurrencyStruct& from);
  void MergeFrom(const CurrencyStruct& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrencyStruct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 currency_type = 1;
  void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 1;
  ::google::protobuf::int32 currency_type() const;
  void set_currency_type(::google::protobuf::int32 value);

  // int32 currency_count = 2;
  void clear_currency_count();
  static const int kCurrencyCountFieldNumber = 2;
  ::google::protobuf::int32 currency_count() const;
  void set_currency_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.CurrencyStruct)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 currency_type_;
  ::google::protobuf::int32 currency_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckReliveHero : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckReliveHero) */ {
 public:
  ReqAckReliveHero();
  virtual ~ReqAckReliveHero();

  ReqAckReliveHero(const ReqAckReliveHero& from);

  inline ReqAckReliveHero& operator=(const ReqAckReliveHero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckReliveHero(ReqAckReliveHero&& from) noexcept
    : ReqAckReliveHero() {
    *this = ::std::move(from);
  }

  inline ReqAckReliveHero& operator=(ReqAckReliveHero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckReliveHero& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckReliveHero* internal_default_instance() {
    return reinterpret_cast<const ReqAckReliveHero*>(
               &_ReqAckReliveHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ReqAckReliveHero* other);
  friend void swap(ReqAckReliveHero& a, ReqAckReliveHero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckReliveHero* New() const final {
    return CreateMaybeMessage<ReqAckReliveHero>(NULL);
  }

  ReqAckReliveHero* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckReliveHero>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckReliveHero& from);
  void MergeFrom(const ReqAckReliveHero& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckReliveHero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_hero_id() const;
  public:
  const ::NFMsg::Ident& hero_id() const;
  ::NFMsg::Ident* release_hero_id();
  ::NFMsg::Ident* mutable_hero_id();
  void set_allocated_hero_id(::NFMsg::Ident* hero_id);

  // int32 diamond = 1;
  void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  ::google::protobuf::int32 diamond() const;
  void set_diamond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckReliveHero)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* hero_id_;
  ::google::protobuf::int32 diamond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqPickDropItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqPickDropItem) */ {
 public:
  ReqPickDropItem();
  virtual ~ReqPickDropItem();

  ReqPickDropItem(const ReqPickDropItem& from);

  inline ReqPickDropItem& operator=(const ReqPickDropItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqPickDropItem(ReqPickDropItem&& from) noexcept
    : ReqPickDropItem() {
    *this = ::std::move(from);
  }

  inline ReqPickDropItem& operator=(ReqPickDropItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPickDropItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqPickDropItem* internal_default_instance() {
    return reinterpret_cast<const ReqPickDropItem*>(
               &_ReqPickDropItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ReqPickDropItem* other);
  friend void swap(ReqPickDropItem& a, ReqPickDropItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqPickDropItem* New() const final {
    return CreateMaybeMessage<ReqPickDropItem>(NULL);
  }

  ReqPickDropItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqPickDropItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqPickDropItem& from);
  void MergeFrom(const ReqPickDropItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqPickDropItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident item_guid = 2;
  bool has_item_guid() const;
  void clear_item_guid();
  static const int kItemGuidFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_item_guid() const;
  public:
  const ::NFMsg::Ident& item_guid() const;
  ::NFMsg::Ident* release_item_guid();
  ::NFMsg::Ident* mutable_item_guid();
  void set_allocated_item_guid(::NFMsg::Ident* item_guid);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqPickDropItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* item_guid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAcceptTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAcceptTask) */ {
 public:
  ReqAcceptTask();
  virtual ~ReqAcceptTask();

  ReqAcceptTask(const ReqAcceptTask& from);

  inline ReqAcceptTask& operator=(const ReqAcceptTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAcceptTask(ReqAcceptTask&& from) noexcept
    : ReqAcceptTask() {
    *this = ::std::move(from);
  }

  inline ReqAcceptTask& operator=(ReqAcceptTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAcceptTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAcceptTask* internal_default_instance() {
    return reinterpret_cast<const ReqAcceptTask*>(
               &_ReqAcceptTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ReqAcceptTask* other);
  friend void swap(ReqAcceptTask& a, ReqAcceptTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAcceptTask* New() const final {
    return CreateMaybeMessage<ReqAcceptTask>(NULL);
  }

  ReqAcceptTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAcceptTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAcceptTask& from);
  void MergeFrom(const ReqAcceptTask& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAcceptTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::std::string& task_id() const;
  void set_task_id(const ::std::string& value);
  #if LANG_CXX11
  void set_task_id(::std::string&& value);
  #endif
  void set_task_id(const char* value);
  void set_task_id(const void* value, size_t size);
  ::std::string* mutable_task_id();
  ::std::string* release_task_id();
  void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAcceptTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr task_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqCompeleteTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqCompeleteTask) */ {
 public:
  ReqCompeleteTask();
  virtual ~ReqCompeleteTask();

  ReqCompeleteTask(const ReqCompeleteTask& from);

  inline ReqCompeleteTask& operator=(const ReqCompeleteTask& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqCompeleteTask(ReqCompeleteTask&& from) noexcept
    : ReqCompeleteTask() {
    *this = ::std::move(from);
  }

  inline ReqCompeleteTask& operator=(ReqCompeleteTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCompeleteTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCompeleteTask* internal_default_instance() {
    return reinterpret_cast<const ReqCompeleteTask*>(
               &_ReqCompeleteTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ReqCompeleteTask* other);
  friend void swap(ReqCompeleteTask& a, ReqCompeleteTask& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCompeleteTask* New() const final {
    return CreateMaybeMessage<ReqCompeleteTask>(NULL);
  }

  ReqCompeleteTask* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqCompeleteTask>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqCompeleteTask& from);
  void MergeFrom(const ReqCompeleteTask& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCompeleteTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::std::string& task_id() const;
  void set_task_id(const ::std::string& value);
  #if LANG_CXX11
  void set_task_id(::std::string&& value);
  #endif
  void set_task_id(const char* value);
  void set_task_id(const void* value, size_t size);
  ::std::string* mutable_task_id();
  ::std::string* release_task_id();
  void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqCompeleteTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr task_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAddSceneBuilding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAddSceneBuilding) */ {
 public:
  ReqAddSceneBuilding();
  virtual ~ReqAddSceneBuilding();

  ReqAddSceneBuilding(const ReqAddSceneBuilding& from);

  inline ReqAddSceneBuilding& operator=(const ReqAddSceneBuilding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAddSceneBuilding(ReqAddSceneBuilding&& from) noexcept
    : ReqAddSceneBuilding() {
    *this = ::std::move(from);
  }

  inline ReqAddSceneBuilding& operator=(ReqAddSceneBuilding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAddSceneBuilding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAddSceneBuilding* internal_default_instance() {
    return reinterpret_cast<const ReqAddSceneBuilding*>(
               &_ReqAddSceneBuilding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ReqAddSceneBuilding* other);
  friend void swap(ReqAddSceneBuilding& a, ReqAddSceneBuilding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAddSceneBuilding* New() const final {
    return CreateMaybeMessage<ReqAddSceneBuilding>(NULL);
  }

  ReqAddSceneBuilding* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAddSceneBuilding>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAddSceneBuilding& from);
  void MergeFrom(const ReqAddSceneBuilding& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAddSceneBuilding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes config_id = 4;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 4;
  const ::std::string& config_id() const;
  void set_config_id(const ::std::string& value);
  #if LANG_CXX11
  void set_config_id(::std::string&& value);
  #endif
  void set_config_id(const char* value);
  void set_config_id(const void* value, size_t size);
  ::std::string* mutable_config_id();
  ::std::string* release_config_id();
  void set_allocated_config_id(::std::string* config_id);

  // bytes master_name = 6;
  void clear_master_name();
  static const int kMasterNameFieldNumber = 6;
  const ::std::string& master_name() const;
  void set_master_name(const ::std::string& value);
  #if LANG_CXX11
  void set_master_name(::std::string&& value);
  #endif
  void set_master_name(const char* value);
  void set_master_name(const void* value, size_t size);
  ::std::string* mutable_master_name();
  ::std::string* release_master_name();
  void set_allocated_master_name(::std::string* master_name);

  // .NFMsg.Vector3 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  private:
  const ::NFMsg::Vector3& _internal_pos() const;
  public:
  const ::NFMsg::Vector3& pos() const;
  ::NFMsg::Vector3* release_pos();
  ::NFMsg::Vector3* mutable_pos();
  void set_allocated_pos(::NFMsg::Vector3* pos);

  // .NFMsg.Ident guid = 2;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_guid() const;
  public:
  const ::NFMsg::Ident& guid() const;
  ::NFMsg::Ident* release_guid();
  ::NFMsg::Ident* mutable_guid();
  void set_allocated_guid(::NFMsg::Ident* guid);

  // .NFMsg.Ident master = 3;
  bool has_master() const;
  void clear_master();
  static const int kMasterFieldNumber = 3;
  private:
  const ::NFMsg::Ident& _internal_master() const;
  public:
  const ::NFMsg::Ident& master() const;
  ::NFMsg::Ident* release_master();
  ::NFMsg::Ident* mutable_master();
  void set_allocated_master(::NFMsg::Ident* master);

  // int32 scene_id = 5;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 5;
  ::google::protobuf::int32 scene_id() const;
  void set_scene_id(::google::protobuf::int32 value);

  // int32 is_home_scene = 7;
  void clear_is_home_scene();
  static const int kIsHomeSceneFieldNumber = 7;
  ::google::protobuf::int32 is_home_scene() const;
  void set_is_home_scene(::google::protobuf::int32 value);

  // int32 is_building = 8;
  void clear_is_building();
  static const int kIsBuildingFieldNumber = 8;
  ::google::protobuf::int32 is_building() const;
  void set_is_building(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAddSceneBuilding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr config_id_;
  ::google::protobuf::internal::ArenaStringPtr master_name_;
  ::NFMsg::Vector3* pos_;
  ::NFMsg::Ident* guid_;
  ::NFMsg::Ident* master_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 is_home_scene_;
  ::google::protobuf::int32 is_building_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSceneBuildings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqSceneBuildings) */ {
 public:
  ReqSceneBuildings();
  virtual ~ReqSceneBuildings();

  ReqSceneBuildings(const ReqSceneBuildings& from);

  inline ReqSceneBuildings& operator=(const ReqSceneBuildings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSceneBuildings(ReqSceneBuildings&& from) noexcept
    : ReqSceneBuildings() {
    *this = ::std::move(from);
  }

  inline ReqSceneBuildings& operator=(ReqSceneBuildings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSceneBuildings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSceneBuildings* internal_default_instance() {
    return reinterpret_cast<const ReqSceneBuildings*>(
               &_ReqSceneBuildings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ReqSceneBuildings* other);
  friend void swap(ReqSceneBuildings& a, ReqSceneBuildings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSceneBuildings* New() const final {
    return CreateMaybeMessage<ReqSceneBuildings>(NULL);
  }

  ReqSceneBuildings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqSceneBuildings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqSceneBuildings& from);
  void MergeFrom(const ReqSceneBuildings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSceneBuildings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Vector3 pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  private:
  const ::NFMsg::Vector3& _internal_pos() const;
  public:
  const ::NFMsg::Vector3& pos() const;
  ::NFMsg::Vector3* release_pos();
  ::NFMsg::Vector3* mutable_pos();
  void set_allocated_pos(::NFMsg::Vector3* pos);

  // int32 scene_id = 1;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  ::google::protobuf::int32 scene_id() const;
  void set_scene_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqSceneBuildings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Vector3* pos_;
  ::google::protobuf::int32 scene_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckSceneBuildings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckSceneBuildings) */ {
 public:
  AckSceneBuildings();
  virtual ~AckSceneBuildings();

  AckSceneBuildings(const AckSceneBuildings& from);

  inline AckSceneBuildings& operator=(const AckSceneBuildings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckSceneBuildings(AckSceneBuildings&& from) noexcept
    : AckSceneBuildings() {
    *this = ::std::move(from);
  }

  inline AckSceneBuildings& operator=(AckSceneBuildings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSceneBuildings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckSceneBuildings* internal_default_instance() {
    return reinterpret_cast<const AckSceneBuildings*>(
               &_AckSceneBuildings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(AckSceneBuildings* other);
  friend void swap(AckSceneBuildings& a, AckSceneBuildings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckSceneBuildings* New() const final {
    return CreateMaybeMessage<AckSceneBuildings>(NULL);
  }

  AckSceneBuildings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckSceneBuildings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckSceneBuildings& from);
  void MergeFrom(const AckSceneBuildings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSceneBuildings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 1;
  int buildings_size() const;
  void clear_buildings();
  static const int kBuildingsFieldNumber = 1;
  ::NFMsg::ReqAddSceneBuilding* mutable_buildings(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >*
      mutable_buildings();
  const ::NFMsg::ReqAddSceneBuilding& buildings(int index) const;
  ::NFMsg::ReqAddSceneBuilding* add_buildings();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >&
      buildings() const;

  // @@protoc_insertion_point(class_scope:NFMsg.AckSceneBuildings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding > buildings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqStoreSceneBuildings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqStoreSceneBuildings) */ {
 public:
  ReqStoreSceneBuildings();
  virtual ~ReqStoreSceneBuildings();

  ReqStoreSceneBuildings(const ReqStoreSceneBuildings& from);

  inline ReqStoreSceneBuildings& operator=(const ReqStoreSceneBuildings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqStoreSceneBuildings(ReqStoreSceneBuildings&& from) noexcept
    : ReqStoreSceneBuildings() {
    *this = ::std::move(from);
  }

  inline ReqStoreSceneBuildings& operator=(ReqStoreSceneBuildings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqStoreSceneBuildings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqStoreSceneBuildings* internal_default_instance() {
    return reinterpret_cast<const ReqStoreSceneBuildings*>(
               &_ReqStoreSceneBuildings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ReqStoreSceneBuildings* other);
  friend void swap(ReqStoreSceneBuildings& a, ReqStoreSceneBuildings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqStoreSceneBuildings* New() const final {
    return CreateMaybeMessage<ReqStoreSceneBuildings>(NULL);
  }

  ReqStoreSceneBuildings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqStoreSceneBuildings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqStoreSceneBuildings& from);
  void MergeFrom(const ReqStoreSceneBuildings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqStoreSceneBuildings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 3;
  int buildings_size() const;
  void clear_buildings();
  static const int kBuildingsFieldNumber = 3;
  ::NFMsg::ReqAddSceneBuilding* mutable_buildings(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >*
      mutable_buildings();
  const ::NFMsg::ReqAddSceneBuilding& buildings(int index) const;
  ::NFMsg::ReqAddSceneBuilding* add_buildings();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >&
      buildings() const;

  // .NFMsg.Ident guid = 1;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_guid() const;
  public:
  const ::NFMsg::Ident& guid() const;
  ::NFMsg::Ident* release_guid();
  ::NFMsg::Ident* mutable_guid();
  void set_allocated_guid(::NFMsg::Ident* guid);

  // int32 home_scene_id = 2;
  void clear_home_scene_id();
  static const int kHomeSceneIdFieldNumber = 2;
  ::google::protobuf::int32 home_scene_id() const;
  void set_home_scene_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqStoreSceneBuildings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding > buildings_;
  ::NFMsg::Ident* guid_;
  ::google::protobuf::int32 home_scene_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckCreateClan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckCreateClan) */ {
 public:
  ReqAckCreateClan();
  virtual ~ReqAckCreateClan();

  ReqAckCreateClan(const ReqAckCreateClan& from);

  inline ReqAckCreateClan& operator=(const ReqAckCreateClan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckCreateClan(ReqAckCreateClan&& from) noexcept
    : ReqAckCreateClan() {
    *this = ::std::move(from);
  }

  inline ReqAckCreateClan& operator=(ReqAckCreateClan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckCreateClan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckCreateClan* internal_default_instance() {
    return reinterpret_cast<const ReqAckCreateClan*>(
               &_ReqAckCreateClan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(ReqAckCreateClan* other);
  friend void swap(ReqAckCreateClan& a, ReqAckCreateClan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckCreateClan* New() const final {
    return CreateMaybeMessage<ReqAckCreateClan>(NULL);
  }

  ReqAckCreateClan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckCreateClan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckCreateClan& from);
  void MergeFrom(const ReqAckCreateClan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckCreateClan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes clan_name = 2;
  void clear_clan_name();
  static const int kClanNameFieldNumber = 2;
  const ::std::string& clan_name() const;
  void set_clan_name(const ::std::string& value);
  #if LANG_CXX11
  void set_clan_name(::std::string&& value);
  #endif
  void set_clan_name(const char* value);
  void set_clan_name(const void* value, size_t size);
  ::std::string* mutable_clan_name();
  ::std::string* release_clan_name();
  void set_allocated_clan_name(::std::string* clan_name);

  // .NFMsg.Ident clan_id = 1;
  bool has_clan_id() const;
  void clear_clan_id();
  static const int kClanIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_clan_id() const;
  public:
  const ::NFMsg::Ident& clan_id() const;
  ::NFMsg::Ident* release_clan_id();
  ::NFMsg::Ident* mutable_clan_id();
  void set_allocated_clan_id(::NFMsg::Ident* clan_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckCreateClan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clan_name_;
  ::NFMsg::Ident* clan_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSearchClan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqSearchClan) */ {
 public:
  ReqSearchClan();
  virtual ~ReqSearchClan();

  ReqSearchClan(const ReqSearchClan& from);

  inline ReqSearchClan& operator=(const ReqSearchClan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSearchClan(ReqSearchClan&& from) noexcept
    : ReqSearchClan() {
    *this = ::std::move(from);
  }

  inline ReqSearchClan& operator=(ReqSearchClan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSearchClan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSearchClan* internal_default_instance() {
    return reinterpret_cast<const ReqSearchClan*>(
               &_ReqSearchClan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(ReqSearchClan* other);
  friend void swap(ReqSearchClan& a, ReqSearchClan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSearchClan* New() const final {
    return CreateMaybeMessage<ReqSearchClan>(NULL);
  }

  ReqSearchClan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqSearchClan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqSearchClan& from);
  void MergeFrom(const ReqSearchClan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSearchClan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes clan_name = 1;
  void clear_clan_name();
  static const int kClanNameFieldNumber = 1;
  const ::std::string& clan_name() const;
  void set_clan_name(const ::std::string& value);
  #if LANG_CXX11
  void set_clan_name(::std::string&& value);
  #endif
  void set_clan_name(const char* value);
  void set_clan_name(const void* value, size_t size);
  ::std::string* mutable_clan_name();
  ::std::string* release_clan_name();
  void set_allocated_clan_name(::std::string* clan_name);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqSearchClan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clan_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckSearchClan_SearchClanObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckSearchClan.SearchClanObject) */ {
 public:
  AckSearchClan_SearchClanObject();
  virtual ~AckSearchClan_SearchClanObject();

  AckSearchClan_SearchClanObject(const AckSearchClan_SearchClanObject& from);

  inline AckSearchClan_SearchClanObject& operator=(const AckSearchClan_SearchClanObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckSearchClan_SearchClanObject(AckSearchClan_SearchClanObject&& from) noexcept
    : AckSearchClan_SearchClanObject() {
    *this = ::std::move(from);
  }

  inline AckSearchClan_SearchClanObject& operator=(AckSearchClan_SearchClanObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSearchClan_SearchClanObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckSearchClan_SearchClanObject* internal_default_instance() {
    return reinterpret_cast<const AckSearchClan_SearchClanObject*>(
               &_AckSearchClan_SearchClanObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(AckSearchClan_SearchClanObject* other);
  friend void swap(AckSearchClan_SearchClanObject& a, AckSearchClan_SearchClanObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckSearchClan_SearchClanObject* New() const final {
    return CreateMaybeMessage<AckSearchClan_SearchClanObject>(NULL);
  }

  AckSearchClan_SearchClanObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckSearchClan_SearchClanObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckSearchClan_SearchClanObject& from);
  void MergeFrom(const AckSearchClan_SearchClanObject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSearchClan_SearchClanObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes clan_name = 2;
  void clear_clan_name();
  static const int kClanNameFieldNumber = 2;
  const ::std::string& clan_name() const;
  void set_clan_name(const ::std::string& value);
  #if LANG_CXX11
  void set_clan_name(::std::string&& value);
  #endif
  void set_clan_name(const char* value);
  void set_clan_name(const void* value, size_t size);
  ::std::string* mutable_clan_name();
  ::std::string* release_clan_name();
  void set_allocated_clan_name(::std::string* clan_name);

  // bytes clan_icon = 3;
  void clear_clan_icon();
  static const int kClanIconFieldNumber = 3;
  const ::std::string& clan_icon() const;
  void set_clan_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_clan_icon(::std::string&& value);
  #endif
  void set_clan_icon(const char* value);
  void set_clan_icon(const void* value, size_t size);
  ::std::string* mutable_clan_icon();
  ::std::string* release_clan_icon();
  void set_allocated_clan_icon(::std::string* clan_icon);

  // .NFMsg.Ident clan_ID = 1;
  bool has_clan_id() const;
  void clear_clan_id();
  static const int kClanIDFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_clan_id() const;
  public:
  const ::NFMsg::Ident& clan_id() const;
  ::NFMsg::Ident* release_clan_id();
  ::NFMsg::Ident* mutable_clan_id();
  void set_allocated_clan_id(::NFMsg::Ident* clan_id);

  // int32 clan_member_count = 4;
  void clear_clan_member_count();
  static const int kClanMemberCountFieldNumber = 4;
  ::google::protobuf::int32 clan_member_count() const;
  void set_clan_member_count(::google::protobuf::int32 value);

  // int32 clan_member_max_count = 5;
  void clear_clan_member_max_count();
  static const int kClanMemberMaxCountFieldNumber = 5;
  ::google::protobuf::int32 clan_member_max_count() const;
  void set_clan_member_max_count(::google::protobuf::int32 value);

  // int32 clan_honor = 6;
  void clear_clan_honor();
  static const int kClanHonorFieldNumber = 6;
  ::google::protobuf::int32 clan_honor() const;
  void set_clan_honor(::google::protobuf::int32 value);

  // int32 clan_rank = 7;
  void clear_clan_rank();
  static const int kClanRankFieldNumber = 7;
  ::google::protobuf::int32 clan_rank() const;
  void set_clan_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.AckSearchClan.SearchClanObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clan_name_;
  ::google::protobuf::internal::ArenaStringPtr clan_icon_;
  ::NFMsg::Ident* clan_id_;
  ::google::protobuf::int32 clan_member_count_;
  ::google::protobuf::int32 clan_member_max_count_;
  ::google::protobuf::int32 clan_honor_;
  ::google::protobuf::int32 clan_rank_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckSearchClan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckSearchClan) */ {
 public:
  AckSearchClan();
  virtual ~AckSearchClan();

  AckSearchClan(const AckSearchClan& from);

  inline AckSearchClan& operator=(const AckSearchClan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckSearchClan(AckSearchClan&& from) noexcept
    : AckSearchClan() {
    *this = ::std::move(from);
  }

  inline AckSearchClan& operator=(AckSearchClan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSearchClan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckSearchClan* internal_default_instance() {
    return reinterpret_cast<const AckSearchClan*>(
               &_AckSearchClan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(AckSearchClan* other);
  friend void swap(AckSearchClan& a, AckSearchClan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckSearchClan* New() const final {
    return CreateMaybeMessage<AckSearchClan>(NULL);
  }

  AckSearchClan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckSearchClan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckSearchClan& from);
  void MergeFrom(const AckSearchClan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSearchClan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AckSearchClan_SearchClanObject SearchClanObject;

  // accessors -------------------------------------------------------

  // repeated .NFMsg.AckSearchClan.SearchClanObject clan_list = 1;
  int clan_list_size() const;
  void clear_clan_list();
  static const int kClanListFieldNumber = 1;
  ::NFMsg::AckSearchClan_SearchClanObject* mutable_clan_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::AckSearchClan_SearchClanObject >*
      mutable_clan_list();
  const ::NFMsg::AckSearchClan_SearchClanObject& clan_list(int index) const;
  ::NFMsg::AckSearchClan_SearchClanObject* add_clan_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::AckSearchClan_SearchClanObject >&
      clan_list() const;

  // @@protoc_insertion_point(class_scope:NFMsg.AckSearchClan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::AckSearchClan_SearchClanObject > clan_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckJoinClan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckJoinClan) */ {
 public:
  ReqAckJoinClan();
  virtual ~ReqAckJoinClan();

  ReqAckJoinClan(const ReqAckJoinClan& from);

  inline ReqAckJoinClan& operator=(const ReqAckJoinClan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckJoinClan(ReqAckJoinClan&& from) noexcept
    : ReqAckJoinClan() {
    *this = ::std::move(from);
  }

  inline ReqAckJoinClan& operator=(ReqAckJoinClan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckJoinClan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckJoinClan* internal_default_instance() {
    return reinterpret_cast<const ReqAckJoinClan*>(
               &_ReqAckJoinClan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(ReqAckJoinClan* other);
  friend void swap(ReqAckJoinClan& a, ReqAckJoinClan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckJoinClan* New() const final {
    return CreateMaybeMessage<ReqAckJoinClan>(NULL);
  }

  ReqAckJoinClan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckJoinClan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckJoinClan& from);
  void MergeFrom(const ReqAckJoinClan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckJoinClan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes clan_name = 2;
  void clear_clan_name();
  static const int kClanNameFieldNumber = 2;
  const ::std::string& clan_name() const;
  void set_clan_name(const ::std::string& value);
  #if LANG_CXX11
  void set_clan_name(::std::string&& value);
  #endif
  void set_clan_name(const char* value);
  void set_clan_name(const void* value, size_t size);
  ::std::string* mutable_clan_name();
  ::std::string* release_clan_name();
  void set_allocated_clan_name(::std::string* clan_name);

  // .NFMsg.Ident clan_id = 1;
  bool has_clan_id() const;
  void clear_clan_id();
  static const int kClanIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_clan_id() const;
  public:
  const ::NFMsg::Ident& clan_id() const;
  ::NFMsg::Ident* release_clan_id();
  ::NFMsg::Ident* mutable_clan_id();
  void set_allocated_clan_id(::NFMsg::Ident* clan_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckJoinClan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clan_name_;
  ::NFMsg::Ident* clan_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckLeaveClan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckLeaveClan) */ {
 public:
  ReqAckLeaveClan();
  virtual ~ReqAckLeaveClan();

  ReqAckLeaveClan(const ReqAckLeaveClan& from);

  inline ReqAckLeaveClan& operator=(const ReqAckLeaveClan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckLeaveClan(ReqAckLeaveClan&& from) noexcept
    : ReqAckLeaveClan() {
    *this = ::std::move(from);
  }

  inline ReqAckLeaveClan& operator=(ReqAckLeaveClan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckLeaveClan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckLeaveClan* internal_default_instance() {
    return reinterpret_cast<const ReqAckLeaveClan*>(
               &_ReqAckLeaveClan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(ReqAckLeaveClan* other);
  friend void swap(ReqAckLeaveClan& a, ReqAckLeaveClan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckLeaveClan* New() const final {
    return CreateMaybeMessage<ReqAckLeaveClan>(NULL);
  }

  ReqAckLeaveClan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckLeaveClan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckLeaveClan& from);
  void MergeFrom(const ReqAckLeaveClan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckLeaveClan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes clan_name = 2;
  void clear_clan_name();
  static const int kClanNameFieldNumber = 2;
  const ::std::string& clan_name() const;
  void set_clan_name(const ::std::string& value);
  #if LANG_CXX11
  void set_clan_name(::std::string&& value);
  #endif
  void set_clan_name(const char* value);
  void set_clan_name(const void* value, size_t size);
  ::std::string* mutable_clan_name();
  ::std::string* release_clan_name();
  void set_allocated_clan_name(::std::string* clan_name);

  // .NFMsg.Ident clan_id = 1;
  bool has_clan_id() const;
  void clear_clan_id();
  static const int kClanIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_clan_id() const;
  public:
  const ::NFMsg::Ident& clan_id() const;
  ::NFMsg::Ident* release_clan_id();
  ::NFMsg::Ident* mutable_clan_id();
  void set_allocated_clan_id(::NFMsg::Ident* clan_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckLeaveClan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clan_name_;
  ::NFMsg::Ident* clan_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckOprClanMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckOprClanMember) */ {
 public:
  ReqAckOprClanMember();
  virtual ~ReqAckOprClanMember();

  ReqAckOprClanMember(const ReqAckOprClanMember& from);

  inline ReqAckOprClanMember& operator=(const ReqAckOprClanMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckOprClanMember(ReqAckOprClanMember&& from) noexcept
    : ReqAckOprClanMember() {
    *this = ::std::move(from);
  }

  inline ReqAckOprClanMember& operator=(ReqAckOprClanMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckOprClanMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckOprClanMember* internal_default_instance() {
    return reinterpret_cast<const ReqAckOprClanMember*>(
               &_ReqAckOprClanMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(ReqAckOprClanMember* other);
  friend void swap(ReqAckOprClanMember& a, ReqAckOprClanMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckOprClanMember* New() const final {
    return CreateMaybeMessage<ReqAckOprClanMember>(NULL);
  }

  ReqAckOprClanMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckOprClanMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckOprClanMember& from);
  void MergeFrom(const ReqAckOprClanMember& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckOprClanMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqAckOprClanMember_EGClanMemberOprType EGClanMemberOprType;
  static const EGClanMemberOprType EGAT_DOWN =
    ReqAckOprClanMember_EGClanMemberOprType_EGAT_DOWN;
  static const EGClanMemberOprType EGAT_UP =
    ReqAckOprClanMember_EGClanMemberOprType_EGAT_UP;
  static const EGClanMemberOprType EGAT_KICK =
    ReqAckOprClanMember_EGClanMemberOprType_EGAT_KICK;
  static inline bool EGClanMemberOprType_IsValid(int value) {
    return ReqAckOprClanMember_EGClanMemberOprType_IsValid(value);
  }
  static const EGClanMemberOprType EGClanMemberOprType_MIN =
    ReqAckOprClanMember_EGClanMemberOprType_EGClanMemberOprType_MIN;
  static const EGClanMemberOprType EGClanMemberOprType_MAX =
    ReqAckOprClanMember_EGClanMemberOprType_EGClanMemberOprType_MAX;
  static const int EGClanMemberOprType_ARRAYSIZE =
    ReqAckOprClanMember_EGClanMemberOprType_EGClanMemberOprType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGClanMemberOprType_descriptor() {
    return ReqAckOprClanMember_EGClanMemberOprType_descriptor();
  }
  static inline const ::std::string& EGClanMemberOprType_Name(EGClanMemberOprType value) {
    return ReqAckOprClanMember_EGClanMemberOprType_Name(value);
  }
  static inline bool EGClanMemberOprType_Parse(const ::std::string& name,
      EGClanMemberOprType* value) {
    return ReqAckOprClanMember_EGClanMemberOprType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .NFMsg.Ident clan_id = 1;
  bool has_clan_id() const;
  void clear_clan_id();
  static const int kClanIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_clan_id() const;
  public:
  const ::NFMsg::Ident& clan_id() const;
  ::NFMsg::Ident* release_clan_id();
  ::NFMsg::Ident* mutable_clan_id();
  void set_allocated_clan_id(::NFMsg::Ident* clan_id);

  // .NFMsg.Ident member_id = 2;
  bool has_member_id() const;
  void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_member_id() const;
  public:
  const ::NFMsg::Ident& member_id() const;
  ::NFMsg::Ident* release_member_id();
  ::NFMsg::Ident* mutable_member_id();
  void set_allocated_member_id(::NFMsg::Ident* member_id);

  // .NFMsg.ReqAckOprClanMember.EGClanMemberOprType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::NFMsg::ReqAckOprClanMember_EGClanMemberOprType type() const;
  void set_type(::NFMsg::ReqAckOprClanMember_EGClanMemberOprType value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckOprClanMember)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* clan_id_;
  ::NFMsg::Ident* member_id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqEnterClanEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqEnterClanEctype) */ {
 public:
  ReqEnterClanEctype();
  virtual ~ReqEnterClanEctype();

  ReqEnterClanEctype(const ReqEnterClanEctype& from);

  inline ReqEnterClanEctype& operator=(const ReqEnterClanEctype& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqEnterClanEctype(ReqEnterClanEctype&& from) noexcept
    : ReqEnterClanEctype() {
    *this = ::std::move(from);
  }

  inline ReqEnterClanEctype& operator=(ReqEnterClanEctype&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterClanEctype& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqEnterClanEctype* internal_default_instance() {
    return reinterpret_cast<const ReqEnterClanEctype*>(
               &_ReqEnterClanEctype_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(ReqEnterClanEctype* other);
  friend void swap(ReqEnterClanEctype& a, ReqEnterClanEctype& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqEnterClanEctype* New() const final {
    return CreateMaybeMessage<ReqEnterClanEctype>(NULL);
  }

  ReqEnterClanEctype* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqEnterClanEctype>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqEnterClanEctype& from);
  void MergeFrom(const ReqEnterClanEctype& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqEnterClanEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident clan_id = 1;
  bool has_clan_id() const;
  void clear_clan_id();
  static const int kClanIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_clan_id() const;
  public:
  const ::NFMsg::Ident& clan_id() const;
  ::NFMsg::Ident* release_clan_id();
  ::NFMsg::Ident* mutable_clan_id();
  void set_allocated_clan_id(::NFMsg::Ident* clan_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqEnterClanEctype)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* clan_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSetFightHero : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqSetFightHero) */ {
 public:
  ReqSetFightHero();
  virtual ~ReqSetFightHero();

  ReqSetFightHero(const ReqSetFightHero& from);

  inline ReqSetFightHero& operator=(const ReqSetFightHero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSetFightHero(ReqSetFightHero&& from) noexcept
    : ReqSetFightHero() {
    *this = ::std::move(from);
  }

  inline ReqSetFightHero& operator=(ReqSetFightHero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSetFightHero& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSetFightHero* internal_default_instance() {
    return reinterpret_cast<const ReqSetFightHero*>(
               &_ReqSetFightHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(ReqSetFightHero* other);
  friend void swap(ReqSetFightHero& a, ReqSetFightHero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSetFightHero* New() const final {
    return CreateMaybeMessage<ReqSetFightHero>(NULL);
  }

  ReqSetFightHero* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqSetFightHero>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqSetFightHero& from);
  void MergeFrom(const ReqSetFightHero& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSetFightHero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident Heroid = 1;
  bool has_heroid() const;
  void clear_heroid();
  static const int kHeroidFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_heroid() const;
  public:
  const ::NFMsg::Ident& heroid() const;
  ::NFMsg::Ident* release_heroid();
  ::NFMsg::Ident* mutable_heroid();
  void set_allocated_heroid(::NFMsg::Ident* heroid);

  // int32 Set = 2;
  void clear_set();
  static const int kSetFieldNumber = 2;
  ::google::protobuf::int32 set() const;
  void set_set(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqSetFightHero)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* heroid_;
  ::google::protobuf::int32 set_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSwitchFightHero : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqSwitchFightHero) */ {
 public:
  ReqSwitchFightHero();
  virtual ~ReqSwitchFightHero();

  ReqSwitchFightHero(const ReqSwitchFightHero& from);

  inline ReqSwitchFightHero& operator=(const ReqSwitchFightHero& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSwitchFightHero(ReqSwitchFightHero&& from) noexcept
    : ReqSwitchFightHero() {
    *this = ::std::move(from);
  }

  inline ReqSwitchFightHero& operator=(ReqSwitchFightHero&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSwitchFightHero& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSwitchFightHero* internal_default_instance() {
    return reinterpret_cast<const ReqSwitchFightHero*>(
               &_ReqSwitchFightHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(ReqSwitchFightHero* other);
  friend void swap(ReqSwitchFightHero& a, ReqSwitchFightHero& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSwitchFightHero* New() const final {
    return CreateMaybeMessage<ReqSwitchFightHero>(NULL);
  }

  ReqSwitchFightHero* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqSwitchFightHero>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqSwitchFightHero& from);
  void MergeFrom(const ReqSwitchFightHero& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSwitchFightHero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident Heroid = 1;
  bool has_heroid() const;
  void clear_heroid();
  static const int kHeroidFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_heroid() const;
  public:
  const ::NFMsg::Ident& heroid() const;
  ::NFMsg::Ident* release_heroid();
  ::NFMsg::Ident* mutable_heroid();
  void set_allocated_heroid(::NFMsg::Ident* heroid);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqSwitchFightHero)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* heroid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqBuyItemFromShop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqBuyItemFromShop) */ {
 public:
  ReqBuyItemFromShop();
  virtual ~ReqBuyItemFromShop();

  ReqBuyItemFromShop(const ReqBuyItemFromShop& from);

  inline ReqBuyItemFromShop& operator=(const ReqBuyItemFromShop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqBuyItemFromShop(ReqBuyItemFromShop&& from) noexcept
    : ReqBuyItemFromShop() {
    *this = ::std::move(from);
  }

  inline ReqBuyItemFromShop& operator=(ReqBuyItemFromShop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqBuyItemFromShop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqBuyItemFromShop* internal_default_instance() {
    return reinterpret_cast<const ReqBuyItemFromShop*>(
               &_ReqBuyItemFromShop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ReqBuyItemFromShop* other);
  friend void swap(ReqBuyItemFromShop& a, ReqBuyItemFromShop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqBuyItemFromShop* New() const final {
    return CreateMaybeMessage<ReqBuyItemFromShop>(NULL);
  }

  ReqBuyItemFromShop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqBuyItemFromShop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqBuyItemFromShop& from);
  void MergeFrom(const ReqBuyItemFromShop& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBuyItemFromShop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes itemID = 1;
  void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  const ::std::string& itemid() const;
  void set_itemid(const ::std::string& value);
  #if LANG_CXX11
  void set_itemid(::std::string&& value);
  #endif
  void set_itemid(const char* value);
  void set_itemid(const void* value, size_t size);
  ::std::string* mutable_itemid();
  ::std::string* release_itemid();
  void set_allocated_itemid(::std::string* itemid);

  // int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqBuyItemFromShop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr itemid_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PVPPlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.PVPPlayerInfo) */ {
 public:
  PVPPlayerInfo();
  virtual ~PVPPlayerInfo();

  PVPPlayerInfo(const PVPPlayerInfo& from);

  inline PVPPlayerInfo& operator=(const PVPPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVPPlayerInfo(PVPPlayerInfo&& from) noexcept
    : PVPPlayerInfo() {
    *this = ::std::move(from);
  }

  inline PVPPlayerInfo& operator=(PVPPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPPlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PVPPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PVPPlayerInfo*>(
               &_PVPPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(PVPPlayerInfo* other);
  friend void swap(PVPPlayerInfo& a, PVPPlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVPPlayerInfo* New() const final {
    return CreateMaybeMessage<PVPPlayerInfo>(NULL);
  }

  PVPPlayerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PVPPlayerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PVPPlayerInfo& from);
  void MergeFrom(const PVPPlayerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVPPlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes head = 7;
  void clear_head();
  static const int kHeadFieldNumber = 7;
  const ::std::string& head() const;
  void set_head(const ::std::string& value);
  #if LANG_CXX11
  void set_head(::std::string&& value);
  #endif
  void set_head(const char* value);
  void set_head(const void* value, size_t size);
  ::std::string* mutable_head();
  ::std::string* release_head();
  void set_allocated_head(::std::string* head);

  // bytes hero_cnf1 = 20;
  void clear_hero_cnf1();
  static const int kHeroCnf1FieldNumber = 20;
  const ::std::string& hero_cnf1() const;
  void set_hero_cnf1(const ::std::string& value);
  #if LANG_CXX11
  void set_hero_cnf1(::std::string&& value);
  #endif
  void set_hero_cnf1(const char* value);
  void set_hero_cnf1(const void* value, size_t size);
  ::std::string* mutable_hero_cnf1();
  ::std::string* release_hero_cnf1();
  void set_allocated_hero_cnf1(::std::string* hero_cnf1);

  // bytes hero_cnf2 = 21;
  void clear_hero_cnf2();
  static const int kHeroCnf2FieldNumber = 21;
  const ::std::string& hero_cnf2() const;
  void set_hero_cnf2(const ::std::string& value);
  #if LANG_CXX11
  void set_hero_cnf2(::std::string&& value);
  #endif
  void set_hero_cnf2(const char* value);
  void set_hero_cnf2(const void* value, size_t size);
  ::std::string* mutable_hero_cnf2();
  ::std::string* release_hero_cnf2();
  void set_allocated_hero_cnf2(::std::string* hero_cnf2);

  // bytes hero_cnf3 = 22;
  void clear_hero_cnf3();
  static const int kHeroCnf3FieldNumber = 22;
  const ::std::string& hero_cnf3() const;
  void set_hero_cnf3(const ::std::string& value);
  #if LANG_CXX11
  void set_hero_cnf3(::std::string&& value);
  #endif
  void set_hero_cnf3(const char* value);
  void set_hero_cnf3(const void* value, size_t size);
  ::std::string* mutable_hero_cnf3();
  ::std::string* release_hero_cnf3();
  void set_allocated_hero_cnf3(::std::string* hero_cnf3);

  // .NFMsg.Ident id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_id() const;
  public:
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);

  // .NFMsg.Ident hero_id1 = 28;
  bool has_hero_id1() const;
  void clear_hero_id1();
  static const int kHeroId1FieldNumber = 28;
  private:
  const ::NFMsg::Ident& _internal_hero_id1() const;
  public:
  const ::NFMsg::Ident& hero_id1() const;
  ::NFMsg::Ident* release_hero_id1();
  ::NFMsg::Ident* mutable_hero_id1();
  void set_allocated_hero_id1(::NFMsg::Ident* hero_id1);

  // .NFMsg.Ident hero_id2 = 29;
  bool has_hero_id2() const;
  void clear_hero_id2();
  static const int kHeroId2FieldNumber = 29;
  private:
  const ::NFMsg::Ident& _internal_hero_id2() const;
  public:
  const ::NFMsg::Ident& hero_id2() const;
  ::NFMsg::Ident* release_hero_id2();
  ::NFMsg::Ident* mutable_hero_id2();
  void set_allocated_hero_id2(::NFMsg::Ident* hero_id2);

  // .NFMsg.Ident hero_id3 = 30;
  bool has_hero_id3() const;
  void clear_hero_id3();
  static const int kHeroId3FieldNumber = 30;
  private:
  const ::NFMsg::Ident& _internal_hero_id3() const;
  public:
  const ::NFMsg::Ident& hero_id3() const;
  ::NFMsg::Ident* release_hero_id3();
  ::NFMsg::Ident* mutable_hero_id3();
  void set_allocated_hero_id3(::NFMsg::Ident* hero_id3);

  // int32 single = 2;
  void clear_single();
  static const int kSingleFieldNumber = 2;
  ::google::protobuf::int32 single() const;
  void set_single(::google::protobuf::int32 value);

  // int32 level = 4;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // int32 battle_point = 5;
  void clear_battle_point();
  static const int kBattlePointFieldNumber = 5;
  ::google::protobuf::int32 battle_point() const;
  void set_battle_point(::google::protobuf::int32 value);

  // int32 gold = 8;
  void clear_gold();
  static const int kGoldFieldNumber = 8;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // int32 diamond = 9;
  void clear_diamond();
  static const int kDiamondFieldNumber = 9;
  ::google::protobuf::int32 diamond() const;
  void set_diamond(::google::protobuf::int32 value);

  // int32 hero_star1 = 25;
  void clear_hero_star1();
  static const int kHeroStar1FieldNumber = 25;
  ::google::protobuf::int32 hero_star1() const;
  void set_hero_star1(::google::protobuf::int32 value);

  // int32 hero_star2 = 26;
  void clear_hero_star2();
  static const int kHeroStar2FieldNumber = 26;
  ::google::protobuf::int32 hero_star2() const;
  void set_hero_star2(::google::protobuf::int32 value);

  // int32 hero_star3 = 27;
  void clear_hero_star3();
  static const int kHeroStar3FieldNumber = 27;
  ::google::protobuf::int32 hero_star3() const;
  void set_hero_star3(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.PVPPlayerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr head_;
  ::google::protobuf::internal::ArenaStringPtr hero_cnf1_;
  ::google::protobuf::internal::ArenaStringPtr hero_cnf2_;
  ::google::protobuf::internal::ArenaStringPtr hero_cnf3_;
  ::NFMsg::Ident* id_;
  ::NFMsg::Ident* hero_id1_;
  ::NFMsg::Ident* hero_id2_;
  ::NFMsg::Ident* hero_id3_;
  ::google::protobuf::int32 single_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 battle_point_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 diamond_;
  ::google::protobuf::int32 hero_star1_;
  ::google::protobuf::int32 hero_star2_;
  ::google::protobuf::int32 hero_star3_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSearchOppnent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqSearchOppnent) */ {
 public:
  ReqSearchOppnent();
  virtual ~ReqSearchOppnent();

  ReqSearchOppnent(const ReqSearchOppnent& from);

  inline ReqSearchOppnent& operator=(const ReqSearchOppnent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSearchOppnent(ReqSearchOppnent&& from) noexcept
    : ReqSearchOppnent() {
    *this = ::std::move(from);
  }

  inline ReqSearchOppnent& operator=(ReqSearchOppnent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSearchOppnent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSearchOppnent* internal_default_instance() {
    return reinterpret_cast<const ReqSearchOppnent*>(
               &_ReqSearchOppnent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(ReqSearchOppnent* other);
  friend void swap(ReqSearchOppnent& a, ReqSearchOppnent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSearchOppnent* New() const final {
    return CreateMaybeMessage<ReqSearchOppnent>(NULL);
  }

  ReqSearchOppnent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqSearchOppnent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqSearchOppnent& from);
  void MergeFrom(const ReqSearchOppnent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSearchOppnent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.Ident friends = 10;
  int friends_size() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 10;
  ::NFMsg::Ident* mutable_friends(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_friends();
  const ::NFMsg::Ident& friends(int index) const;
  ::NFMsg::Ident* add_friends();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
      friends() const;

  // int32 self_scene = 1;
  void clear_self_scene();
  static const int kSelfSceneFieldNumber = 1;
  ::google::protobuf::int32 self_scene() const;
  void set_self_scene(::google::protobuf::int32 value);

  // int32 diamond = 2;
  void clear_diamond();
  static const int kDiamondFieldNumber = 2;
  ::google::protobuf::int32 diamond() const;
  void set_diamond(::google::protobuf::int32 value);

  // int32 battle_point = 3;
  void clear_battle_point();
  static const int kBattlePointFieldNumber = 3;
  ::google::protobuf::int32 battle_point() const;
  void set_battle_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqSearchOppnent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident > friends_;
  ::google::protobuf::int32 self_scene_;
  ::google::protobuf::int32 diamond_;
  ::google::protobuf::int32 battle_point_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckSearchOppnent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckSearchOppnent) */ {
 public:
  AckSearchOppnent();
  virtual ~AckSearchOppnent();

  AckSearchOppnent(const AckSearchOppnent& from);

  inline AckSearchOppnent& operator=(const AckSearchOppnent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckSearchOppnent(AckSearchOppnent&& from) noexcept
    : AckSearchOppnent() {
    *this = ::std::move(from);
  }

  inline AckSearchOppnent& operator=(AckSearchOppnent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSearchOppnent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckSearchOppnent* internal_default_instance() {
    return reinterpret_cast<const AckSearchOppnent*>(
               &_AckSearchOppnent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(AckSearchOppnent* other);
  friend void swap(AckSearchOppnent& a, AckSearchOppnent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckSearchOppnent* New() const final {
    return CreateMaybeMessage<AckSearchOppnent>(NULL);
  }

  AckSearchOppnent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckSearchOppnent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckSearchOppnent& from);
  void MergeFrom(const AckSearchOppnent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSearchOppnent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.Ident team_members = 5;
  int team_members_size() const;
  void clear_team_members();
  static const int kTeamMembersFieldNumber = 5;
  ::NFMsg::Ident* mutable_team_members(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_team_members();
  const ::NFMsg::Ident& team_members(int index) const;
  ::NFMsg::Ident* add_team_members();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
      team_members() const;

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 20;
  int buildings_size() const;
  void clear_buildings();
  static const int kBuildingsFieldNumber = 20;
  ::NFMsg::ReqAddSceneBuilding* mutable_buildings(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >*
      mutable_buildings();
  const ::NFMsg::ReqAddSceneBuilding& buildings(int index) const;
  ::NFMsg::ReqAddSceneBuilding* add_buildings();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >&
      buildings() const;

  // .NFMsg.Ident team_id = 2;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // .NFMsg.PVPPlayerInfo opponent = 14;
  bool has_opponent() const;
  void clear_opponent();
  static const int kOpponentFieldNumber = 14;
  private:
  const ::NFMsg::PVPPlayerInfo& _internal_opponent() const;
  public:
  const ::NFMsg::PVPPlayerInfo& opponent() const;
  ::NFMsg::PVPPlayerInfo* release_opponent();
  ::NFMsg::PVPPlayerInfo* mutable_opponent();
  void set_allocated_opponent(::NFMsg::PVPPlayerInfo* opponent);

  // int32 scene_id = 1;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  ::google::protobuf::int32 scene_id() const;
  void set_scene_id(::google::protobuf::int32 value);

  // int32 gamble_diamond = 3;
  void clear_gamble_diamond();
  static const int kGambleDiamondFieldNumber = 3;
  ::google::protobuf::int32 gamble_diamond() const;
  void set_gamble_diamond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.AckSearchOppnent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident > team_members_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding > buildings_;
  ::NFMsg::Ident* team_id_;
  ::NFMsg::PVPPlayerInfo* opponent_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 gamble_diamond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckCancelSearch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckCancelSearch) */ {
 public:
  ReqAckCancelSearch();
  virtual ~ReqAckCancelSearch();

  ReqAckCancelSearch(const ReqAckCancelSearch& from);

  inline ReqAckCancelSearch& operator=(const ReqAckCancelSearch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqAckCancelSearch(ReqAckCancelSearch&& from) noexcept
    : ReqAckCancelSearch() {
    *this = ::std::move(from);
  }

  inline ReqAckCancelSearch& operator=(ReqAckCancelSearch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckCancelSearch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckCancelSearch* internal_default_instance() {
    return reinterpret_cast<const ReqAckCancelSearch*>(
               &_ReqAckCancelSearch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(ReqAckCancelSearch* other);
  friend void swap(ReqAckCancelSearch& a, ReqAckCancelSearch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqAckCancelSearch* New() const final {
    return CreateMaybeMessage<ReqAckCancelSearch>(NULL);
  }

  ReqAckCancelSearch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckCancelSearch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqAckCancelSearch& from);
  void MergeFrom(const ReqAckCancelSearch& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckCancelSearch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_selfid() const;
  public:
  const ::NFMsg::Ident& selfid() const;
  ::NFMsg::Ident* release_selfid();
  ::NFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::NFMsg::Ident* selfid);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckCancelSearch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* selfid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqEndBattle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqEndBattle) */ {
 public:
  ReqEndBattle();
  virtual ~ReqEndBattle();

  ReqEndBattle(const ReqEndBattle& from);

  inline ReqEndBattle& operator=(const ReqEndBattle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqEndBattle(ReqEndBattle&& from) noexcept
    : ReqEndBattle() {
    *this = ::std::move(from);
  }

  inline ReqEndBattle& operator=(ReqEndBattle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEndBattle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqEndBattle* internal_default_instance() {
    return reinterpret_cast<const ReqEndBattle*>(
               &_ReqEndBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(ReqEndBattle* other);
  friend void swap(ReqEndBattle& a, ReqEndBattle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqEndBattle* New() const final {
    return CreateMaybeMessage<ReqEndBattle>(NULL);
  }

  ReqEndBattle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqEndBattle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqEndBattle& from);
  void MergeFrom(const ReqEndBattle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqEndBattle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 auto_end = 1;
  void clear_auto_end();
  static const int kAutoEndFieldNumber = 1;
  ::google::protobuf::int32 auto_end() const;
  void set_auto_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqEndBattle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 auto_end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckEndBattle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckEndBattle) */ {
 public:
  AckEndBattle();
  virtual ~AckEndBattle();

  AckEndBattle(const AckEndBattle& from);

  inline AckEndBattle& operator=(const AckEndBattle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckEndBattle(AckEndBattle&& from) noexcept
    : AckEndBattle() {
    *this = ::std::move(from);
  }

  inline AckEndBattle& operator=(AckEndBattle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckEndBattle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckEndBattle* internal_default_instance() {
    return reinterpret_cast<const AckEndBattle*>(
               &_AckEndBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(AckEndBattle* other);
  friend void swap(AckEndBattle& a, AckEndBattle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckEndBattle* New() const final {
    return CreateMaybeMessage<AckEndBattle>(NULL);
  }

  AckEndBattle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckEndBattle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckEndBattle& from);
  void MergeFrom(const AckEndBattle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckEndBattle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.Ident members = 9;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 9;
  ::NFMsg::Ident* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_members();
  const ::NFMsg::Ident& members(int index) const;
  ::NFMsg::Ident* add_members();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
      members() const;

  // repeated .NFMsg.ItemStruct item_list = 10;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 10;
  ::NFMsg::ItemStruct* mutable_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ItemStruct >*
      mutable_item_list();
  const ::NFMsg::ItemStruct& item_list(int index) const;
  ::NFMsg::ItemStruct* add_item_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::ItemStruct >&
      item_list() const;

  // .NFMsg.Ident team_id = 7;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 7;
  private:
  const ::NFMsg::Ident& _internal_team_id() const;
  public:
  const ::NFMsg::Ident& team_id() const;
  ::NFMsg::Ident* release_team_id();
  ::NFMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::NFMsg::Ident* team_id);

  // .NFMsg.Ident match_id = 8;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 8;
  private:
  const ::NFMsg::Ident& _internal_match_id() const;
  public:
  const ::NFMsg::Ident& match_id() const;
  ::NFMsg::Ident* release_match_id();
  ::NFMsg::Ident* mutable_match_id();
  void set_allocated_match_id(::NFMsg::Ident* match_id);

  // int32 win = 1;
  void clear_win();
  static const int kWinFieldNumber = 1;
  ::google::protobuf::int32 win() const;
  void set_win(::google::protobuf::int32 value);

  // int32 star = 2;
  void clear_star();
  static const int kStarFieldNumber = 2;
  ::google::protobuf::int32 star() const;
  void set_star(::google::protobuf::int32 value);

  // int32 gold = 3;
  void clear_gold();
  static const int kGoldFieldNumber = 3;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // int32 cup = 4;
  void clear_cup();
  static const int kCupFieldNumber = 4;
  ::google::protobuf::int32 cup() const;
  void set_cup(::google::protobuf::int32 value);

  // int32 diamond = 5;
  void clear_diamond();
  static const int kDiamondFieldNumber = 5;
  ::google::protobuf::int32 diamond() const;
  void set_diamond(::google::protobuf::int32 value);

  // int32 single = 6;
  void clear_single();
  static const int kSingleFieldNumber = 6;
  ::google::protobuf::int32 single() const;
  void set_single(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.AckEndBattle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident > members_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ItemStruct > item_list_;
  ::NFMsg::Ident* team_id_;
  ::NFMsg::Ident* match_id_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 cup_;
  ::google::protobuf::int32 diamond_;
  ::google::protobuf::int32 single_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSendMail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqSendMail) */ {
 public:
  ReqSendMail();
  virtual ~ReqSendMail();

  ReqSendMail(const ReqSendMail& from);

  inline ReqSendMail& operator=(const ReqSendMail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSendMail(ReqSendMail&& from) noexcept
    : ReqSendMail() {
    *this = ::std::move(from);
  }

  inline ReqSendMail& operator=(ReqSendMail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSendMail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSendMail* internal_default_instance() {
    return reinterpret_cast<const ReqSendMail*>(
               &_ReqSendMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(ReqSendMail* other);
  friend void swap(ReqSendMail& a, ReqSendMail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSendMail* New() const final {
    return CreateMaybeMessage<ReqSendMail>(NULL);
  }

  ReqSendMail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqSendMail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqSendMail& from);
  void MergeFrom(const ReqSendMail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSendMail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.ItemStruct item_list = 2;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 2;
  ::NFMsg::ItemStruct* mutable_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ItemStruct >*
      mutable_item_list();
  const ::NFMsg::ItemStruct& item_list(int index) const;
  ::NFMsg::ItemStruct* add_item_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::ItemStruct >&
      item_list() const;

  // repeated .NFMsg.CurrencyStruct currency_list = 3;
  int currency_list_size() const;
  void clear_currency_list();
  static const int kCurrencyListFieldNumber = 3;
  ::NFMsg::CurrencyStruct* mutable_currency_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::CurrencyStruct >*
      mutable_currency_list();
  const ::NFMsg::CurrencyStruct& currency_list(int index) const;
  ::NFMsg::CurrencyStruct* add_currency_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::CurrencyStruct >&
      currency_list() const;

  // .NFMsg.Ident reciever = 1;
  bool has_reciever() const;
  void clear_reciever();
  static const int kRecieverFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_reciever() const;
  public:
  const ::NFMsg::Ident& reciever() const;
  ::NFMsg::Ident* release_reciever();
  ::NFMsg::Ident* mutable_reciever();
  void set_allocated_reciever(::NFMsg::Ident* reciever);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqSendMail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ItemStruct > item_list_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::CurrencyStruct > currency_list_;
  ::NFMsg::Ident* reciever_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSwitchServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqSwitchServer) */ {
 public:
  ReqSwitchServer();
  virtual ~ReqSwitchServer();

  ReqSwitchServer(const ReqSwitchServer& from);

  inline ReqSwitchServer& operator=(const ReqSwitchServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSwitchServer(ReqSwitchServer&& from) noexcept
    : ReqSwitchServer() {
    *this = ::std::move(from);
  }

  inline ReqSwitchServer& operator=(ReqSwitchServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSwitchServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSwitchServer* internal_default_instance() {
    return reinterpret_cast<const ReqSwitchServer*>(
               &_ReqSwitchServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(ReqSwitchServer* other);
  friend void swap(ReqSwitchServer& a, ReqSwitchServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSwitchServer* New() const final {
    return CreateMaybeMessage<ReqSwitchServer>(NULL);
  }

  ReqSwitchServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqSwitchServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqSwitchServer& from);
  void MergeFrom(const ReqSwitchServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSwitchServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_selfid() const;
  public:
  const ::NFMsg::Ident& selfid() const;
  ::NFMsg::Ident* release_selfid();
  ::NFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::NFMsg::Ident* selfid);

  // .NFMsg.Ident client_id = 6;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 6;
  private:
  const ::NFMsg::Ident& _internal_client_id() const;
  public:
  const ::NFMsg::Ident& client_id() const;
  ::NFMsg::Ident* release_client_id();
  ::NFMsg::Ident* mutable_client_id();
  void set_allocated_client_id(::NFMsg::Ident* client_id);

  // int64 self_serverid = 2;
  void clear_self_serverid();
  static const int kSelfServeridFieldNumber = 2;
  ::google::protobuf::int64 self_serverid() const;
  void set_self_serverid(::google::protobuf::int64 value);

  // int64 target_serverid = 3;
  void clear_target_serverid();
  static const int kTargetServeridFieldNumber = 3;
  ::google::protobuf::int64 target_serverid() const;
  void set_target_serverid(::google::protobuf::int64 value);

  // int64 gate_serverid = 4;
  void clear_gate_serverid();
  static const int kGateServeridFieldNumber = 4;
  ::google::protobuf::int64 gate_serverid() const;
  void set_gate_serverid(::google::protobuf::int64 value);

  // int64 SceneID = 5;
  void clear_sceneid();
  static const int kSceneIDFieldNumber = 5;
  ::google::protobuf::int64 sceneid() const;
  void set_sceneid(::google::protobuf::int64 value);

  // int64 groupID = 7;
  void clear_groupid();
  static const int kGroupIDFieldNumber = 7;
  ::google::protobuf::int64 groupid() const;
  void set_groupid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqSwitchServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* selfid_;
  ::NFMsg::Ident* client_id_;
  ::google::protobuf::int64 self_serverid_;
  ::google::protobuf::int64 target_serverid_;
  ::google::protobuf::int64 gate_serverid_;
  ::google::protobuf::int64 sceneid_;
  ::google::protobuf::int64 groupid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckSwitchServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckSwitchServer) */ {
 public:
  AckSwitchServer();
  virtual ~AckSwitchServer();

  AckSwitchServer(const AckSwitchServer& from);

  inline AckSwitchServer& operator=(const AckSwitchServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AckSwitchServer(AckSwitchServer&& from) noexcept
    : AckSwitchServer() {
    *this = ::std::move(from);
  }

  inline AckSwitchServer& operator=(AckSwitchServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSwitchServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckSwitchServer* internal_default_instance() {
    return reinterpret_cast<const AckSwitchServer*>(
               &_AckSwitchServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(AckSwitchServer* other);
  friend void swap(AckSwitchServer& a, AckSwitchServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AckSwitchServer* New() const final {
    return CreateMaybeMessage<AckSwitchServer>(NULL);
  }

  AckSwitchServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AckSwitchServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AckSwitchServer& from);
  void MergeFrom(const AckSwitchServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSwitchServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_selfid() const;
  public:
  const ::NFMsg::Ident& selfid() const;
  ::NFMsg::Ident* release_selfid();
  ::NFMsg::Ident* mutable_selfid();
  void set_allocated_selfid(::NFMsg::Ident* selfid);

  // int64 self_serverid = 2;
  void clear_self_serverid();
  static const int kSelfServeridFieldNumber = 2;
  ::google::protobuf::int64 self_serverid() const;
  void set_self_serverid(::google::protobuf::int64 value);

  // int64 target_serverid = 3;
  void clear_target_serverid();
  static const int kTargetServeridFieldNumber = 3;
  ::google::protobuf::int64 target_serverid() const;
  void set_target_serverid(::google::protobuf::int64 value);

  // int64 gate_serverid = 4;
  void clear_gate_serverid();
  static const int kGateServeridFieldNumber = 4;
  ::google::protobuf::int64 gate_serverid() const;
  void set_gate_serverid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.AckSwitchServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* selfid_;
  ::google::protobuf::int64 self_serverid_;
  ::google::protobuf::int64 target_serverid_;
  ::google::protobuf::int64 gate_serverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgShare_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqEnterGameServer

// .NFMsg.Ident id = 1;
inline bool ReqEnterGameServer::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::NFMsg::Ident& ReqEnterGameServer::_internal_id() const {
  return *id_;
}
inline const ::NFMsg::Ident& ReqEnterGameServer::id() const {
  const ::NFMsg::Ident* p = id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqEnterGameServer::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqEnterGameServer.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqEnterGameServer::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqEnterGameServer.id)
  return id_;
}
inline void ReqEnterGameServer::set_allocated_id(::NFMsg::Ident* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqEnterGameServer.id)
}

// bytes account = 2;
inline void ReqEnterGameServer::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqEnterGameServer::account() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.account)
  return account_.GetNoArena();
}
inline void ReqEnterGameServer::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqEnterGameServer.account)
}
#if LANG_CXX11
inline void ReqEnterGameServer::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqEnterGameServer.account)
}
#endif
inline void ReqEnterGameServer::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqEnterGameServer.account)
}
inline void ReqEnterGameServer::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqEnterGameServer.account)
}
inline ::std::string* ReqEnterGameServer::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqEnterGameServer.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqEnterGameServer::release_account() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqEnterGameServer.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqEnterGameServer.account)
}

// int32 game_id = 3;
inline void ReqEnterGameServer::clear_game_id() {
  game_id_ = 0;
}
inline ::google::protobuf::int32 ReqEnterGameServer::game_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.game_id)
  return game_id_;
}
inline void ReqEnterGameServer::set_game_id(::google::protobuf::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqEnterGameServer.game_id)
}

// bytes name = 4;
inline void ReqEnterGameServer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqEnterGameServer::name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.name)
  return name_.GetNoArena();
}
inline void ReqEnterGameServer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqEnterGameServer.name)
}
#if LANG_CXX11
inline void ReqEnterGameServer::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqEnterGameServer.name)
}
#endif
inline void ReqEnterGameServer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqEnterGameServer.name)
}
inline void ReqEnterGameServer::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqEnterGameServer.name)
}
inline ::std::string* ReqEnterGameServer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqEnterGameServer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqEnterGameServer::release_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqEnterGameServer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqEnterGameServer.name)
}

// -------------------------------------------------------------------

// ReqAckEnterGameSuccess

// int32 arg = 1;
inline void ReqAckEnterGameSuccess::clear_arg() {
  arg_ = 0;
}
inline ::google::protobuf::int32 ReqAckEnterGameSuccess::arg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckEnterGameSuccess.arg)
  return arg_;
}
inline void ReqAckEnterGameSuccess::set_arg(::google::protobuf::int32 value) {
  
  arg_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckEnterGameSuccess.arg)
}

// -------------------------------------------------------------------

// ReqHeartBeat

// int32 arg = 1;
inline void ReqHeartBeat::clear_arg() {
  arg_ = 0;
}
inline ::google::protobuf::int32 ReqHeartBeat::arg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqHeartBeat.arg)
  return arg_;
}
inline void ReqHeartBeat::set_arg(::google::protobuf::int32 value) {
  
  arg_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqHeartBeat.arg)
}

// -------------------------------------------------------------------

// ReqLeaveGameServer

// int32 arg = 1;
inline void ReqLeaveGameServer::clear_arg() {
  arg_ = 0;
}
inline ::google::protobuf::int32 ReqLeaveGameServer::arg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqLeaveGameServer.arg)
  return arg_;
}
inline void ReqLeaveGameServer::set_arg(::google::protobuf::int32 value) {
  
  arg_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqLeaveGameServer.arg)
}

// -------------------------------------------------------------------

// PlayerEntryInfo

// .NFMsg.Ident object_guid = 1;
inline bool PlayerEntryInfo::has_object_guid() const {
  return this != internal_default_instance() && object_guid_ != NULL;
}
inline const ::NFMsg::Ident& PlayerEntryInfo::_internal_object_guid() const {
  return *object_guid_;
}
inline const ::NFMsg::Ident& PlayerEntryInfo::object_guid() const {
  const ::NFMsg::Ident* p = object_guid_;
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.object_guid)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* PlayerEntryInfo::release_object_guid() {
  // @@protoc_insertion_point(field_release:NFMsg.PlayerEntryInfo.object_guid)
  
  ::NFMsg::Ident* temp = object_guid_;
  object_guid_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* PlayerEntryInfo::mutable_object_guid() {
  
  if (object_guid_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    object_guid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.PlayerEntryInfo.object_guid)
  return object_guid_;
}
inline void PlayerEntryInfo::set_allocated_object_guid(::NFMsg::Ident* object_guid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(object_guid_);
  }
  if (object_guid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      object_guid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object_guid, submessage_arena);
    }
    
  } else {
    
  }
  object_guid_ = object_guid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PlayerEntryInfo.object_guid)
}

// float x = 2;
inline void PlayerEntryInfo::clear_x() {
  x_ = 0;
}
inline float PlayerEntryInfo::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.x)
  return x_;
}
inline void PlayerEntryInfo::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.x)
}

// float y = 3;
inline void PlayerEntryInfo::clear_y() {
  y_ = 0;
}
inline float PlayerEntryInfo::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.y)
  return y_;
}
inline void PlayerEntryInfo::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.y)
}

// float z = 4;
inline void PlayerEntryInfo::clear_z() {
  z_ = 0;
}
inline float PlayerEntryInfo::z() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.z)
  return z_;
}
inline void PlayerEntryInfo::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.z)
}

// int32 career_type = 5;
inline void PlayerEntryInfo::clear_career_type() {
  career_type_ = 0;
}
inline ::google::protobuf::int32 PlayerEntryInfo::career_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.career_type)
  return career_type_;
}
inline void PlayerEntryInfo::set_career_type(::google::protobuf::int32 value) {
  
  career_type_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.career_type)
}

// int32 player_state = 6;
inline void PlayerEntryInfo::clear_player_state() {
  player_state_ = 0;
}
inline ::google::protobuf::int32 PlayerEntryInfo::player_state() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.player_state)
  return player_state_;
}
inline void PlayerEntryInfo::set_player_state(::google::protobuf::int32 value) {
  
  player_state_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.player_state)
}

// bytes config_id = 7;
inline void PlayerEntryInfo::clear_config_id() {
  config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerEntryInfo::config_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.config_id)
  return config_id_.GetNoArena();
}
inline void PlayerEntryInfo::set_config_id(const ::std::string& value) {
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.config_id)
}
#if LANG_CXX11
inline void PlayerEntryInfo::set_config_id(::std::string&& value) {
  
  config_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PlayerEntryInfo.config_id)
}
#endif
inline void PlayerEntryInfo::set_config_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PlayerEntryInfo.config_id)
}
inline void PlayerEntryInfo::set_config_id(const void* value, size_t size) {
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PlayerEntryInfo.config_id)
}
inline ::std::string* PlayerEntryInfo::mutable_config_id() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PlayerEntryInfo.config_id)
  return config_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerEntryInfo::release_config_id() {
  // @@protoc_insertion_point(field_release:NFMsg.PlayerEntryInfo.config_id)
  
  return config_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerEntryInfo::set_allocated_config_id(::std::string* config_id) {
  if (config_id != NULL) {
    
  } else {
    
  }
  config_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_id);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PlayerEntryInfo.config_id)
}

// int32 scene_id = 8;
inline void PlayerEntryInfo::clear_scene_id() {
  scene_id_ = 0;
}
inline ::google::protobuf::int32 PlayerEntryInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.scene_id)
  return scene_id_;
}
inline void PlayerEntryInfo::set_scene_id(::google::protobuf::int32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.scene_id)
}

// bytes class_id = 9;
inline void PlayerEntryInfo::clear_class_id() {
  class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerEntryInfo::class_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.class_id)
  return class_id_.GetNoArena();
}
inline void PlayerEntryInfo::set_class_id(const ::std::string& value) {
  
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.class_id)
}
#if LANG_CXX11
inline void PlayerEntryInfo::set_class_id(::std::string&& value) {
  
  class_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PlayerEntryInfo.class_id)
}
#endif
inline void PlayerEntryInfo::set_class_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PlayerEntryInfo.class_id)
}
inline void PlayerEntryInfo::set_class_id(const void* value, size_t size) {
  
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PlayerEntryInfo.class_id)
}
inline ::std::string* PlayerEntryInfo::mutable_class_id() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PlayerEntryInfo.class_id)
  return class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerEntryInfo::release_class_id() {
  // @@protoc_insertion_point(field_release:NFMsg.PlayerEntryInfo.class_id)
  
  return class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerEntryInfo::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    
  } else {
    
  }
  class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_id);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PlayerEntryInfo.class_id)
}

// -------------------------------------------------------------------

// AckPlayerEntryList

// repeated .NFMsg.PlayerEntryInfo object_list = 1;
inline int AckPlayerEntryList::object_list_size() const {
  return object_list_.size();
}
inline void AckPlayerEntryList::clear_object_list() {
  object_list_.Clear();
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckPlayerEntryList.object_list)
  return object_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >*
AckPlayerEntryList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckPlayerEntryList.object_list)
  return &object_list_;
}
inline const ::NFMsg::PlayerEntryInfo& AckPlayerEntryList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckPlayerEntryList.object_list)
  return object_list_.Get(index);
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::add_object_list() {
  // @@protoc_insertion_point(field_add:NFMsg.AckPlayerEntryList.object_list)
  return object_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >&
AckPlayerEntryList::object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckPlayerEntryList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// AckPlayerLeaveList

// repeated .NFMsg.Ident object_list = 1;
inline int AckPlayerLeaveList::object_list_size() const {
  return object_list_.size();
}
inline ::NFMsg::Ident* AckPlayerLeaveList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
AckPlayerLeaveList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckPlayerLeaveList.object_list)
  return &object_list_;
}
inline const ::NFMsg::Ident& AckPlayerLeaveList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Get(index);
}
inline ::NFMsg::Ident* AckPlayerLeaveList::add_object_list() {
  // @@protoc_insertion_point(field_add:NFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
AckPlayerLeaveList::object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckPlayerLeaveList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// ReqAckSynData

// .NFMsg.Ident syser = 1;
inline bool ReqAckSynData::has_syser() const {
  return this != internal_default_instance() && syser_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckSynData::_internal_syser() const {
  return *syser_;
}
inline const ::NFMsg::Ident& ReqAckSynData::syser() const {
  const ::NFMsg::Ident* p = syser_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSynData.syser)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckSynData::release_syser() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckSynData.syser)
  
  ::NFMsg::Ident* temp = syser_;
  syser_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckSynData::mutable_syser() {
  
  if (syser_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    syser_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckSynData.syser)
  return syser_;
}
inline void ReqAckSynData::set_allocated_syser(::NFMsg::Ident* syser) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(syser_);
  }
  if (syser) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      syser = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, syser, submessage_arena);
    }
    
  } else {
    
  }
  syser_ = syser;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckSynData.syser)
}

// repeated .NFMsg.Ident object_list = 2;
inline int ReqAckSynData::object_list_size() const {
  return object_list_.size();
}
inline ::NFMsg::Ident* ReqAckSynData::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckSynData.object_list)
  return object_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
ReqAckSynData::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckSynData.object_list)
  return &object_list_;
}
inline const ::NFMsg::Ident& ReqAckSynData::object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSynData.object_list)
  return object_list_.Get(index);
}
inline ::NFMsg::Ident* ReqAckSynData::add_object_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckSynData.object_list)
  return object_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
ReqAckSynData::object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckSynData.object_list)
  return object_list_;
}

// bytes data = 3;
inline void ReqAckSynData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckSynData::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSynData.data)
  return data_.GetNoArena();
}
inline void ReqAckSynData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSynData.data)
}
#if LANG_CXX11
inline void ReqAckSynData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckSynData.data)
}
#endif
inline void ReqAckSynData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckSynData.data)
}
inline void ReqAckSynData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckSynData.data)
}
inline ::std::string* ReqAckSynData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckSynData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckSynData::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckSynData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckSynData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckSynData.data)
}

// .NFMsg.ReqAckSynData.SynType syn_type = 4;
inline void ReqAckSynData::clear_syn_type() {
  syn_type_ = 0;
}
inline ::NFMsg::ReqAckSynData_SynType ReqAckSynData::syn_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSynData.syn_type)
  return static_cast< ::NFMsg::ReqAckSynData_SynType >(syn_type_);
}
inline void ReqAckSynData::set_syn_type(::NFMsg::ReqAckSynData_SynType value) {
  
  syn_type_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSynData.syn_type)
}

// .NFMsg.ESynMsgID msg_id = 5;
inline void ReqAckSynData::clear_msg_id() {
  msg_id_ = 0;
}
inline ::NFMsg::ESynMsgID ReqAckSynData::msg_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSynData.msg_id)
  return static_cast< ::NFMsg::ESynMsgID >(msg_id_);
}
inline void ReqAckSynData::set_msg_id(::NFMsg::ESynMsgID value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSynData.msg_id)
}

// -------------------------------------------------------------------

// ReqAckPlayerMove

// .NFMsg.Ident mover = 1;
inline bool ReqAckPlayerMove::has_mover() const {
  return this != internal_default_instance() && mover_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckPlayerMove::_internal_mover() const {
  return *mover_;
}
inline const ::NFMsg::Ident& ReqAckPlayerMove::mover() const {
  const ::NFMsg::Ident* p = mover_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerMove.mover)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckPlayerMove::release_mover() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerMove.mover)
  
  ::NFMsg::Ident* temp = mover_;
  mover_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckPlayerMove::mutable_mover() {
  
  if (mover_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    mover_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerMove.mover)
  return mover_;
}
inline void ReqAckPlayerMove::set_allocated_mover(::NFMsg::Ident* mover) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mover_);
  }
  if (mover) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mover = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mover, submessage_arena);
    }
    
  } else {
    
  }
  mover_ = mover;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerMove.mover)
}

// int32 moveType = 2;
inline void ReqAckPlayerMove::clear_movetype() {
  movetype_ = 0;
}
inline ::google::protobuf::int32 ReqAckPlayerMove::movetype() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerMove.moveType)
  return movetype_;
}
inline void ReqAckPlayerMove::set_movetype(::google::protobuf::int32 value) {
  
  movetype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerMove.moveType)
}

// float speed = 3;
inline void ReqAckPlayerMove::clear_speed() {
  speed_ = 0;
}
inline float ReqAckPlayerMove::speed() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerMove.speed)
  return speed_;
}
inline void ReqAckPlayerMove::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerMove.speed)
}

// int32 time = 4;
inline void ReqAckPlayerMove::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 ReqAckPlayerMove::time() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerMove.time)
  return time_;
}
inline void ReqAckPlayerMove::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerMove.time)
}

// int32 lastState = 5;
inline void ReqAckPlayerMove::clear_laststate() {
  laststate_ = 0;
}
inline ::google::protobuf::int32 ReqAckPlayerMove::laststate() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerMove.lastState)
  return laststate_;
}
inline void ReqAckPlayerMove::set_laststate(::google::protobuf::int32 value) {
  
  laststate_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerMove.lastState)
}

// repeated .NFMsg.Vector3 target_pos = 6;
inline int ReqAckPlayerMove::target_pos_size() const {
  return target_pos_.size();
}
inline ::NFMsg::Vector3* ReqAckPlayerMove::mutable_target_pos(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >*
ReqAckPlayerMove::mutable_target_pos() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckPlayerMove.target_pos)
  return &target_pos_;
}
inline const ::NFMsg::Vector3& ReqAckPlayerMove::target_pos(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Get(index);
}
inline ::NFMsg::Vector3* ReqAckPlayerMove::add_target_pos() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >&
ReqAckPlayerMove::target_pos() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_;
}

// repeated .NFMsg.Vector3 source_pos = 7;
inline int ReqAckPlayerMove::source_pos_size() const {
  return source_pos_.size();
}
inline ::NFMsg::Vector3* ReqAckPlayerMove::mutable_source_pos(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >*
ReqAckPlayerMove::mutable_source_pos() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckPlayerMove.source_pos)
  return &source_pos_;
}
inline const ::NFMsg::Vector3& ReqAckPlayerMove::source_pos(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Get(index);
}
inline ::NFMsg::Vector3* ReqAckPlayerMove::add_source_pos() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >&
ReqAckPlayerMove::source_pos() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_;
}

// repeated .NFMsg.Vector3 move_direction = 8;
inline int ReqAckPlayerMove::move_direction_size() const {
  return move_direction_.size();
}
inline ::NFMsg::Vector3* ReqAckPlayerMove::mutable_move_direction(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerMove.move_direction)
  return move_direction_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >*
ReqAckPlayerMove::mutable_move_direction() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckPlayerMove.move_direction)
  return &move_direction_;
}
inline const ::NFMsg::Vector3& ReqAckPlayerMove::move_direction(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerMove.move_direction)
  return move_direction_.Get(index);
}
inline ::NFMsg::Vector3* ReqAckPlayerMove::add_move_direction() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckPlayerMove.move_direction)
  return move_direction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Vector3 >&
ReqAckPlayerMove::move_direction() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckPlayerMove.move_direction)
  return move_direction_;
}

// -------------------------------------------------------------------

// ReqAckPlayerChat_ChatContainer

// int32 ConTainerType = 2;
inline void ReqAckPlayerChat_ChatContainer::clear_containertype() {
  containertype_ = 0;
}
inline ::google::protobuf::int32 ReqAckPlayerChat_ChatContainer::containertype() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.ChatContainer.ConTainerType)
  return containertype_;
}
inline void ReqAckPlayerChat_ChatContainer::set_containertype(::google::protobuf::int32 value) {
  
  containertype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.ChatContainer.ConTainerType)
}

// bytes data_info = 3;
inline void ReqAckPlayerChat_ChatContainer::clear_data_info() {
  data_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckPlayerChat_ChatContainer::data_info() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.ChatContainer.data_info)
  return data_info_.GetNoArena();
}
inline void ReqAckPlayerChat_ChatContainer::set_data_info(const ::std::string& value) {
  
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.ChatContainer.data_info)
}
#if LANG_CXX11
inline void ReqAckPlayerChat_ChatContainer::set_data_info(::std::string&& value) {
  
  data_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckPlayerChat.ChatContainer.data_info)
}
#endif
inline void ReqAckPlayerChat_ChatContainer::set_data_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckPlayerChat.ChatContainer.data_info)
}
inline void ReqAckPlayerChat_ChatContainer::set_data_info(const void* value, size_t size) {
  
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckPlayerChat.ChatContainer.data_info)
}
inline ::std::string* ReqAckPlayerChat_ChatContainer::mutable_data_info() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.ChatContainer.data_info)
  return data_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckPlayerChat_ChatContainer::release_data_info() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerChat.ChatContainer.data_info)
  
  return data_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckPlayerChat_ChatContainer::set_allocated_data_info(::std::string* data_info) {
  if (data_info != NULL) {
    
  } else {
    
  }
  data_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_info);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerChat.ChatContainer.data_info)
}

// -------------------------------------------------------------------

// ReqAckPlayerChat

// .NFMsg.Ident chat_id = 1;
inline bool ReqAckPlayerChat::has_chat_id() const {
  return this != internal_default_instance() && chat_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckPlayerChat::_internal_chat_id() const {
  return *chat_id_;
}
inline const ::NFMsg::Ident& ReqAckPlayerChat::chat_id() const {
  const ::NFMsg::Ident* p = chat_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.chat_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckPlayerChat::release_chat_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerChat.chat_id)
  
  ::NFMsg::Ident* temp = chat_id_;
  chat_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckPlayerChat::mutable_chat_id() {
  
  if (chat_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    chat_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.chat_id)
  return chat_id_;
}
inline void ReqAckPlayerChat::set_allocated_chat_id(::NFMsg::Ident* chat_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(chat_id_);
  }
  if (chat_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chat_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chat_id, submessage_arena);
    }
    
  } else {
    
  }
  chat_id_ = chat_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerChat.chat_id)
}

// .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
inline void ReqAckPlayerChat::clear_chat_type() {
  chat_type_ = 0;
}
inline ::NFMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::chat_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.chat_type)
  return static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatType >(chat_type_);
}
inline void ReqAckPlayerChat::set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value) {
  
  chat_type_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.chat_type)
}

// bytes chat_info = 3;
inline void ReqAckPlayerChat::clear_chat_info() {
  chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckPlayerChat::chat_info() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.chat_info)
  return chat_info_.GetNoArena();
}
inline void ReqAckPlayerChat::set_chat_info(const ::std::string& value) {
  
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.chat_info)
}
#if LANG_CXX11
inline void ReqAckPlayerChat::set_chat_info(::std::string&& value) {
  
  chat_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckPlayerChat.chat_info)
}
#endif
inline void ReqAckPlayerChat::set_chat_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckPlayerChat.chat_info)
}
inline void ReqAckPlayerChat::set_chat_info(const void* value, size_t size) {
  
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckPlayerChat.chat_info)
}
inline ::std::string* ReqAckPlayerChat::mutable_chat_info() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.chat_info)
  return chat_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckPlayerChat::release_chat_info() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerChat.chat_info)
  
  return chat_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckPlayerChat::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info != NULL) {
    
  } else {
    
  }
  chat_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_info);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerChat.chat_info)
}

// bytes chat_name = 4;
inline void ReqAckPlayerChat::clear_chat_name() {
  chat_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckPlayerChat::chat_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.chat_name)
  return chat_name_.GetNoArena();
}
inline void ReqAckPlayerChat::set_chat_name(const ::std::string& value) {
  
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.chat_name)
}
#if LANG_CXX11
inline void ReqAckPlayerChat::set_chat_name(::std::string&& value) {
  
  chat_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckPlayerChat.chat_name)
}
#endif
inline void ReqAckPlayerChat::set_chat_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckPlayerChat.chat_name)
}
inline void ReqAckPlayerChat::set_chat_name(const void* value, size_t size) {
  
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckPlayerChat.chat_name)
}
inline ::std::string* ReqAckPlayerChat::mutable_chat_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.chat_name)
  return chat_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckPlayerChat::release_chat_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerChat.chat_name)
  
  return chat_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckPlayerChat::set_allocated_chat_name(::std::string* chat_name) {
  if (chat_name != NULL) {
    
  } else {
    
  }
  chat_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerChat.chat_name)
}

// .NFMsg.Ident target_id = 5;
inline bool ReqAckPlayerChat::has_target_id() const {
  return this != internal_default_instance() && target_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckPlayerChat::_internal_target_id() const {
  return *target_id_;
}
inline const ::NFMsg::Ident& ReqAckPlayerChat::target_id() const {
  const ::NFMsg::Ident* p = target_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.target_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckPlayerChat::release_target_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerChat.target_id)
  
  ::NFMsg::Ident* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckPlayerChat::mutable_target_id() {
  
  if (target_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    target_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.target_id)
  return target_id_;
}
inline void ReqAckPlayerChat::set_allocated_target_id(::NFMsg::Ident* target_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerChat.target_id)
}

// repeated .NFMsg.ReqAckPlayerChat.ChatContainer Container_data = 6;
inline int ReqAckPlayerChat::container_data_size() const {
  return container_data_.size();
}
inline void ReqAckPlayerChat::clear_container_data() {
  container_data_.Clear();
}
inline ::NFMsg::ReqAckPlayerChat_ChatContainer* ReqAckPlayerChat::mutable_container_data(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAckPlayerChat_ChatContainer >*
ReqAckPlayerChat::mutable_container_data() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckPlayerChat.Container_data)
  return &container_data_;
}
inline const ::NFMsg::ReqAckPlayerChat_ChatContainer& ReqAckPlayerChat::container_data(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Get(index);
}
inline ::NFMsg::ReqAckPlayerChat_ChatContainer* ReqAckPlayerChat::add_container_data() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAckPlayerChat_ChatContainer >&
ReqAckPlayerChat::container_data() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckPlayerChat.Container_data)
  return container_data_;
}

// -------------------------------------------------------------------

// ReqAckPlayerPosSync

// .NFMsg.Ident mover = 1;
inline bool ReqAckPlayerPosSync::has_mover() const {
  return this != internal_default_instance() && mover_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckPlayerPosSync::_internal_mover() const {
  return *mover_;
}
inline const ::NFMsg::Ident& ReqAckPlayerPosSync::mover() const {
  const ::NFMsg::Ident* p = mover_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerPosSync.mover)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckPlayerPosSync::release_mover() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerPosSync.mover)
  
  ::NFMsg::Ident* temp = mover_;
  mover_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckPlayerPosSync::mutable_mover() {
  
  if (mover_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    mover_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerPosSync.mover)
  return mover_;
}
inline void ReqAckPlayerPosSync::set_allocated_mover(::NFMsg::Ident* mover) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mover_);
  }
  if (mover) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mover = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mover, submessage_arena);
    }
    
  } else {
    
  }
  mover_ = mover;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerPosSync.mover)
}

// int32 time = 2;
inline void ReqAckPlayerPosSync::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 ReqAckPlayerPosSync::time() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerPosSync.time)
  return time_;
}
inline void ReqAckPlayerPosSync::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerPosSync.time)
}

// float InterpolationTime = 3;
inline void ReqAckPlayerPosSync::clear_interpolationtime() {
  interpolationtime_ = 0;
}
inline float ReqAckPlayerPosSync::interpolationtime() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerPosSync.InterpolationTime)
  return interpolationtime_;
}
inline void ReqAckPlayerPosSync::set_interpolationtime(float value) {
  
  interpolationtime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerPosSync.InterpolationTime)
}

// .NFMsg.Vector3 position = 4;
inline bool ReqAckPlayerPosSync::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::NFMsg::Vector3& ReqAckPlayerPosSync::_internal_position() const {
  return *position_;
}
inline const ::NFMsg::Vector3& ReqAckPlayerPosSync::position() const {
  const ::NFMsg::Vector3* p = position_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerPosSync.position)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline ::NFMsg::Vector3* ReqAckPlayerPosSync::release_position() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerPosSync.position)
  
  ::NFMsg::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::NFMsg::Vector3* ReqAckPlayerPosSync::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerPosSync.position)
  return position_;
}
inline void ReqAckPlayerPosSync::set_allocated_position(::NFMsg::Vector3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerPosSync.position)
}

// .NFMsg.Vector3 direction = 5;
inline bool ReqAckPlayerPosSync::has_direction() const {
  return this != internal_default_instance() && direction_ != NULL;
}
inline const ::NFMsg::Vector3& ReqAckPlayerPosSync::_internal_direction() const {
  return *direction_;
}
inline const ::NFMsg::Vector3& ReqAckPlayerPosSync::direction() const {
  const ::NFMsg::Vector3* p = direction_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerPosSync.direction)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline ::NFMsg::Vector3* ReqAckPlayerPosSync::release_direction() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerPosSync.direction)
  
  ::NFMsg::Vector3* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline ::NFMsg::Vector3* ReqAckPlayerPosSync::mutable_direction() {
  
  if (direction_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerPosSync.direction)
  return direction_;
}
inline void ReqAckPlayerPosSync::set_allocated_direction(::NFMsg::Vector3* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(direction_);
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerPosSync.direction)
}

// int32 status = 6;
inline void ReqAckPlayerPosSync::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 ReqAckPlayerPosSync::status() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerPosSync.status)
  return status_;
}
inline void ReqAckPlayerPosSync::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerPosSync.status)
}

// int32 frame = 7;
inline void ReqAckPlayerPosSync::clear_frame() {
  frame_ = 0;
}
inline ::google::protobuf::int32 ReqAckPlayerPosSync::frame() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerPosSync.frame)
  return frame_;
}
inline void ReqAckPlayerPosSync::set_frame(::google::protobuf::int32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerPosSync.frame)
}

// -------------------------------------------------------------------

// EffectData

// .NFMsg.Ident effect_ident = 1;
inline bool EffectData::has_effect_ident() const {
  return this != internal_default_instance() && effect_ident_ != NULL;
}
inline const ::NFMsg::Ident& EffectData::_internal_effect_ident() const {
  return *effect_ident_;
}
inline const ::NFMsg::Ident& EffectData::effect_ident() const {
  const ::NFMsg::Ident* p = effect_ident_;
  // @@protoc_insertion_point(field_get:NFMsg.EffectData.effect_ident)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* EffectData::release_effect_ident() {
  // @@protoc_insertion_point(field_release:NFMsg.EffectData.effect_ident)
  
  ::NFMsg::Ident* temp = effect_ident_;
  effect_ident_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* EffectData::mutable_effect_ident() {
  
  if (effect_ident_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    effect_ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.EffectData.effect_ident)
  return effect_ident_;
}
inline void EffectData::set_allocated_effect_ident(::NFMsg::Ident* effect_ident) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(effect_ident_);
  }
  if (effect_ident) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      effect_ident = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, effect_ident, submessage_arena);
    }
    
  } else {
    
  }
  effect_ident_ = effect_ident;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.EffectData.effect_ident)
}

// int32 effect_value = 2;
inline void EffectData::clear_effect_value() {
  effect_value_ = 0;
}
inline ::google::protobuf::int32 EffectData::effect_value() const {
  // @@protoc_insertion_point(field_get:NFMsg.EffectData.effect_value)
  return effect_value_;
}
inline void EffectData::set_effect_value(::google::protobuf::int32 value) {
  
  effect_value_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.EffectData.effect_value)
}

// .NFMsg.EffectData.EResultType effect_rlt = 3;
inline void EffectData::clear_effect_rlt() {
  effect_rlt_ = 0;
}
inline ::NFMsg::EffectData_EResultType EffectData::effect_rlt() const {
  // @@protoc_insertion_point(field_get:NFMsg.EffectData.effect_rlt)
  return static_cast< ::NFMsg::EffectData_EResultType >(effect_rlt_);
}
inline void EffectData::set_effect_rlt(::NFMsg::EffectData_EResultType value) {
  
  effect_rlt_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.EffectData.effect_rlt)
}

// -------------------------------------------------------------------

// ReqAckUseSkill

// .NFMsg.Ident user = 1;
inline bool ReqAckUseSkill::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckUseSkill::_internal_user() const {
  return *user_;
}
inline const ::NFMsg::Ident& ReqAckUseSkill::user() const {
  const ::NFMsg::Ident* p = user_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.user)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckUseSkill::release_user() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUseSkill.user)
  
  ::NFMsg::Ident* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckUseSkill::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseSkill.user)
  return user_;
}
inline void ReqAckUseSkill::set_allocated_user(::NFMsg::Ident* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_);
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUseSkill.user)
}

// bytes skill_id = 2;
inline void ReqAckUseSkill::clear_skill_id() {
  skill_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckUseSkill::skill_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.skill_id)
  return skill_id_.GetNoArena();
}
inline void ReqAckUseSkill::set_skill_id(const ::std::string& value) {
  
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckUseSkill.skill_id)
}
#if LANG_CXX11
inline void ReqAckUseSkill::set_skill_id(::std::string&& value) {
  
  skill_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckUseSkill.skill_id)
}
#endif
inline void ReqAckUseSkill::set_skill_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckUseSkill.skill_id)
}
inline void ReqAckUseSkill::set_skill_id(const void* value, size_t size) {
  
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckUseSkill.skill_id)
}
inline ::std::string* ReqAckUseSkill::mutable_skill_id() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseSkill.skill_id)
  return skill_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckUseSkill::release_skill_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUseSkill.skill_id)
  
  return skill_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckUseSkill::set_allocated_skill_id(::std::string* skill_id) {
  if (skill_id != NULL) {
    
  } else {
    
  }
  skill_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill_id);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUseSkill.skill_id)
}

// int32 use_index = 3;
inline void ReqAckUseSkill::clear_use_index() {
  use_index_ = 0;
}
inline ::google::protobuf::int32 ReqAckUseSkill::use_index() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.use_index)
  return use_index_;
}
inline void ReqAckUseSkill::set_use_index(::google::protobuf::int32 value) {
  
  use_index_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckUseSkill.use_index)
}

// repeated .NFMsg.EffectData effect_data = 4;
inline int ReqAckUseSkill::effect_data_size() const {
  return effect_data_.size();
}
inline void ReqAckUseSkill::clear_effect_data() {
  effect_data_.Clear();
}
inline ::NFMsg::EffectData* ReqAckUseSkill::mutable_effect_data(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::EffectData >*
ReqAckUseSkill::mutable_effect_data() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckUseSkill.effect_data)
  return &effect_data_;
}
inline const ::NFMsg::EffectData& ReqAckUseSkill::effect_data(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Get(index);
}
inline ::NFMsg::EffectData* ReqAckUseSkill::add_effect_data() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::EffectData >&
ReqAckUseSkill::effect_data() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckUseSkill.effect_data)
  return effect_data_;
}

// -------------------------------------------------------------------

// ReqAckUseItem

// .NFMsg.Ident user = 1;
inline bool ReqAckUseItem::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckUseItem::_internal_user() const {
  return *user_;
}
inline const ::NFMsg::Ident& ReqAckUseItem::user() const {
  const ::NFMsg::Ident* p = user_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseItem.user)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckUseItem::release_user() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUseItem.user)
  
  ::NFMsg::Ident* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckUseItem::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseItem.user)
  return user_;
}
inline void ReqAckUseItem::set_allocated_user(::NFMsg::Ident* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_);
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUseItem.user)
}

// .NFMsg.Ident item_guid = 2;
inline bool ReqAckUseItem::has_item_guid() const {
  return this != internal_default_instance() && item_guid_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckUseItem::_internal_item_guid() const {
  return *item_guid_;
}
inline const ::NFMsg::Ident& ReqAckUseItem::item_guid() const {
  const ::NFMsg::Ident* p = item_guid_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseItem.item_guid)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckUseItem::release_item_guid() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUseItem.item_guid)
  
  ::NFMsg::Ident* temp = item_guid_;
  item_guid_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckUseItem::mutable_item_guid() {
  
  if (item_guid_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    item_guid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseItem.item_guid)
  return item_guid_;
}
inline void ReqAckUseItem::set_allocated_item_guid(::NFMsg::Ident* item_guid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(item_guid_);
  }
  if (item_guid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item_guid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item_guid, submessage_arena);
    }
    
  } else {
    
  }
  item_guid_ = item_guid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUseItem.item_guid)
}

// repeated .NFMsg.EffectData effect_data = 3;
inline int ReqAckUseItem::effect_data_size() const {
  return effect_data_.size();
}
inline void ReqAckUseItem::clear_effect_data() {
  effect_data_.Clear();
}
inline ::NFMsg::EffectData* ReqAckUseItem::mutable_effect_data(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::EffectData >*
ReqAckUseItem::mutable_effect_data() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckUseItem.effect_data)
  return &effect_data_;
}
inline const ::NFMsg::EffectData& ReqAckUseItem::effect_data(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Get(index);
}
inline ::NFMsg::EffectData* ReqAckUseItem::add_effect_data() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::EffectData >&
ReqAckUseItem::effect_data() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckUseItem.effect_data)
  return effect_data_;
}

// .NFMsg.ItemStruct item = 4;
inline bool ReqAckUseItem::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void ReqAckUseItem::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::NFMsg::ItemStruct& ReqAckUseItem::_internal_item() const {
  return *item_;
}
inline const ::NFMsg::ItemStruct& ReqAckUseItem::item() const {
  const ::NFMsg::ItemStruct* p = item_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseItem.item)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::ItemStruct*>(
      &::NFMsg::_ItemStruct_default_instance_);
}
inline ::NFMsg::ItemStruct* ReqAckUseItem::release_item() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUseItem.item)
  
  ::NFMsg::ItemStruct* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::NFMsg::ItemStruct* ReqAckUseItem::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::ItemStruct>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseItem.item)
  return item_;
}
inline void ReqAckUseItem::set_allocated_item(::NFMsg::ItemStruct* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUseItem.item)
}

// .NFMsg.Ident targetid = 5;
inline bool ReqAckUseItem::has_targetid() const {
  return this != internal_default_instance() && targetid_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckUseItem::_internal_targetid() const {
  return *targetid_;
}
inline const ::NFMsg::Ident& ReqAckUseItem::targetid() const {
  const ::NFMsg::Ident* p = targetid_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseItem.targetid)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckUseItem::release_targetid() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUseItem.targetid)
  
  ::NFMsg::Ident* temp = targetid_;
  targetid_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckUseItem::mutable_targetid() {
  
  if (targetid_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    targetid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseItem.targetid)
  return targetid_;
}
inline void ReqAckUseItem::set_allocated_targetid(::NFMsg::Ident* targetid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(targetid_);
  }
  if (targetid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      targetid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, targetid, submessage_arena);
    }
    
  } else {
    
  }
  targetid_ = targetid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUseItem.targetid)
}

// .NFMsg.Vector3 position = 6;
inline bool ReqAckUseItem::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::NFMsg::Vector3& ReqAckUseItem::_internal_position() const {
  return *position_;
}
inline const ::NFMsg::Vector3& ReqAckUseItem::position() const {
  const ::NFMsg::Vector3* p = position_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseItem.position)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline ::NFMsg::Vector3* ReqAckUseItem::release_position() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUseItem.position)
  
  ::NFMsg::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::NFMsg::Vector3* ReqAckUseItem::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseItem.position)
  return position_;
}
inline void ReqAckUseItem::set_allocated_position(::NFMsg::Vector3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUseItem.position)
}

// -------------------------------------------------------------------

// ReqAckSwapScene

// .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
inline void ReqAckSwapScene::clear_transfer_type() {
  transfer_type_ = 0;
}
inline ::NFMsg::ReqAckSwapScene_EGameSwapType ReqAckSwapScene::transfer_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.transfer_type)
  return static_cast< ::NFMsg::ReqAckSwapScene_EGameSwapType >(transfer_type_);
}
inline void ReqAckSwapScene::set_transfer_type(::NFMsg::ReqAckSwapScene_EGameSwapType value) {
  
  transfer_type_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.transfer_type)
}

// int32 scene_id = 2;
inline void ReqAckSwapScene::clear_scene_id() {
  scene_id_ = 0;
}
inline ::google::protobuf::int32 ReqAckSwapScene::scene_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.scene_id)
  return scene_id_;
}
inline void ReqAckSwapScene::set_scene_id(::google::protobuf::int32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.scene_id)
}

// int32 line_id = 3;
inline void ReqAckSwapScene::clear_line_id() {
  line_id_ = 0;
}
inline ::google::protobuf::int32 ReqAckSwapScene::line_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.line_id)
  return line_id_;
}
inline void ReqAckSwapScene::set_line_id(::google::protobuf::int32 value) {
  
  line_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.line_id)
}

// float x = 4;
inline void ReqAckSwapScene::clear_x() {
  x_ = 0;
}
inline float ReqAckSwapScene::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.x)
  return x_;
}
inline void ReqAckSwapScene::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.x)
}

// float y = 5;
inline void ReqAckSwapScene::clear_y() {
  y_ = 0;
}
inline float ReqAckSwapScene::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.y)
  return y_;
}
inline void ReqAckSwapScene::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.y)
}

// float z = 6;
inline void ReqAckSwapScene::clear_z() {
  z_ = 0;
}
inline float ReqAckSwapScene::z() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.z)
  return z_;
}
inline void ReqAckSwapScene::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.z)
}

// bytes data = 7;
inline void ReqAckSwapScene::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckSwapScene::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.data)
  return data_.GetNoArena();
}
inline void ReqAckSwapScene::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.data)
}
#if LANG_CXX11
inline void ReqAckSwapScene::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckSwapScene.data)
}
#endif
inline void ReqAckSwapScene::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckSwapScene.data)
}
inline void ReqAckSwapScene::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckSwapScene.data)
}
inline ::std::string* ReqAckSwapScene::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckSwapScene.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckSwapScene::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckSwapScene.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckSwapScene::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckSwapScene.data)
}

// -------------------------------------------------------------------

// ReqAckHomeScene

// bytes data = 1;
inline void ReqAckHomeScene::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckHomeScene::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckHomeScene.data)
  return data_.GetNoArena();
}
inline void ReqAckHomeScene::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckHomeScene.data)
}
#if LANG_CXX11
inline void ReqAckHomeScene::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckHomeScene.data)
}
#endif
inline void ReqAckHomeScene::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckHomeScene.data)
}
inline void ReqAckHomeScene::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckHomeScene.data)
}
inline ::std::string* ReqAckHomeScene::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckHomeScene.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckHomeScene::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckHomeScene.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckHomeScene::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckHomeScene.data)
}

// -------------------------------------------------------------------

// ItemStruct

// bytes item_id = 1;
inline void ItemStruct::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemStruct::item_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ItemStruct.item_id)
  return item_id_.GetNoArena();
}
inline void ItemStruct::set_item_id(const ::std::string& value) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ItemStruct.item_id)
}
#if LANG_CXX11
inline void ItemStruct::set_item_id(::std::string&& value) {
  
  item_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ItemStruct.item_id)
}
#endif
inline void ItemStruct::set_item_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ItemStruct.item_id)
}
inline void ItemStruct::set_item_id(const void* value, size_t size) {
  
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ItemStruct.item_id)
}
inline ::std::string* ItemStruct::mutable_item_id() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ItemStruct.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemStruct::release_item_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ItemStruct.item_id)
  
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemStruct::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    
  } else {
    
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ItemStruct.item_id)
}

// int32 item_count = 2;
inline void ItemStruct::clear_item_count() {
  item_count_ = 0;
}
inline ::google::protobuf::int32 ItemStruct::item_count() const {
  // @@protoc_insertion_point(field_get:NFMsg.ItemStruct.item_count)
  return item_count_;
}
inline void ItemStruct::set_item_count(::google::protobuf::int32 value) {
  
  item_count_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ItemStruct.item_count)
}

// -------------------------------------------------------------------

// CurrencyStruct

// int32 currency_type = 1;
inline void CurrencyStruct::clear_currency_type() {
  currency_type_ = 0;
}
inline ::google::protobuf::int32 CurrencyStruct::currency_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.CurrencyStruct.currency_type)
  return currency_type_;
}
inline void CurrencyStruct::set_currency_type(::google::protobuf::int32 value) {
  
  currency_type_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.CurrencyStruct.currency_type)
}

// int32 currency_count = 2;
inline void CurrencyStruct::clear_currency_count() {
  currency_count_ = 0;
}
inline ::google::protobuf::int32 CurrencyStruct::currency_count() const {
  // @@protoc_insertion_point(field_get:NFMsg.CurrencyStruct.currency_count)
  return currency_count_;
}
inline void CurrencyStruct::set_currency_count(::google::protobuf::int32 value) {
  
  currency_count_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.CurrencyStruct.currency_count)
}

// -------------------------------------------------------------------

// ReqAckReliveHero

// int32 diamond = 1;
inline void ReqAckReliveHero::clear_diamond() {
  diamond_ = 0;
}
inline ::google::protobuf::int32 ReqAckReliveHero::diamond() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckReliveHero.diamond)
  return diamond_;
}
inline void ReqAckReliveHero::set_diamond(::google::protobuf::int32 value) {
  
  diamond_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckReliveHero.diamond)
}

// .NFMsg.Ident hero_id = 2;
inline bool ReqAckReliveHero::has_hero_id() const {
  return this != internal_default_instance() && hero_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckReliveHero::_internal_hero_id() const {
  return *hero_id_;
}
inline const ::NFMsg::Ident& ReqAckReliveHero::hero_id() const {
  const ::NFMsg::Ident* p = hero_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckReliveHero.hero_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckReliveHero::release_hero_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckReliveHero.hero_id)
  
  ::NFMsg::Ident* temp = hero_id_;
  hero_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckReliveHero::mutable_hero_id() {
  
  if (hero_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    hero_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckReliveHero.hero_id)
  return hero_id_;
}
inline void ReqAckReliveHero::set_allocated_hero_id(::NFMsg::Ident* hero_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hero_id_);
  }
  if (hero_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hero_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hero_id, submessage_arena);
    }
    
  } else {
    
  }
  hero_id_ = hero_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckReliveHero.hero_id)
}

// -------------------------------------------------------------------

// ReqPickDropItem

// .NFMsg.Ident item_guid = 2;
inline bool ReqPickDropItem::has_item_guid() const {
  return this != internal_default_instance() && item_guid_ != NULL;
}
inline const ::NFMsg::Ident& ReqPickDropItem::_internal_item_guid() const {
  return *item_guid_;
}
inline const ::NFMsg::Ident& ReqPickDropItem::item_guid() const {
  const ::NFMsg::Ident* p = item_guid_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqPickDropItem.item_guid)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqPickDropItem::release_item_guid() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqPickDropItem.item_guid)
  
  ::NFMsg::Ident* temp = item_guid_;
  item_guid_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqPickDropItem::mutable_item_guid() {
  
  if (item_guid_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    item_guid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqPickDropItem.item_guid)
  return item_guid_;
}
inline void ReqPickDropItem::set_allocated_item_guid(::NFMsg::Ident* item_guid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(item_guid_);
  }
  if (item_guid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item_guid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item_guid, submessage_arena);
    }
    
  } else {
    
  }
  item_guid_ = item_guid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqPickDropItem.item_guid)
}

// -------------------------------------------------------------------

// ReqAcceptTask

// bytes task_id = 1;
inline void ReqAcceptTask::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAcceptTask::task_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAcceptTask.task_id)
  return task_id_.GetNoArena();
}
inline void ReqAcceptTask::set_task_id(const ::std::string& value) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAcceptTask.task_id)
}
#if LANG_CXX11
inline void ReqAcceptTask::set_task_id(::std::string&& value) {
  
  task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAcceptTask.task_id)
}
#endif
inline void ReqAcceptTask::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAcceptTask.task_id)
}
inline void ReqAcceptTask::set_task_id(const void* value, size_t size) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAcceptTask.task_id)
}
inline ::std::string* ReqAcceptTask::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAcceptTask.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAcceptTask::release_task_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAcceptTask.task_id)
  
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAcceptTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAcceptTask.task_id)
}

// -------------------------------------------------------------------

// ReqCompeleteTask

// bytes task_id = 1;
inline void ReqCompeleteTask::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCompeleteTask::task_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCompeleteTask.task_id)
  return task_id_.GetNoArena();
}
inline void ReqCompeleteTask::set_task_id(const ::std::string& value) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqCompeleteTask.task_id)
}
#if LANG_CXX11
inline void ReqCompeleteTask::set_task_id(::std::string&& value) {
  
  task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqCompeleteTask.task_id)
}
#endif
inline void ReqCompeleteTask::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqCompeleteTask.task_id)
}
inline void ReqCompeleteTask::set_task_id(const void* value, size_t size) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqCompeleteTask.task_id)
}
inline ::std::string* ReqCompeleteTask::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCompeleteTask.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCompeleteTask::release_task_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCompeleteTask.task_id)
  
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCompeleteTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCompeleteTask.task_id)
}

// -------------------------------------------------------------------

// ReqAddSceneBuilding

// .NFMsg.Vector3 pos = 1;
inline bool ReqAddSceneBuilding::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline const ::NFMsg::Vector3& ReqAddSceneBuilding::_internal_pos() const {
  return *pos_;
}
inline const ::NFMsg::Vector3& ReqAddSceneBuilding::pos() const {
  const ::NFMsg::Vector3* p = pos_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAddSceneBuilding.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline ::NFMsg::Vector3* ReqAddSceneBuilding::release_pos() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAddSceneBuilding.pos)
  
  ::NFMsg::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::NFMsg::Vector3* ReqAddSceneBuilding::mutable_pos() {
  
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAddSceneBuilding.pos)
  return pos_;
}
inline void ReqAddSceneBuilding::set_allocated_pos(::NFMsg::Vector3* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAddSceneBuilding.pos)
}

// .NFMsg.Ident guid = 2;
inline bool ReqAddSceneBuilding::has_guid() const {
  return this != internal_default_instance() && guid_ != NULL;
}
inline const ::NFMsg::Ident& ReqAddSceneBuilding::_internal_guid() const {
  return *guid_;
}
inline const ::NFMsg::Ident& ReqAddSceneBuilding::guid() const {
  const ::NFMsg::Ident* p = guid_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAddSceneBuilding.guid)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAddSceneBuilding::release_guid() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAddSceneBuilding.guid)
  
  ::NFMsg::Ident* temp = guid_;
  guid_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAddSceneBuilding::mutable_guid() {
  
  if (guid_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    guid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAddSceneBuilding.guid)
  return guid_;
}
inline void ReqAddSceneBuilding::set_allocated_guid(::NFMsg::Ident* guid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guid_);
  }
  if (guid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guid, submessage_arena);
    }
    
  } else {
    
  }
  guid_ = guid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAddSceneBuilding.guid)
}

// .NFMsg.Ident master = 3;
inline bool ReqAddSceneBuilding::has_master() const {
  return this != internal_default_instance() && master_ != NULL;
}
inline const ::NFMsg::Ident& ReqAddSceneBuilding::_internal_master() const {
  return *master_;
}
inline const ::NFMsg::Ident& ReqAddSceneBuilding::master() const {
  const ::NFMsg::Ident* p = master_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAddSceneBuilding.master)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAddSceneBuilding::release_master() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAddSceneBuilding.master)
  
  ::NFMsg::Ident* temp = master_;
  master_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAddSceneBuilding::mutable_master() {
  
  if (master_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    master_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAddSceneBuilding.master)
  return master_;
}
inline void ReqAddSceneBuilding::set_allocated_master(::NFMsg::Ident* master) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(master_);
  }
  if (master) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      master = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    
  } else {
    
  }
  master_ = master;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAddSceneBuilding.master)
}

// bytes config_id = 4;
inline void ReqAddSceneBuilding::clear_config_id() {
  config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAddSceneBuilding::config_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAddSceneBuilding.config_id)
  return config_id_.GetNoArena();
}
inline void ReqAddSceneBuilding::set_config_id(const ::std::string& value) {
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAddSceneBuilding.config_id)
}
#if LANG_CXX11
inline void ReqAddSceneBuilding::set_config_id(::std::string&& value) {
  
  config_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAddSceneBuilding.config_id)
}
#endif
inline void ReqAddSceneBuilding::set_config_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAddSceneBuilding.config_id)
}
inline void ReqAddSceneBuilding::set_config_id(const void* value, size_t size) {
  
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAddSceneBuilding.config_id)
}
inline ::std::string* ReqAddSceneBuilding::mutable_config_id() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAddSceneBuilding.config_id)
  return config_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAddSceneBuilding::release_config_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAddSceneBuilding.config_id)
  
  return config_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAddSceneBuilding::set_allocated_config_id(::std::string* config_id) {
  if (config_id != NULL) {
    
  } else {
    
  }
  config_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_id);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAddSceneBuilding.config_id)
}

// int32 scene_id = 5;
inline void ReqAddSceneBuilding::clear_scene_id() {
  scene_id_ = 0;
}
inline ::google::protobuf::int32 ReqAddSceneBuilding::scene_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAddSceneBuilding.scene_id)
  return scene_id_;
}
inline void ReqAddSceneBuilding::set_scene_id(::google::protobuf::int32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAddSceneBuilding.scene_id)
}

// bytes master_name = 6;
inline void ReqAddSceneBuilding::clear_master_name() {
  master_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAddSceneBuilding::master_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAddSceneBuilding.master_name)
  return master_name_.GetNoArena();
}
inline void ReqAddSceneBuilding::set_master_name(const ::std::string& value) {
  
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAddSceneBuilding.master_name)
}
#if LANG_CXX11
inline void ReqAddSceneBuilding::set_master_name(::std::string&& value) {
  
  master_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAddSceneBuilding.master_name)
}
#endif
inline void ReqAddSceneBuilding::set_master_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAddSceneBuilding.master_name)
}
inline void ReqAddSceneBuilding::set_master_name(const void* value, size_t size) {
  
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAddSceneBuilding.master_name)
}
inline ::std::string* ReqAddSceneBuilding::mutable_master_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAddSceneBuilding.master_name)
  return master_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAddSceneBuilding::release_master_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAddSceneBuilding.master_name)
  
  return master_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAddSceneBuilding::set_allocated_master_name(::std::string* master_name) {
  if (master_name != NULL) {
    
  } else {
    
  }
  master_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAddSceneBuilding.master_name)
}

// int32 is_home_scene = 7;
inline void ReqAddSceneBuilding::clear_is_home_scene() {
  is_home_scene_ = 0;
}
inline ::google::protobuf::int32 ReqAddSceneBuilding::is_home_scene() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAddSceneBuilding.is_home_scene)
  return is_home_scene_;
}
inline void ReqAddSceneBuilding::set_is_home_scene(::google::protobuf::int32 value) {
  
  is_home_scene_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAddSceneBuilding.is_home_scene)
}

// int32 is_building = 8;
inline void ReqAddSceneBuilding::clear_is_building() {
  is_building_ = 0;
}
inline ::google::protobuf::int32 ReqAddSceneBuilding::is_building() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAddSceneBuilding.is_building)
  return is_building_;
}
inline void ReqAddSceneBuilding::set_is_building(::google::protobuf::int32 value) {
  
  is_building_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAddSceneBuilding.is_building)
}

// -------------------------------------------------------------------

// ReqSceneBuildings

// int32 scene_id = 1;
inline void ReqSceneBuildings::clear_scene_id() {
  scene_id_ = 0;
}
inline ::google::protobuf::int32 ReqSceneBuildings::scene_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSceneBuildings.scene_id)
  return scene_id_;
}
inline void ReqSceneBuildings::set_scene_id(::google::protobuf::int32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqSceneBuildings.scene_id)
}

// .NFMsg.Vector3 pos = 2;
inline bool ReqSceneBuildings::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline const ::NFMsg::Vector3& ReqSceneBuildings::_internal_pos() const {
  return *pos_;
}
inline const ::NFMsg::Vector3& ReqSceneBuildings::pos() const {
  const ::NFMsg::Vector3* p = pos_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqSceneBuildings.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline ::NFMsg::Vector3* ReqSceneBuildings::release_pos() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqSceneBuildings.pos)
  
  ::NFMsg::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::NFMsg::Vector3* ReqSceneBuildings::mutable_pos() {
  
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqSceneBuildings.pos)
  return pos_;
}
inline void ReqSceneBuildings::set_allocated_pos(::NFMsg::Vector3* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqSceneBuildings.pos)
}

// -------------------------------------------------------------------

// AckSceneBuildings

// repeated .NFMsg.ReqAddSceneBuilding buildings = 1;
inline int AckSceneBuildings::buildings_size() const {
  return buildings_.size();
}
inline void AckSceneBuildings::clear_buildings() {
  buildings_.Clear();
}
inline ::NFMsg::ReqAddSceneBuilding* AckSceneBuildings::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckSceneBuildings.buildings)
  return buildings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >*
AckSceneBuildings::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckSceneBuildings.buildings)
  return &buildings_;
}
inline const ::NFMsg::ReqAddSceneBuilding& AckSceneBuildings::buildings(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSceneBuildings.buildings)
  return buildings_.Get(index);
}
inline ::NFMsg::ReqAddSceneBuilding* AckSceneBuildings::add_buildings() {
  // @@protoc_insertion_point(field_add:NFMsg.AckSceneBuildings.buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >&
AckSceneBuildings::buildings() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckSceneBuildings.buildings)
  return buildings_;
}

// -------------------------------------------------------------------

// ReqStoreSceneBuildings

// .NFMsg.Ident guid = 1;
inline bool ReqStoreSceneBuildings::has_guid() const {
  return this != internal_default_instance() && guid_ != NULL;
}
inline const ::NFMsg::Ident& ReqStoreSceneBuildings::_internal_guid() const {
  return *guid_;
}
inline const ::NFMsg::Ident& ReqStoreSceneBuildings::guid() const {
  const ::NFMsg::Ident* p = guid_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqStoreSceneBuildings.guid)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqStoreSceneBuildings::release_guid() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqStoreSceneBuildings.guid)
  
  ::NFMsg::Ident* temp = guid_;
  guid_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqStoreSceneBuildings::mutable_guid() {
  
  if (guid_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    guid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqStoreSceneBuildings.guid)
  return guid_;
}
inline void ReqStoreSceneBuildings::set_allocated_guid(::NFMsg::Ident* guid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(guid_);
  }
  if (guid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guid, submessage_arena);
    }
    
  } else {
    
  }
  guid_ = guid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqStoreSceneBuildings.guid)
}

// int32 home_scene_id = 2;
inline void ReqStoreSceneBuildings::clear_home_scene_id() {
  home_scene_id_ = 0;
}
inline ::google::protobuf::int32 ReqStoreSceneBuildings::home_scene_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqStoreSceneBuildings.home_scene_id)
  return home_scene_id_;
}
inline void ReqStoreSceneBuildings::set_home_scene_id(::google::protobuf::int32 value) {
  
  home_scene_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqStoreSceneBuildings.home_scene_id)
}

// repeated .NFMsg.ReqAddSceneBuilding buildings = 3;
inline int ReqStoreSceneBuildings::buildings_size() const {
  return buildings_.size();
}
inline void ReqStoreSceneBuildings::clear_buildings() {
  buildings_.Clear();
}
inline ::NFMsg::ReqAddSceneBuilding* ReqStoreSceneBuildings::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqStoreSceneBuildings.buildings)
  return buildings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >*
ReqStoreSceneBuildings::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqStoreSceneBuildings.buildings)
  return &buildings_;
}
inline const ::NFMsg::ReqAddSceneBuilding& ReqStoreSceneBuildings::buildings(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqStoreSceneBuildings.buildings)
  return buildings_.Get(index);
}
inline ::NFMsg::ReqAddSceneBuilding* ReqStoreSceneBuildings::add_buildings() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqStoreSceneBuildings.buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >&
ReqStoreSceneBuildings::buildings() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqStoreSceneBuildings.buildings)
  return buildings_;
}

// -------------------------------------------------------------------

// ReqAckCreateClan

// .NFMsg.Ident clan_id = 1;
inline bool ReqAckCreateClan::has_clan_id() const {
  return this != internal_default_instance() && clan_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckCreateClan::_internal_clan_id() const {
  return *clan_id_;
}
inline const ::NFMsg::Ident& ReqAckCreateClan::clan_id() const {
  const ::NFMsg::Ident* p = clan_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckCreateClan.clan_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckCreateClan::release_clan_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckCreateClan.clan_id)
  
  ::NFMsg::Ident* temp = clan_id_;
  clan_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckCreateClan::mutable_clan_id() {
  
  if (clan_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    clan_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckCreateClan.clan_id)
  return clan_id_;
}
inline void ReqAckCreateClan::set_allocated_clan_id(::NFMsg::Ident* clan_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(clan_id_);
  }
  if (clan_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clan_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clan_id, submessage_arena);
    }
    
  } else {
    
  }
  clan_id_ = clan_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckCreateClan.clan_id)
}

// bytes clan_name = 2;
inline void ReqAckCreateClan::clear_clan_name() {
  clan_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckCreateClan::clan_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckCreateClan.clan_name)
  return clan_name_.GetNoArena();
}
inline void ReqAckCreateClan::set_clan_name(const ::std::string& value) {
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckCreateClan.clan_name)
}
#if LANG_CXX11
inline void ReqAckCreateClan::set_clan_name(::std::string&& value) {
  
  clan_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckCreateClan.clan_name)
}
#endif
inline void ReqAckCreateClan::set_clan_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckCreateClan.clan_name)
}
inline void ReqAckCreateClan::set_clan_name(const void* value, size_t size) {
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckCreateClan.clan_name)
}
inline ::std::string* ReqAckCreateClan::mutable_clan_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckCreateClan.clan_name)
  return clan_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckCreateClan::release_clan_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckCreateClan.clan_name)
  
  return clan_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckCreateClan::set_allocated_clan_name(::std::string* clan_name) {
  if (clan_name != NULL) {
    
  } else {
    
  }
  clan_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clan_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckCreateClan.clan_name)
}

// -------------------------------------------------------------------

// ReqSearchClan

// bytes clan_name = 1;
inline void ReqSearchClan::clear_clan_name() {
  clan_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqSearchClan::clan_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSearchClan.clan_name)
  return clan_name_.GetNoArena();
}
inline void ReqSearchClan::set_clan_name(const ::std::string& value) {
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqSearchClan.clan_name)
}
#if LANG_CXX11
inline void ReqSearchClan::set_clan_name(::std::string&& value) {
  
  clan_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqSearchClan.clan_name)
}
#endif
inline void ReqSearchClan::set_clan_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqSearchClan.clan_name)
}
inline void ReqSearchClan::set_clan_name(const void* value, size_t size) {
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqSearchClan.clan_name)
}
inline ::std::string* ReqSearchClan::mutable_clan_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqSearchClan.clan_name)
  return clan_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqSearchClan::release_clan_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqSearchClan.clan_name)
  
  return clan_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqSearchClan::set_allocated_clan_name(::std::string* clan_name) {
  if (clan_name != NULL) {
    
  } else {
    
  }
  clan_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clan_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqSearchClan.clan_name)
}

// -------------------------------------------------------------------

// AckSearchClan_SearchClanObject

// .NFMsg.Ident clan_ID = 1;
inline bool AckSearchClan_SearchClanObject::has_clan_id() const {
  return this != internal_default_instance() && clan_id_ != NULL;
}
inline const ::NFMsg::Ident& AckSearchClan_SearchClanObject::_internal_clan_id() const {
  return *clan_id_;
}
inline const ::NFMsg::Ident& AckSearchClan_SearchClanObject::clan_id() const {
  const ::NFMsg::Ident* p = clan_id_;
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchClan.SearchClanObject.clan_ID)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckSearchClan_SearchClanObject::release_clan_id() {
  // @@protoc_insertion_point(field_release:NFMsg.AckSearchClan.SearchClanObject.clan_ID)
  
  ::NFMsg::Ident* temp = clan_id_;
  clan_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckSearchClan_SearchClanObject::mutable_clan_id() {
  
  if (clan_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    clan_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckSearchClan.SearchClanObject.clan_ID)
  return clan_id_;
}
inline void AckSearchClan_SearchClanObject::set_allocated_clan_id(::NFMsg::Ident* clan_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(clan_id_);
  }
  if (clan_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clan_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clan_id, submessage_arena);
    }
    
  } else {
    
  }
  clan_id_ = clan_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckSearchClan.SearchClanObject.clan_ID)
}

// bytes clan_name = 2;
inline void AckSearchClan_SearchClanObject::clear_clan_name() {
  clan_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckSearchClan_SearchClanObject::clan_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchClan.SearchClanObject.clan_name)
  return clan_name_.GetNoArena();
}
inline void AckSearchClan_SearchClanObject::set_clan_name(const ::std::string& value) {
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.AckSearchClan.SearchClanObject.clan_name)
}
#if LANG_CXX11
inline void AckSearchClan_SearchClanObject::set_clan_name(::std::string&& value) {
  
  clan_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.AckSearchClan.SearchClanObject.clan_name)
}
#endif
inline void AckSearchClan_SearchClanObject::set_clan_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.AckSearchClan.SearchClanObject.clan_name)
}
inline void AckSearchClan_SearchClanObject::set_clan_name(const void* value, size_t size) {
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.AckSearchClan.SearchClanObject.clan_name)
}
inline ::std::string* AckSearchClan_SearchClanObject::mutable_clan_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.AckSearchClan.SearchClanObject.clan_name)
  return clan_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckSearchClan_SearchClanObject::release_clan_name() {
  // @@protoc_insertion_point(field_release:NFMsg.AckSearchClan.SearchClanObject.clan_name)
  
  return clan_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckSearchClan_SearchClanObject::set_allocated_clan_name(::std::string* clan_name) {
  if (clan_name != NULL) {
    
  } else {
    
  }
  clan_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clan_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckSearchClan.SearchClanObject.clan_name)
}

// bytes clan_icon = 3;
inline void AckSearchClan_SearchClanObject::clear_clan_icon() {
  clan_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AckSearchClan_SearchClanObject::clan_icon() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchClan.SearchClanObject.clan_icon)
  return clan_icon_.GetNoArena();
}
inline void AckSearchClan_SearchClanObject::set_clan_icon(const ::std::string& value) {
  
  clan_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.AckSearchClan.SearchClanObject.clan_icon)
}
#if LANG_CXX11
inline void AckSearchClan_SearchClanObject::set_clan_icon(::std::string&& value) {
  
  clan_icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.AckSearchClan.SearchClanObject.clan_icon)
}
#endif
inline void AckSearchClan_SearchClanObject::set_clan_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clan_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.AckSearchClan.SearchClanObject.clan_icon)
}
inline void AckSearchClan_SearchClanObject::set_clan_icon(const void* value, size_t size) {
  
  clan_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.AckSearchClan.SearchClanObject.clan_icon)
}
inline ::std::string* AckSearchClan_SearchClanObject::mutable_clan_icon() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.AckSearchClan.SearchClanObject.clan_icon)
  return clan_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckSearchClan_SearchClanObject::release_clan_icon() {
  // @@protoc_insertion_point(field_release:NFMsg.AckSearchClan.SearchClanObject.clan_icon)
  
  return clan_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckSearchClan_SearchClanObject::set_allocated_clan_icon(::std::string* clan_icon) {
  if (clan_icon != NULL) {
    
  } else {
    
  }
  clan_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clan_icon);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckSearchClan.SearchClanObject.clan_icon)
}

// int32 clan_member_count = 4;
inline void AckSearchClan_SearchClanObject::clear_clan_member_count() {
  clan_member_count_ = 0;
}
inline ::google::protobuf::int32 AckSearchClan_SearchClanObject::clan_member_count() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchClan.SearchClanObject.clan_member_count)
  return clan_member_count_;
}
inline void AckSearchClan_SearchClanObject::set_clan_member_count(::google::protobuf::int32 value) {
  
  clan_member_count_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckSearchClan.SearchClanObject.clan_member_count)
}

// int32 clan_member_max_count = 5;
inline void AckSearchClan_SearchClanObject::clear_clan_member_max_count() {
  clan_member_max_count_ = 0;
}
inline ::google::protobuf::int32 AckSearchClan_SearchClanObject::clan_member_max_count() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchClan.SearchClanObject.clan_member_max_count)
  return clan_member_max_count_;
}
inline void AckSearchClan_SearchClanObject::set_clan_member_max_count(::google::protobuf::int32 value) {
  
  clan_member_max_count_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckSearchClan.SearchClanObject.clan_member_max_count)
}

// int32 clan_honor = 6;
inline void AckSearchClan_SearchClanObject::clear_clan_honor() {
  clan_honor_ = 0;
}
inline ::google::protobuf::int32 AckSearchClan_SearchClanObject::clan_honor() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchClan.SearchClanObject.clan_honor)
  return clan_honor_;
}
inline void AckSearchClan_SearchClanObject::set_clan_honor(::google::protobuf::int32 value) {
  
  clan_honor_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckSearchClan.SearchClanObject.clan_honor)
}

// int32 clan_rank = 7;
inline void AckSearchClan_SearchClanObject::clear_clan_rank() {
  clan_rank_ = 0;
}
inline ::google::protobuf::int32 AckSearchClan_SearchClanObject::clan_rank() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchClan.SearchClanObject.clan_rank)
  return clan_rank_;
}
inline void AckSearchClan_SearchClanObject::set_clan_rank(::google::protobuf::int32 value) {
  
  clan_rank_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckSearchClan.SearchClanObject.clan_rank)
}

// -------------------------------------------------------------------

// AckSearchClan

// repeated .NFMsg.AckSearchClan.SearchClanObject clan_list = 1;
inline int AckSearchClan::clan_list_size() const {
  return clan_list_.size();
}
inline void AckSearchClan::clear_clan_list() {
  clan_list_.Clear();
}
inline ::NFMsg::AckSearchClan_SearchClanObject* AckSearchClan::mutable_clan_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckSearchClan.clan_list)
  return clan_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::AckSearchClan_SearchClanObject >*
AckSearchClan::mutable_clan_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckSearchClan.clan_list)
  return &clan_list_;
}
inline const ::NFMsg::AckSearchClan_SearchClanObject& AckSearchClan::clan_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchClan.clan_list)
  return clan_list_.Get(index);
}
inline ::NFMsg::AckSearchClan_SearchClanObject* AckSearchClan::add_clan_list() {
  // @@protoc_insertion_point(field_add:NFMsg.AckSearchClan.clan_list)
  return clan_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::AckSearchClan_SearchClanObject >&
AckSearchClan::clan_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckSearchClan.clan_list)
  return clan_list_;
}

// -------------------------------------------------------------------

// ReqAckJoinClan

// .NFMsg.Ident clan_id = 1;
inline bool ReqAckJoinClan::has_clan_id() const {
  return this != internal_default_instance() && clan_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckJoinClan::_internal_clan_id() const {
  return *clan_id_;
}
inline const ::NFMsg::Ident& ReqAckJoinClan::clan_id() const {
  const ::NFMsg::Ident* p = clan_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckJoinClan.clan_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckJoinClan::release_clan_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckJoinClan.clan_id)
  
  ::NFMsg::Ident* temp = clan_id_;
  clan_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckJoinClan::mutable_clan_id() {
  
  if (clan_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    clan_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckJoinClan.clan_id)
  return clan_id_;
}
inline void ReqAckJoinClan::set_allocated_clan_id(::NFMsg::Ident* clan_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(clan_id_);
  }
  if (clan_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clan_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clan_id, submessage_arena);
    }
    
  } else {
    
  }
  clan_id_ = clan_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckJoinClan.clan_id)
}

// bytes clan_name = 2;
inline void ReqAckJoinClan::clear_clan_name() {
  clan_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckJoinClan::clan_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckJoinClan.clan_name)
  return clan_name_.GetNoArena();
}
inline void ReqAckJoinClan::set_clan_name(const ::std::string& value) {
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckJoinClan.clan_name)
}
#if LANG_CXX11
inline void ReqAckJoinClan::set_clan_name(::std::string&& value) {
  
  clan_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckJoinClan.clan_name)
}
#endif
inline void ReqAckJoinClan::set_clan_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckJoinClan.clan_name)
}
inline void ReqAckJoinClan::set_clan_name(const void* value, size_t size) {
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckJoinClan.clan_name)
}
inline ::std::string* ReqAckJoinClan::mutable_clan_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckJoinClan.clan_name)
  return clan_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckJoinClan::release_clan_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckJoinClan.clan_name)
  
  return clan_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckJoinClan::set_allocated_clan_name(::std::string* clan_name) {
  if (clan_name != NULL) {
    
  } else {
    
  }
  clan_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clan_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckJoinClan.clan_name)
}

// -------------------------------------------------------------------

// ReqAckLeaveClan

// .NFMsg.Ident clan_id = 1;
inline bool ReqAckLeaveClan::has_clan_id() const {
  return this != internal_default_instance() && clan_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckLeaveClan::_internal_clan_id() const {
  return *clan_id_;
}
inline const ::NFMsg::Ident& ReqAckLeaveClan::clan_id() const {
  const ::NFMsg::Ident* p = clan_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckLeaveClan.clan_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckLeaveClan::release_clan_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckLeaveClan.clan_id)
  
  ::NFMsg::Ident* temp = clan_id_;
  clan_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckLeaveClan::mutable_clan_id() {
  
  if (clan_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    clan_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckLeaveClan.clan_id)
  return clan_id_;
}
inline void ReqAckLeaveClan::set_allocated_clan_id(::NFMsg::Ident* clan_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(clan_id_);
  }
  if (clan_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clan_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clan_id, submessage_arena);
    }
    
  } else {
    
  }
  clan_id_ = clan_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckLeaveClan.clan_id)
}

// bytes clan_name = 2;
inline void ReqAckLeaveClan::clear_clan_name() {
  clan_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqAckLeaveClan::clan_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckLeaveClan.clan_name)
  return clan_name_.GetNoArena();
}
inline void ReqAckLeaveClan::set_clan_name(const ::std::string& value) {
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckLeaveClan.clan_name)
}
#if LANG_CXX11
inline void ReqAckLeaveClan::set_clan_name(::std::string&& value) {
  
  clan_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckLeaveClan.clan_name)
}
#endif
inline void ReqAckLeaveClan::set_clan_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckLeaveClan.clan_name)
}
inline void ReqAckLeaveClan::set_clan_name(const void* value, size_t size) {
  
  clan_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckLeaveClan.clan_name)
}
inline ::std::string* ReqAckLeaveClan::mutable_clan_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckLeaveClan.clan_name)
  return clan_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckLeaveClan::release_clan_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckLeaveClan.clan_name)
  
  return clan_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckLeaveClan::set_allocated_clan_name(::std::string* clan_name) {
  if (clan_name != NULL) {
    
  } else {
    
  }
  clan_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clan_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckLeaveClan.clan_name)
}

// -------------------------------------------------------------------

// ReqAckOprClanMember

// .NFMsg.Ident clan_id = 1;
inline bool ReqAckOprClanMember::has_clan_id() const {
  return this != internal_default_instance() && clan_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckOprClanMember::_internal_clan_id() const {
  return *clan_id_;
}
inline const ::NFMsg::Ident& ReqAckOprClanMember::clan_id() const {
  const ::NFMsg::Ident* p = clan_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckOprClanMember.clan_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckOprClanMember::release_clan_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckOprClanMember.clan_id)
  
  ::NFMsg::Ident* temp = clan_id_;
  clan_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckOprClanMember::mutable_clan_id() {
  
  if (clan_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    clan_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckOprClanMember.clan_id)
  return clan_id_;
}
inline void ReqAckOprClanMember::set_allocated_clan_id(::NFMsg::Ident* clan_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(clan_id_);
  }
  if (clan_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clan_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clan_id, submessage_arena);
    }
    
  } else {
    
  }
  clan_id_ = clan_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckOprClanMember.clan_id)
}

// .NFMsg.Ident member_id = 2;
inline bool ReqAckOprClanMember::has_member_id() const {
  return this != internal_default_instance() && member_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckOprClanMember::_internal_member_id() const {
  return *member_id_;
}
inline const ::NFMsg::Ident& ReqAckOprClanMember::member_id() const {
  const ::NFMsg::Ident* p = member_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckOprClanMember.member_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckOprClanMember::release_member_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckOprClanMember.member_id)
  
  ::NFMsg::Ident* temp = member_id_;
  member_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckOprClanMember::mutable_member_id() {
  
  if (member_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    member_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckOprClanMember.member_id)
  return member_id_;
}
inline void ReqAckOprClanMember::set_allocated_member_id(::NFMsg::Ident* member_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(member_id_);
  }
  if (member_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      member_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, member_id, submessage_arena);
    }
    
  } else {
    
  }
  member_id_ = member_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckOprClanMember.member_id)
}

// .NFMsg.ReqAckOprClanMember.EGClanMemberOprType type = 3;
inline void ReqAckOprClanMember::clear_type() {
  type_ = 0;
}
inline ::NFMsg::ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember::type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckOprClanMember.type)
  return static_cast< ::NFMsg::ReqAckOprClanMember_EGClanMemberOprType >(type_);
}
inline void ReqAckOprClanMember::set_type(::NFMsg::ReqAckOprClanMember_EGClanMemberOprType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckOprClanMember.type)
}

// -------------------------------------------------------------------

// ReqEnterClanEctype

// .NFMsg.Ident clan_id = 1;
inline bool ReqEnterClanEctype::has_clan_id() const {
  return this != internal_default_instance() && clan_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqEnterClanEctype::_internal_clan_id() const {
  return *clan_id_;
}
inline const ::NFMsg::Ident& ReqEnterClanEctype::clan_id() const {
  const ::NFMsg::Ident* p = clan_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterClanEctype.clan_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqEnterClanEctype::release_clan_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqEnterClanEctype.clan_id)
  
  ::NFMsg::Ident* temp = clan_id_;
  clan_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqEnterClanEctype::mutable_clan_id() {
  
  if (clan_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    clan_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqEnterClanEctype.clan_id)
  return clan_id_;
}
inline void ReqEnterClanEctype::set_allocated_clan_id(::NFMsg::Ident* clan_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(clan_id_);
  }
  if (clan_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      clan_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, clan_id, submessage_arena);
    }
    
  } else {
    
  }
  clan_id_ = clan_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqEnterClanEctype.clan_id)
}

// -------------------------------------------------------------------

// ReqSetFightHero

// .NFMsg.Ident Heroid = 1;
inline bool ReqSetFightHero::has_heroid() const {
  return this != internal_default_instance() && heroid_ != NULL;
}
inline const ::NFMsg::Ident& ReqSetFightHero::_internal_heroid() const {
  return *heroid_;
}
inline const ::NFMsg::Ident& ReqSetFightHero::heroid() const {
  const ::NFMsg::Ident* p = heroid_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqSetFightHero.Heroid)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqSetFightHero::release_heroid() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqSetFightHero.Heroid)
  
  ::NFMsg::Ident* temp = heroid_;
  heroid_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqSetFightHero::mutable_heroid() {
  
  if (heroid_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    heroid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqSetFightHero.Heroid)
  return heroid_;
}
inline void ReqSetFightHero::set_allocated_heroid(::NFMsg::Ident* heroid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(heroid_);
  }
  if (heroid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heroid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heroid, submessage_arena);
    }
    
  } else {
    
  }
  heroid_ = heroid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqSetFightHero.Heroid)
}

// int32 Set = 2;
inline void ReqSetFightHero::clear_set() {
  set_ = 0;
}
inline ::google::protobuf::int32 ReqSetFightHero::set() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSetFightHero.Set)
  return set_;
}
inline void ReqSetFightHero::set_set(::google::protobuf::int32 value) {
  
  set_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqSetFightHero.Set)
}

// -------------------------------------------------------------------

// ReqSwitchFightHero

// .NFMsg.Ident Heroid = 1;
inline bool ReqSwitchFightHero::has_heroid() const {
  return this != internal_default_instance() && heroid_ != NULL;
}
inline const ::NFMsg::Ident& ReqSwitchFightHero::_internal_heroid() const {
  return *heroid_;
}
inline const ::NFMsg::Ident& ReqSwitchFightHero::heroid() const {
  const ::NFMsg::Ident* p = heroid_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqSwitchFightHero.Heroid)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqSwitchFightHero::release_heroid() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqSwitchFightHero.Heroid)
  
  ::NFMsg::Ident* temp = heroid_;
  heroid_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqSwitchFightHero::mutable_heroid() {
  
  if (heroid_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    heroid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqSwitchFightHero.Heroid)
  return heroid_;
}
inline void ReqSwitchFightHero::set_allocated_heroid(::NFMsg::Ident* heroid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(heroid_);
  }
  if (heroid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heroid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heroid, submessage_arena);
    }
    
  } else {
    
  }
  heroid_ = heroid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqSwitchFightHero.Heroid)
}

// -------------------------------------------------------------------

// ReqBuyItemFromShop

// bytes itemID = 1;
inline void ReqBuyItemFromShop::clear_itemid() {
  itemid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqBuyItemFromShop::itemid() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqBuyItemFromShop.itemID)
  return itemid_.GetNoArena();
}
inline void ReqBuyItemFromShop::set_itemid(const ::std::string& value) {
  
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqBuyItemFromShop.itemID)
}
#if LANG_CXX11
inline void ReqBuyItemFromShop::set_itemid(::std::string&& value) {
  
  itemid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqBuyItemFromShop.itemID)
}
#endif
inline void ReqBuyItemFromShop::set_itemid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqBuyItemFromShop.itemID)
}
inline void ReqBuyItemFromShop::set_itemid(const void* value, size_t size) {
  
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqBuyItemFromShop.itemID)
}
inline ::std::string* ReqBuyItemFromShop::mutable_itemid() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqBuyItemFromShop.itemID)
  return itemid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqBuyItemFromShop::release_itemid() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqBuyItemFromShop.itemID)
  
  return itemid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqBuyItemFromShop::set_allocated_itemid(::std::string* itemid) {
  if (itemid != NULL) {
    
  } else {
    
  }
  itemid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), itemid);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqBuyItemFromShop.itemID)
}

// int32 count = 2;
inline void ReqBuyItemFromShop::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 ReqBuyItemFromShop::count() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqBuyItemFromShop.count)
  return count_;
}
inline void ReqBuyItemFromShop::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqBuyItemFromShop.count)
}

// -------------------------------------------------------------------

// PVPPlayerInfo

// .NFMsg.Ident id = 1;
inline bool PVPPlayerInfo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::NFMsg::Ident& PVPPlayerInfo::_internal_id() const {
  return *id_;
}
inline const ::NFMsg::Ident& PVPPlayerInfo::id() const {
  const ::NFMsg::Ident* p = id_;
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* PVPPlayerInfo::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.PVPPlayerInfo.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* PVPPlayerInfo::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.PVPPlayerInfo.id)
  return id_;
}
inline void PVPPlayerInfo::set_allocated_id(::NFMsg::Ident* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PVPPlayerInfo.id)
}

// int32 single = 2;
inline void PVPPlayerInfo::clear_single() {
  single_ = 0;
}
inline ::google::protobuf::int32 PVPPlayerInfo::single() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.single)
  return single_;
}
inline void PVPPlayerInfo::set_single(::google::protobuf::int32 value) {
  
  single_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.single)
}

// int32 level = 4;
inline void PVPPlayerInfo::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 PVPPlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.level)
  return level_;
}
inline void PVPPlayerInfo::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.level)
}

// int32 battle_point = 5;
inline void PVPPlayerInfo::clear_battle_point() {
  battle_point_ = 0;
}
inline ::google::protobuf::int32 PVPPlayerInfo::battle_point() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.battle_point)
  return battle_point_;
}
inline void PVPPlayerInfo::set_battle_point(::google::protobuf::int32 value) {
  
  battle_point_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.battle_point)
}

// bytes name = 6;
inline void PVPPlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PVPPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.name)
  return name_.GetNoArena();
}
inline void PVPPlayerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.name)
}
#if LANG_CXX11
inline void PVPPlayerInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PVPPlayerInfo.name)
}
#endif
inline void PVPPlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PVPPlayerInfo.name)
}
inline void PVPPlayerInfo::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PVPPlayerInfo.name)
}
inline ::std::string* PVPPlayerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PVPPlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PVPPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PVPPlayerInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PVPPlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PVPPlayerInfo.name)
}

// bytes head = 7;
inline void PVPPlayerInfo::clear_head() {
  head_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PVPPlayerInfo::head() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.head)
  return head_.GetNoArena();
}
inline void PVPPlayerInfo::set_head(const ::std::string& value) {
  
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.head)
}
#if LANG_CXX11
inline void PVPPlayerInfo::set_head(::std::string&& value) {
  
  head_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PVPPlayerInfo.head)
}
#endif
inline void PVPPlayerInfo::set_head(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PVPPlayerInfo.head)
}
inline void PVPPlayerInfo::set_head(const void* value, size_t size) {
  
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PVPPlayerInfo.head)
}
inline ::std::string* PVPPlayerInfo::mutable_head() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PVPPlayerInfo.head)
  return head_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PVPPlayerInfo::release_head() {
  // @@protoc_insertion_point(field_release:NFMsg.PVPPlayerInfo.head)
  
  return head_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PVPPlayerInfo::set_allocated_head(::std::string* head) {
  if (head != NULL) {
    
  } else {
    
  }
  head_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PVPPlayerInfo.head)
}

// int32 gold = 8;
inline void PVPPlayerInfo::clear_gold() {
  gold_ = 0;
}
inline ::google::protobuf::int32 PVPPlayerInfo::gold() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.gold)
  return gold_;
}
inline void PVPPlayerInfo::set_gold(::google::protobuf::int32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.gold)
}

// int32 diamond = 9;
inline void PVPPlayerInfo::clear_diamond() {
  diamond_ = 0;
}
inline ::google::protobuf::int32 PVPPlayerInfo::diamond() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.diamond)
  return diamond_;
}
inline void PVPPlayerInfo::set_diamond(::google::protobuf::int32 value) {
  
  diamond_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.diamond)
}

// bytes hero_cnf1 = 20;
inline void PVPPlayerInfo::clear_hero_cnf1() {
  hero_cnf1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PVPPlayerInfo::hero_cnf1() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.hero_cnf1)
  return hero_cnf1_.GetNoArena();
}
inline void PVPPlayerInfo::set_hero_cnf1(const ::std::string& value) {
  
  hero_cnf1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.hero_cnf1)
}
#if LANG_CXX11
inline void PVPPlayerInfo::set_hero_cnf1(::std::string&& value) {
  
  hero_cnf1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PVPPlayerInfo.hero_cnf1)
}
#endif
inline void PVPPlayerInfo::set_hero_cnf1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hero_cnf1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PVPPlayerInfo.hero_cnf1)
}
inline void PVPPlayerInfo::set_hero_cnf1(const void* value, size_t size) {
  
  hero_cnf1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PVPPlayerInfo.hero_cnf1)
}
inline ::std::string* PVPPlayerInfo::mutable_hero_cnf1() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PVPPlayerInfo.hero_cnf1)
  return hero_cnf1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PVPPlayerInfo::release_hero_cnf1() {
  // @@protoc_insertion_point(field_release:NFMsg.PVPPlayerInfo.hero_cnf1)
  
  return hero_cnf1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PVPPlayerInfo::set_allocated_hero_cnf1(::std::string* hero_cnf1) {
  if (hero_cnf1 != NULL) {
    
  } else {
    
  }
  hero_cnf1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_cnf1);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PVPPlayerInfo.hero_cnf1)
}

// bytes hero_cnf2 = 21;
inline void PVPPlayerInfo::clear_hero_cnf2() {
  hero_cnf2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PVPPlayerInfo::hero_cnf2() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.hero_cnf2)
  return hero_cnf2_.GetNoArena();
}
inline void PVPPlayerInfo::set_hero_cnf2(const ::std::string& value) {
  
  hero_cnf2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.hero_cnf2)
}
#if LANG_CXX11
inline void PVPPlayerInfo::set_hero_cnf2(::std::string&& value) {
  
  hero_cnf2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PVPPlayerInfo.hero_cnf2)
}
#endif
inline void PVPPlayerInfo::set_hero_cnf2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hero_cnf2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PVPPlayerInfo.hero_cnf2)
}
inline void PVPPlayerInfo::set_hero_cnf2(const void* value, size_t size) {
  
  hero_cnf2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PVPPlayerInfo.hero_cnf2)
}
inline ::std::string* PVPPlayerInfo::mutable_hero_cnf2() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PVPPlayerInfo.hero_cnf2)
  return hero_cnf2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PVPPlayerInfo::release_hero_cnf2() {
  // @@protoc_insertion_point(field_release:NFMsg.PVPPlayerInfo.hero_cnf2)
  
  return hero_cnf2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PVPPlayerInfo::set_allocated_hero_cnf2(::std::string* hero_cnf2) {
  if (hero_cnf2 != NULL) {
    
  } else {
    
  }
  hero_cnf2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_cnf2);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PVPPlayerInfo.hero_cnf2)
}

// bytes hero_cnf3 = 22;
inline void PVPPlayerInfo::clear_hero_cnf3() {
  hero_cnf3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PVPPlayerInfo::hero_cnf3() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.hero_cnf3)
  return hero_cnf3_.GetNoArena();
}
inline void PVPPlayerInfo::set_hero_cnf3(const ::std::string& value) {
  
  hero_cnf3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.hero_cnf3)
}
#if LANG_CXX11
inline void PVPPlayerInfo::set_hero_cnf3(::std::string&& value) {
  
  hero_cnf3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PVPPlayerInfo.hero_cnf3)
}
#endif
inline void PVPPlayerInfo::set_hero_cnf3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hero_cnf3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PVPPlayerInfo.hero_cnf3)
}
inline void PVPPlayerInfo::set_hero_cnf3(const void* value, size_t size) {
  
  hero_cnf3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PVPPlayerInfo.hero_cnf3)
}
inline ::std::string* PVPPlayerInfo::mutable_hero_cnf3() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PVPPlayerInfo.hero_cnf3)
  return hero_cnf3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PVPPlayerInfo::release_hero_cnf3() {
  // @@protoc_insertion_point(field_release:NFMsg.PVPPlayerInfo.hero_cnf3)
  
  return hero_cnf3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PVPPlayerInfo::set_allocated_hero_cnf3(::std::string* hero_cnf3) {
  if (hero_cnf3 != NULL) {
    
  } else {
    
  }
  hero_cnf3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_cnf3);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PVPPlayerInfo.hero_cnf3)
}

// int32 hero_star1 = 25;
inline void PVPPlayerInfo::clear_hero_star1() {
  hero_star1_ = 0;
}
inline ::google::protobuf::int32 PVPPlayerInfo::hero_star1() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.hero_star1)
  return hero_star1_;
}
inline void PVPPlayerInfo::set_hero_star1(::google::protobuf::int32 value) {
  
  hero_star1_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.hero_star1)
}

// int32 hero_star2 = 26;
inline void PVPPlayerInfo::clear_hero_star2() {
  hero_star2_ = 0;
}
inline ::google::protobuf::int32 PVPPlayerInfo::hero_star2() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.hero_star2)
  return hero_star2_;
}
inline void PVPPlayerInfo::set_hero_star2(::google::protobuf::int32 value) {
  
  hero_star2_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.hero_star2)
}

// int32 hero_star3 = 27;
inline void PVPPlayerInfo::clear_hero_star3() {
  hero_star3_ = 0;
}
inline ::google::protobuf::int32 PVPPlayerInfo::hero_star3() const {
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.hero_star3)
  return hero_star3_;
}
inline void PVPPlayerInfo::set_hero_star3(::google::protobuf::int32 value) {
  
  hero_star3_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PVPPlayerInfo.hero_star3)
}

// .NFMsg.Ident hero_id1 = 28;
inline bool PVPPlayerInfo::has_hero_id1() const {
  return this != internal_default_instance() && hero_id1_ != NULL;
}
inline const ::NFMsg::Ident& PVPPlayerInfo::_internal_hero_id1() const {
  return *hero_id1_;
}
inline const ::NFMsg::Ident& PVPPlayerInfo::hero_id1() const {
  const ::NFMsg::Ident* p = hero_id1_;
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.hero_id1)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* PVPPlayerInfo::release_hero_id1() {
  // @@protoc_insertion_point(field_release:NFMsg.PVPPlayerInfo.hero_id1)
  
  ::NFMsg::Ident* temp = hero_id1_;
  hero_id1_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* PVPPlayerInfo::mutable_hero_id1() {
  
  if (hero_id1_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    hero_id1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.PVPPlayerInfo.hero_id1)
  return hero_id1_;
}
inline void PVPPlayerInfo::set_allocated_hero_id1(::NFMsg::Ident* hero_id1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hero_id1_);
  }
  if (hero_id1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hero_id1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hero_id1, submessage_arena);
    }
    
  } else {
    
  }
  hero_id1_ = hero_id1;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PVPPlayerInfo.hero_id1)
}

// .NFMsg.Ident hero_id2 = 29;
inline bool PVPPlayerInfo::has_hero_id2() const {
  return this != internal_default_instance() && hero_id2_ != NULL;
}
inline const ::NFMsg::Ident& PVPPlayerInfo::_internal_hero_id2() const {
  return *hero_id2_;
}
inline const ::NFMsg::Ident& PVPPlayerInfo::hero_id2() const {
  const ::NFMsg::Ident* p = hero_id2_;
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.hero_id2)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* PVPPlayerInfo::release_hero_id2() {
  // @@protoc_insertion_point(field_release:NFMsg.PVPPlayerInfo.hero_id2)
  
  ::NFMsg::Ident* temp = hero_id2_;
  hero_id2_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* PVPPlayerInfo::mutable_hero_id2() {
  
  if (hero_id2_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    hero_id2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.PVPPlayerInfo.hero_id2)
  return hero_id2_;
}
inline void PVPPlayerInfo::set_allocated_hero_id2(::NFMsg::Ident* hero_id2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hero_id2_);
  }
  if (hero_id2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hero_id2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hero_id2, submessage_arena);
    }
    
  } else {
    
  }
  hero_id2_ = hero_id2;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PVPPlayerInfo.hero_id2)
}

// .NFMsg.Ident hero_id3 = 30;
inline bool PVPPlayerInfo::has_hero_id3() const {
  return this != internal_default_instance() && hero_id3_ != NULL;
}
inline const ::NFMsg::Ident& PVPPlayerInfo::_internal_hero_id3() const {
  return *hero_id3_;
}
inline const ::NFMsg::Ident& PVPPlayerInfo::hero_id3() const {
  const ::NFMsg::Ident* p = hero_id3_;
  // @@protoc_insertion_point(field_get:NFMsg.PVPPlayerInfo.hero_id3)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* PVPPlayerInfo::release_hero_id3() {
  // @@protoc_insertion_point(field_release:NFMsg.PVPPlayerInfo.hero_id3)
  
  ::NFMsg::Ident* temp = hero_id3_;
  hero_id3_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* PVPPlayerInfo::mutable_hero_id3() {
  
  if (hero_id3_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    hero_id3_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.PVPPlayerInfo.hero_id3)
  return hero_id3_;
}
inline void PVPPlayerInfo::set_allocated_hero_id3(::NFMsg::Ident* hero_id3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hero_id3_);
  }
  if (hero_id3) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hero_id3 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hero_id3, submessage_arena);
    }
    
  } else {
    
  }
  hero_id3_ = hero_id3;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PVPPlayerInfo.hero_id3)
}

// -------------------------------------------------------------------

// ReqSearchOppnent

// int32 self_scene = 1;
inline void ReqSearchOppnent::clear_self_scene() {
  self_scene_ = 0;
}
inline ::google::protobuf::int32 ReqSearchOppnent::self_scene() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSearchOppnent.self_scene)
  return self_scene_;
}
inline void ReqSearchOppnent::set_self_scene(::google::protobuf::int32 value) {
  
  self_scene_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqSearchOppnent.self_scene)
}

// int32 diamond = 2;
inline void ReqSearchOppnent::clear_diamond() {
  diamond_ = 0;
}
inline ::google::protobuf::int32 ReqSearchOppnent::diamond() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSearchOppnent.diamond)
  return diamond_;
}
inline void ReqSearchOppnent::set_diamond(::google::protobuf::int32 value) {
  
  diamond_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqSearchOppnent.diamond)
}

// int32 battle_point = 3;
inline void ReqSearchOppnent::clear_battle_point() {
  battle_point_ = 0;
}
inline ::google::protobuf::int32 ReqSearchOppnent::battle_point() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSearchOppnent.battle_point)
  return battle_point_;
}
inline void ReqSearchOppnent::set_battle_point(::google::protobuf::int32 value) {
  
  battle_point_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqSearchOppnent.battle_point)
}

// repeated .NFMsg.Ident friends = 10;
inline int ReqSearchOppnent::friends_size() const {
  return friends_.size();
}
inline ::NFMsg::Ident* ReqSearchOppnent::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqSearchOppnent.friends)
  return friends_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
ReqSearchOppnent::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqSearchOppnent.friends)
  return &friends_;
}
inline const ::NFMsg::Ident& ReqSearchOppnent::friends(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSearchOppnent.friends)
  return friends_.Get(index);
}
inline ::NFMsg::Ident* ReqSearchOppnent::add_friends() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqSearchOppnent.friends)
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
ReqSearchOppnent::friends() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqSearchOppnent.friends)
  return friends_;
}

// -------------------------------------------------------------------

// AckSearchOppnent

// int32 scene_id = 1;
inline void AckSearchOppnent::clear_scene_id() {
  scene_id_ = 0;
}
inline ::google::protobuf::int32 AckSearchOppnent::scene_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchOppnent.scene_id)
  return scene_id_;
}
inline void AckSearchOppnent::set_scene_id(::google::protobuf::int32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckSearchOppnent.scene_id)
}

// .NFMsg.Ident team_id = 2;
inline bool AckSearchOppnent::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& AckSearchOppnent::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& AckSearchOppnent::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchOppnent.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckSearchOppnent::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.AckSearchOppnent.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckSearchOppnent::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckSearchOppnent.team_id)
  return team_id_;
}
inline void AckSearchOppnent::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckSearchOppnent.team_id)
}

// int32 gamble_diamond = 3;
inline void AckSearchOppnent::clear_gamble_diamond() {
  gamble_diamond_ = 0;
}
inline ::google::protobuf::int32 AckSearchOppnent::gamble_diamond() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchOppnent.gamble_diamond)
  return gamble_diamond_;
}
inline void AckSearchOppnent::set_gamble_diamond(::google::protobuf::int32 value) {
  
  gamble_diamond_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckSearchOppnent.gamble_diamond)
}

// repeated .NFMsg.Ident team_members = 5;
inline int AckSearchOppnent::team_members_size() const {
  return team_members_.size();
}
inline ::NFMsg::Ident* AckSearchOppnent::mutable_team_members(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckSearchOppnent.team_members)
  return team_members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
AckSearchOppnent::mutable_team_members() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckSearchOppnent.team_members)
  return &team_members_;
}
inline const ::NFMsg::Ident& AckSearchOppnent::team_members(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchOppnent.team_members)
  return team_members_.Get(index);
}
inline ::NFMsg::Ident* AckSearchOppnent::add_team_members() {
  // @@protoc_insertion_point(field_add:NFMsg.AckSearchOppnent.team_members)
  return team_members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
AckSearchOppnent::team_members() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckSearchOppnent.team_members)
  return team_members_;
}

// .NFMsg.PVPPlayerInfo opponent = 14;
inline bool AckSearchOppnent::has_opponent() const {
  return this != internal_default_instance() && opponent_ != NULL;
}
inline void AckSearchOppnent::clear_opponent() {
  if (GetArenaNoVirtual() == NULL && opponent_ != NULL) {
    delete opponent_;
  }
  opponent_ = NULL;
}
inline const ::NFMsg::PVPPlayerInfo& AckSearchOppnent::_internal_opponent() const {
  return *opponent_;
}
inline const ::NFMsg::PVPPlayerInfo& AckSearchOppnent::opponent() const {
  const ::NFMsg::PVPPlayerInfo* p = opponent_;
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchOppnent.opponent)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::PVPPlayerInfo*>(
      &::NFMsg::_PVPPlayerInfo_default_instance_);
}
inline ::NFMsg::PVPPlayerInfo* AckSearchOppnent::release_opponent() {
  // @@protoc_insertion_point(field_release:NFMsg.AckSearchOppnent.opponent)
  
  ::NFMsg::PVPPlayerInfo* temp = opponent_;
  opponent_ = NULL;
  return temp;
}
inline ::NFMsg::PVPPlayerInfo* AckSearchOppnent::mutable_opponent() {
  
  if (opponent_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::PVPPlayerInfo>(GetArenaNoVirtual());
    opponent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckSearchOppnent.opponent)
  return opponent_;
}
inline void AckSearchOppnent::set_allocated_opponent(::NFMsg::PVPPlayerInfo* opponent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opponent_;
  }
  if (opponent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opponent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opponent, submessage_arena);
    }
    
  } else {
    
  }
  opponent_ = opponent;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckSearchOppnent.opponent)
}

// repeated .NFMsg.ReqAddSceneBuilding buildings = 20;
inline int AckSearchOppnent::buildings_size() const {
  return buildings_.size();
}
inline void AckSearchOppnent::clear_buildings() {
  buildings_.Clear();
}
inline ::NFMsg::ReqAddSceneBuilding* AckSearchOppnent::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckSearchOppnent.buildings)
  return buildings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >*
AckSearchOppnent::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckSearchOppnent.buildings)
  return &buildings_;
}
inline const ::NFMsg::ReqAddSceneBuilding& AckSearchOppnent::buildings(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSearchOppnent.buildings)
  return buildings_.Get(index);
}
inline ::NFMsg::ReqAddSceneBuilding* AckSearchOppnent::add_buildings() {
  // @@protoc_insertion_point(field_add:NFMsg.AckSearchOppnent.buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::ReqAddSceneBuilding >&
AckSearchOppnent::buildings() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckSearchOppnent.buildings)
  return buildings_;
}

// -------------------------------------------------------------------

// ReqAckCancelSearch

// .NFMsg.Ident selfid = 1;
inline bool ReqAckCancelSearch::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::NFMsg::Ident& ReqAckCancelSearch::_internal_selfid() const {
  return *selfid_;
}
inline const ::NFMsg::Ident& ReqAckCancelSearch::selfid() const {
  const ::NFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckCancelSearch.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqAckCancelSearch::release_selfid() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckCancelSearch.selfid)
  
  ::NFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqAckCancelSearch::mutable_selfid() {
  
  if (selfid_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    selfid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckCancelSearch.selfid)
  return selfid_;
}
inline void ReqAckCancelSearch::set_allocated_selfid(::NFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckCancelSearch.selfid)
}

// -------------------------------------------------------------------

// ReqEndBattle

// int32 auto_end = 1;
inline void ReqEndBattle::clear_auto_end() {
  auto_end_ = 0;
}
inline ::google::protobuf::int32 ReqEndBattle::auto_end() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEndBattle.auto_end)
  return auto_end_;
}
inline void ReqEndBattle::set_auto_end(::google::protobuf::int32 value) {
  
  auto_end_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqEndBattle.auto_end)
}

// -------------------------------------------------------------------

// AckEndBattle

// int32 win = 1;
inline void AckEndBattle::clear_win() {
  win_ = 0;
}
inline ::google::protobuf::int32 AckEndBattle::win() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckEndBattle.win)
  return win_;
}
inline void AckEndBattle::set_win(::google::protobuf::int32 value) {
  
  win_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckEndBattle.win)
}

// int32 star = 2;
inline void AckEndBattle::clear_star() {
  star_ = 0;
}
inline ::google::protobuf::int32 AckEndBattle::star() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckEndBattle.star)
  return star_;
}
inline void AckEndBattle::set_star(::google::protobuf::int32 value) {
  
  star_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckEndBattle.star)
}

// int32 gold = 3;
inline void AckEndBattle::clear_gold() {
  gold_ = 0;
}
inline ::google::protobuf::int32 AckEndBattle::gold() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckEndBattle.gold)
  return gold_;
}
inline void AckEndBattle::set_gold(::google::protobuf::int32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckEndBattle.gold)
}

// int32 cup = 4;
inline void AckEndBattle::clear_cup() {
  cup_ = 0;
}
inline ::google::protobuf::int32 AckEndBattle::cup() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckEndBattle.cup)
  return cup_;
}
inline void AckEndBattle::set_cup(::google::protobuf::int32 value) {
  
  cup_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckEndBattle.cup)
}

// int32 diamond = 5;
inline void AckEndBattle::clear_diamond() {
  diamond_ = 0;
}
inline ::google::protobuf::int32 AckEndBattle::diamond() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckEndBattle.diamond)
  return diamond_;
}
inline void AckEndBattle::set_diamond(::google::protobuf::int32 value) {
  
  diamond_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckEndBattle.diamond)
}

// int32 single = 6;
inline void AckEndBattle::clear_single() {
  single_ = 0;
}
inline ::google::protobuf::int32 AckEndBattle::single() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckEndBattle.single)
  return single_;
}
inline void AckEndBattle::set_single(::google::protobuf::int32 value) {
  
  single_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckEndBattle.single)
}

// .NFMsg.Ident team_id = 7;
inline bool AckEndBattle::has_team_id() const {
  return this != internal_default_instance() && team_id_ != NULL;
}
inline const ::NFMsg::Ident& AckEndBattle::_internal_team_id() const {
  return *team_id_;
}
inline const ::NFMsg::Ident& AckEndBattle::team_id() const {
  const ::NFMsg::Ident* p = team_id_;
  // @@protoc_insertion_point(field_get:NFMsg.AckEndBattle.team_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckEndBattle::release_team_id() {
  // @@protoc_insertion_point(field_release:NFMsg.AckEndBattle.team_id)
  
  ::NFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckEndBattle::mutable_team_id() {
  
  if (team_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    team_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckEndBattle.team_id)
  return team_id_;
}
inline void AckEndBattle::set_allocated_team_id(::NFMsg::Ident* team_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      team_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckEndBattle.team_id)
}

// .NFMsg.Ident match_id = 8;
inline bool AckEndBattle::has_match_id() const {
  return this != internal_default_instance() && match_id_ != NULL;
}
inline const ::NFMsg::Ident& AckEndBattle::_internal_match_id() const {
  return *match_id_;
}
inline const ::NFMsg::Ident& AckEndBattle::match_id() const {
  const ::NFMsg::Ident* p = match_id_;
  // @@protoc_insertion_point(field_get:NFMsg.AckEndBattle.match_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckEndBattle::release_match_id() {
  // @@protoc_insertion_point(field_release:NFMsg.AckEndBattle.match_id)
  
  ::NFMsg::Ident* temp = match_id_;
  match_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckEndBattle::mutable_match_id() {
  
  if (match_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    match_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckEndBattle.match_id)
  return match_id_;
}
inline void AckEndBattle::set_allocated_match_id(::NFMsg::Ident* match_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(match_id_);
  }
  if (match_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      match_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, match_id, submessage_arena);
    }
    
  } else {
    
  }
  match_id_ = match_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckEndBattle.match_id)
}

// repeated .NFMsg.Ident members = 9;
inline int AckEndBattle::members_size() const {
  return members_.size();
}
inline ::NFMsg::Ident* AckEndBattle::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckEndBattle.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
AckEndBattle::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckEndBattle.members)
  return &members_;
}
inline const ::NFMsg::Ident& AckEndBattle::members(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckEndBattle.members)
  return members_.Get(index);
}
inline ::NFMsg::Ident* AckEndBattle::add_members() {
  // @@protoc_insertion_point(field_add:NFMsg.AckEndBattle.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
AckEndBattle::members() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckEndBattle.members)
  return members_;
}

// repeated .NFMsg.ItemStruct item_list = 10;
inline int AckEndBattle::item_list_size() const {
  return item_list_.size();
}
inline void AckEndBattle::clear_item_list() {
  item_list_.Clear();
}
inline ::NFMsg::ItemStruct* AckEndBattle::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckEndBattle.item_list)
  return item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::ItemStruct >*
AckEndBattle::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckEndBattle.item_list)
  return &item_list_;
}
inline const ::NFMsg::ItemStruct& AckEndBattle::item_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckEndBattle.item_list)
  return item_list_.Get(index);
}
inline ::NFMsg::ItemStruct* AckEndBattle::add_item_list() {
  // @@protoc_insertion_point(field_add:NFMsg.AckEndBattle.item_list)
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::ItemStruct >&
AckEndBattle::item_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckEndBattle.item_list)
  return item_list_;
}

// -------------------------------------------------------------------

// ReqSendMail

// .NFMsg.Ident reciever = 1;
inline bool ReqSendMail::has_reciever() const {
  return this != internal_default_instance() && reciever_ != NULL;
}
inline const ::NFMsg::Ident& ReqSendMail::_internal_reciever() const {
  return *reciever_;
}
inline const ::NFMsg::Ident& ReqSendMail::reciever() const {
  const ::NFMsg::Ident* p = reciever_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqSendMail.reciever)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqSendMail::release_reciever() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqSendMail.reciever)
  
  ::NFMsg::Ident* temp = reciever_;
  reciever_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqSendMail::mutable_reciever() {
  
  if (reciever_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    reciever_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqSendMail.reciever)
  return reciever_;
}
inline void ReqSendMail::set_allocated_reciever(::NFMsg::Ident* reciever) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reciever_);
  }
  if (reciever) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reciever = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reciever, submessage_arena);
    }
    
  } else {
    
  }
  reciever_ = reciever;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqSendMail.reciever)
}

// repeated .NFMsg.ItemStruct item_list = 2;
inline int ReqSendMail::item_list_size() const {
  return item_list_.size();
}
inline void ReqSendMail::clear_item_list() {
  item_list_.Clear();
}
inline ::NFMsg::ItemStruct* ReqSendMail::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqSendMail.item_list)
  return item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::ItemStruct >*
ReqSendMail::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqSendMail.item_list)
  return &item_list_;
}
inline const ::NFMsg::ItemStruct& ReqSendMail::item_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSendMail.item_list)
  return item_list_.Get(index);
}
inline ::NFMsg::ItemStruct* ReqSendMail::add_item_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqSendMail.item_list)
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::ItemStruct >&
ReqSendMail::item_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqSendMail.item_list)
  return item_list_;
}

// repeated .NFMsg.CurrencyStruct currency_list = 3;
inline int ReqSendMail::currency_list_size() const {
  return currency_list_.size();
}
inline void ReqSendMail::clear_currency_list() {
  currency_list_.Clear();
}
inline ::NFMsg::CurrencyStruct* ReqSendMail::mutable_currency_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqSendMail.currency_list)
  return currency_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::CurrencyStruct >*
ReqSendMail::mutable_currency_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqSendMail.currency_list)
  return &currency_list_;
}
inline const ::NFMsg::CurrencyStruct& ReqSendMail::currency_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSendMail.currency_list)
  return currency_list_.Get(index);
}
inline ::NFMsg::CurrencyStruct* ReqSendMail::add_currency_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqSendMail.currency_list)
  return currency_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::CurrencyStruct >&
ReqSendMail::currency_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqSendMail.currency_list)
  return currency_list_;
}

// -------------------------------------------------------------------

// ReqSwitchServer

// .NFMsg.Ident selfid = 1;
inline bool ReqSwitchServer::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::NFMsg::Ident& ReqSwitchServer::_internal_selfid() const {
  return *selfid_;
}
inline const ::NFMsg::Ident& ReqSwitchServer::selfid() const {
  const ::NFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqSwitchServer.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqSwitchServer::release_selfid() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqSwitchServer.selfid)
  
  ::NFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqSwitchServer::mutable_selfid() {
  
  if (selfid_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    selfid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqSwitchServer.selfid)
  return selfid_;
}
inline void ReqSwitchServer::set_allocated_selfid(::NFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqSwitchServer.selfid)
}

// int64 self_serverid = 2;
inline void ReqSwitchServer::clear_self_serverid() {
  self_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqSwitchServer::self_serverid() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSwitchServer.self_serverid)
  return self_serverid_;
}
inline void ReqSwitchServer::set_self_serverid(::google::protobuf::int64 value) {
  
  self_serverid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqSwitchServer.self_serverid)
}

// int64 target_serverid = 3;
inline void ReqSwitchServer::clear_target_serverid() {
  target_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqSwitchServer::target_serverid() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSwitchServer.target_serverid)
  return target_serverid_;
}
inline void ReqSwitchServer::set_target_serverid(::google::protobuf::int64 value) {
  
  target_serverid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqSwitchServer.target_serverid)
}

// int64 gate_serverid = 4;
inline void ReqSwitchServer::clear_gate_serverid() {
  gate_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqSwitchServer::gate_serverid() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSwitchServer.gate_serverid)
  return gate_serverid_;
}
inline void ReqSwitchServer::set_gate_serverid(::google::protobuf::int64 value) {
  
  gate_serverid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqSwitchServer.gate_serverid)
}

// int64 SceneID = 5;
inline void ReqSwitchServer::clear_sceneid() {
  sceneid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqSwitchServer::sceneid() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSwitchServer.SceneID)
  return sceneid_;
}
inline void ReqSwitchServer::set_sceneid(::google::protobuf::int64 value) {
  
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqSwitchServer.SceneID)
}

// .NFMsg.Ident client_id = 6;
inline bool ReqSwitchServer::has_client_id() const {
  return this != internal_default_instance() && client_id_ != NULL;
}
inline const ::NFMsg::Ident& ReqSwitchServer::_internal_client_id() const {
  return *client_id_;
}
inline const ::NFMsg::Ident& ReqSwitchServer::client_id() const {
  const ::NFMsg::Ident* p = client_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqSwitchServer.client_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqSwitchServer::release_client_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqSwitchServer.client_id)
  
  ::NFMsg::Ident* temp = client_id_;
  client_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqSwitchServer::mutable_client_id() {
  
  if (client_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    client_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqSwitchServer.client_id)
  return client_id_;
}
inline void ReqSwitchServer::set_allocated_client_id(::NFMsg::Ident* client_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqSwitchServer.client_id)
}

// int64 groupID = 7;
inline void ReqSwitchServer::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqSwitchServer::groupid() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqSwitchServer.groupID)
  return groupid_;
}
inline void ReqSwitchServer::set_groupid(::google::protobuf::int64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqSwitchServer.groupID)
}

// -------------------------------------------------------------------

// AckSwitchServer

// .NFMsg.Ident selfid = 1;
inline bool AckSwitchServer::has_selfid() const {
  return this != internal_default_instance() && selfid_ != NULL;
}
inline const ::NFMsg::Ident& AckSwitchServer::_internal_selfid() const {
  return *selfid_;
}
inline const ::NFMsg::Ident& AckSwitchServer::selfid() const {
  const ::NFMsg::Ident* p = selfid_;
  // @@protoc_insertion_point(field_get:NFMsg.AckSwitchServer.selfid)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* AckSwitchServer::release_selfid() {
  // @@protoc_insertion_point(field_release:NFMsg.AckSwitchServer.selfid)
  
  ::NFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* AckSwitchServer::mutable_selfid() {
  
  if (selfid_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    selfid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.AckSwitchServer.selfid)
  return selfid_;
}
inline void AckSwitchServer::set_allocated_selfid(::NFMsg::Ident* selfid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(selfid_);
  }
  if (selfid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selfid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selfid, submessage_arena);
    }
    
  } else {
    
  }
  selfid_ = selfid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.AckSwitchServer.selfid)
}

// int64 self_serverid = 2;
inline void AckSwitchServer::clear_self_serverid() {
  self_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AckSwitchServer::self_serverid() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSwitchServer.self_serverid)
  return self_serverid_;
}
inline void AckSwitchServer::set_self_serverid(::google::protobuf::int64 value) {
  
  self_serverid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckSwitchServer.self_serverid)
}

// int64 target_serverid = 3;
inline void AckSwitchServer::clear_target_serverid() {
  target_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AckSwitchServer::target_serverid() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSwitchServer.target_serverid)
  return target_serverid_;
}
inline void AckSwitchServer::set_target_serverid(::google::protobuf::int64 value) {
  
  target_serverid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckSwitchServer.target_serverid)
}

// int64 gate_serverid = 4;
inline void AckSwitchServer::clear_gate_serverid() {
  gate_serverid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AckSwitchServer::gate_serverid() const {
  // @@protoc_insertion_point(field_get:NFMsg.AckSwitchServer.gate_serverid)
  return gate_serverid_;
}
inline void AckSwitchServer::set_gate_serverid(::google::protobuf::int64 value) {
  
  gate_serverid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.AckSwitchServer.gate_serverid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFMsg::ReqAckSynData_SynType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckSynData_SynType>() {
  return ::NFMsg::ReqAckSynData_SynType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ReqAckPlayerChat_ChatContainer_ContainerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckPlayerChat_ChatContainer_ContainerType>() {
  return ::NFMsg::ReqAckPlayerChat_ChatContainer_ContainerType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ReqAckPlayerChat_EGameChatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckPlayerChat_EGameChatType>() {
  return ::NFMsg::ReqAckPlayerChat_EGameChatType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::EffectData_EResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EffectData_EResultType>() {
  return ::NFMsg::EffectData_EResultType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ReqAckSwapScene_EGameSwapType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckSwapScene_EGameSwapType>() {
  return ::NFMsg::ReqAckSwapScene_EGameSwapType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ReqAckOprClanMember_EGClanMemberOprType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckOprClanMember_EGClanMemberOprType>() {
  return ::NFMsg::ReqAckOprClanMember_EGClanMemberOprType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_NFMsgShare_2eproto
