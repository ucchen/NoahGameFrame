syntax = "proto3";

package NFMsg; 

import "NFDefine.proto";
import "NFMsgBase.proto";


//除 去基础对象身上的属性外，这里全部游戏中的逻辑协议

message ReqEnterGameServer
{
	Ident 		id = 1;
	bytes 		account = 2;
    int32 		game_id = 3;
	bytes 		name = 4;
}

message ReqAckEnterGameSuccess
{
    int32 		arg = 1;
}

message ReqHeartBeat
{
    int32 		arg = 1;
}

message ReqLeaveGameServer
{
    int32 		arg = 1;
}

message PlayerEntryInfo//对象出现基本信息
{
	Ident	object_guid = 1;
	float	x = 2;
	float	y = 3;
	float	z = 4;
	int32	career_type = 5;
	int32	player_state = 6;
	bytes  config_id = 7;
	int32  scene_id = 8;
	bytes  class_id = 9;
}

message AckPlayerEntryList//对象出现列表
{
	repeated PlayerEntryInfo object_list = 1;
}

message AckPlayerLeaveList//对象离去列表
{
	repeated Ident 	object_list = 1;
}

message ReqAckSynData//message sysn
{
	enum SynType
	{
		EST_UNKNOW = 0;//
		EST_GROUP = 1;	//层
		EST_SCENE = 2;	//场景
		EST_CLAN = 3;	//公会
		EST_FRIEND = 4;	//好友
	}
	Ident 		syser = 1;
	repeated Ident 		object_list = 2;
	bytes  	data = 3;
	SynType  	syn_type = 4;
	ESynMsgID	msg_id = 5;//有消息ID限制
}


////////////////////////////////////////////////////////////////////////////////////////////////////
message ReqAckPlayerMove
{
	Ident 	mover = 1;
	int32  moveType = 2;//future_state
	float speed = 3;
	int32 time = 4;
	int32 lastState = 5;
	repeated Vector3 target_pos = 6;
	repeated Vector3 source_pos = 7;
	repeated Vector3 move_direction = 8;
}
		
message ReqAckPlayerChat
{
	enum EGameChatType
	{
		EGCT_CLAN = 0;
		EGCT_PRIVATE = 1;
		EGCT_TEAM = 2;
		EGCT_WORLD = 3;
	}
	
	message ChatContainer
	{
		enum ContainerType
		{
			EGCT_UNKNOW = 0;//
			EGCT_ITEM = 1;	//道具
		}
	
		int32 ConTainerType = 2;
		bytes data_info = 3;
	}


	Ident	chat_id = 1;
	EGameChatType  chat_type = 2;
	bytes chat_info = 3;
	bytes chat_name = 4;
	Ident	target_id = 5;
	repeated ChatContainer Container_data = 6;
}

message ReqAckPlayerPosSync
{
	Ident 	mover = 1;
	int32 time = 2;
	float InterpolationTime = 3;
	Vector3 position = 4;
    Vector3 direction = 5;
    int32 status = 6;
    int32 frame = 7;
}

////////////////////////////

message EffectData
{
	enum EResultType
	{
		EET_FAIL = 0;
		EET_SUCCESS = 1;
		EET_REFUSE = 2;
		EET_MISS = 3;	
		EET_CRIT = 4;	
	}
	Ident 			effect_ident = 1;
	int32  		effect_value = 2;
	EResultType  	effect_rlt = 3;
}

message ReqAckUseSkill
{
	Ident 	user = 1;
	bytes skill_id = 2;
	int32  use_index = 3;//因为客户端要先展示
	repeated EffectData 	effect_data = 4;
}

message ReqAckUseItem
{
	Ident 	user = 1;
	Ident item_guid	= 2;
	repeated EffectData 	effect_data = 3;
	ItemStruct 	item = 4;
	Ident 			targetid = 5;
	Vector3 		position = 6;
}

/////////////////////////////////////////
//EGMI_REQ_SWAP_SCENE
message ReqAckSwapScene
{
	enum EGameSwapType
	{
		EGST_NARMAL = 0;//普通城镇传送
		EGST_CLONE = 1;//普通副本
		EGST_ARENA = 2;//竞技场
		EGST_MIRROR = 3;//镜像空间
	}

	EGameSwapType		transfer_type = 1;
	int32		scene_id = 2;
	int32		line_id = 3;
	float 		x = 4;
	float 		y = 5;
	float 		z = 6;
	bytes 	data = 7;
}
//EGMI_REQ_SWAP_HOME_SCENE
message ReqAckHomeScene
{
	bytes 	data = 1;
}

message ItemStruct
{
    bytes item_id            = 1; // 配置ID
    int32 item_count          = 2; // 数量
}

message CurrencyStruct
{
    int32 currency_type        = 1;// 金币，钻石，体力等等东西的类型
    int32 currency_count       = 2;// 数量
}



//EGEC_REQ_RELIVE_HERO						= 1522;		 //
message ReqAckReliveHero
{
	int32	diamond 				= 1;
	Ident 	hero_id = 2;
}

message ReqPickDropItem//拾取物品
{
	Ident item_guid = 2;
}

message ReqAcceptTask//接受任务
{
	bytes task_id = 1;
}

message ReqCompeleteTask//完成任务后申请领奖
{
	bytes task_id = 1;
}

//EGMI_REQ_ADD_BUILDING						= 5000; 	//
message ReqAddSceneBuilding
{
	Vector3 pos = 1;
	Ident guid = 2;
	Ident master = 3;
	bytes config_id = 4;
	int32 scene_id = 5;
	bytes master_name = 6;
	int32 is_home_scene = 7;//is home or clan scene
	int32 is_building = 8;//building or tree
}

message ReqSceneBuildings
{
	int32 scene_id = 1;
	Vector3 pos = 2;
}

message AckSceneBuildings
{
	repeated ReqAddSceneBuilding buildings = 1;
}

message ReqStoreSceneBuildings
{
	Ident guid = 1;
	int32 home_scene_id = 2;
	repeated ReqAddSceneBuilding buildings = 3;
}


///////////////工会/////////////////////////////////////////////////////////////////////////////////////
//EGMI_REQ_CREATE_CLAN                       = 300; // 申请创建公会 EGMI_ACK_CREATE_CLAN						= 301; // 创建公会结果
message ReqAckCreateClan
{
    Ident		clan_id = 1;
    bytes 		clan_name = 2;
}
//EGMI_REQ_SEARCH_CLAN                       = 308; // 申请搜索公会
message ReqSearchClan
{
    bytes 		clan_name = 1;
}
//EGMI_ACK_SEARCH_CLAN                       = 309; // 返回搜索公会
message AckSearchClan
{
	message SearchClanObject
	{
		Ident		clan_ID 	= 1;
		bytes		clan_name 	= 2;
		bytes		clan_icon 	= 3;
		int32		clan_member_count 	= 4;
		int32		clan_member_max_count 	= 5;
		int32		clan_honor 	= 6;
		int32		clan_rank 	= 7;
	}
	
	repeated SearchClanObject clan_list = 1;
}
//EGMI_REQ_JOIN_CLAN                         = 302; // 申请加入公会 EGMI_ACK_JOIN_CLAN							= 303; // 加入公会结果
message ReqAckJoinClan
{
    Ident		clan_id = 1;
    bytes		clan_name = 2;
}
//EGMI_ACK_LEAVE_CLAN						= 305; // 离开公会结果 
message ReqAckLeaveClan
{
    Ident		clan_id = 1;
    bytes		clan_name = 2;
}


//操作成员 EGMI_REQ_OPR_CLAN                        	= 306; // 申请成员操作 EGMI_ACK_OPR_CLAN                        	= 307; // 成员操作结果
message ReqAckOprClanMember
{
	enum EGClanMemberOprType
	{
		EGAT_DOWN = 0;
		EGAT_UP = 1;
		EGAT_KICK = 2;
	}
    Ident						clan_id = 1;
    Ident						member_id = 2;//被操作的ID
    EGClanMemberOprType		type = 3;
}


//EGMI_ReqEnterClanEctype					= 315; // 
message ReqEnterClanEctype
{	
	Ident		clan_id				= 1;
}

//EGEC_REQ_SET_FIGHT_HERO						= 508;		 // 战斗武将
message ReqSetFightHero
{	
	Ident		Heroid				= 1;//
	int32		Set	    			= 2;//0,1,2
}

//EGEC_REQ_SWITCH_FIGHT_HERO						= 508;		 // 战斗武将
message ReqSwitchFightHero
{
	Ident		Heroid				= 1;
}

//EGMI_REQ_BUY_FORM_SHOP
message ReqBuyItemFromShop
{
	bytes		itemID				= 1;
	int32		count				= 2;
}

//////////////////////////pvp//////////////////////////////////////////////////////////////////////////

message PVPPlayerInfo
{
	Ident id = 1;
	int32 single = 2;
	int32 level = 4;
	int32 battle_point = 5;
	bytes name = 6;
	bytes head = 7;
	int32 gold = 8;
	int32 diamond = 9;
	
	bytes hero_cnf1 = 20;
	bytes hero_cnf2 = 21;
	bytes hero_cnf3 = 22;
	
	int32 hero_star1 = 25;
	int32 hero_star2 = 26;
	int32 hero_star3 = 27;
	
	
	Ident hero_id1 = 28;
	Ident hero_id2 = 29;
	Ident hero_id3 = 30;
}


//EGMI_REQ_SEARCH_OPPNENT
message ReqSearchOppnent
{
    int32		self_scene = 1;
	int32 		diamond = 2;
	int32 		battle_point = 3;

	repeated Ident friends = 10;
}

//EGMI_ACK_SEARCH_OPPNENT
message AckSearchOppnent
{
    int32 scene_id = 1;
	Ident team_id = 2;
	int32 gamble_diamond = 3;
	repeated Ident team_members = 5;
	
	PVPPlayerInfo opponent = 14;
	
	repeated ReqAddSceneBuilding buildings = 20;
}

//EGMI_REQ_CANCEL_SEARCH
message ReqAckCancelSearch
{
	Ident      selfid              	= 1; // 角色ID
}

//EGMI_REQ_END_OPPNENT
message ReqEndBattle
{
	int32 auto_end = 1;
}

//EGMI_ACK_END_OPPNENT
message AckEndBattle
{
	//下发的时候则为道具列表
	//获得的金币等列表
    int32 win            	= 1; //
    int32 star            	= 2; //
    int32 gold            	= 3; // 副本获得的金币
    int32 cup              = 4; // 副本获得的经验
    int32 diamond          = 5; //
    int32 single          	= 6; //
	Ident 					team_id = 7;
	Ident 					match_id = 8;
    repeated Ident members   = 9;
    repeated ItemStruct item_list   = 10; // 副本获得的道具列表
}
/////////////////////////////////////////////////////

//EGEC_REQ_SEND_MAIL = 700; // 发送邮件
message ReqSendMail
{
    Ident      reciever            = 1; // 目标ID
    repeated ItemStruct item_list           = 2; // 
    repeated CurrencyStruct currency_list   = 3;
}

//EGEC_REQSWICHSERVER							= 210;		 // 申请转服
message ReqSwitchServer
{
	Ident      selfid              	= 1; // 角色ID
	int64      self_serverid		= 2; // 本来所在的服务器
	int64      target_serverid		= 3; // 目标ID
	int64      gate_serverid		= 4; // 目标ID
	int64      SceneID			= 5; // 
	Ident      client_id			= 6; // 客户端id
	int64      groupID			= 7; //  group
}

//EGEC_ACKSWICHSERVER							= 211;		 // 申请转服
message AckSwitchServer
{
	Ident      selfid              	= 1; // 角色ID
	int64      self_serverid		= 2; // 目标ID
	int64      target_serverid		= 3; // 目标ID
	int64      gate_serverid		= 4; // 目标ID
}
