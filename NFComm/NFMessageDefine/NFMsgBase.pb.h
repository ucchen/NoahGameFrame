// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgBase.proto

#ifndef PROTOBUF_INCLUDED_NFMsgBase_2eproto
#define PROTOBUF_INCLUDED_NFMsgBase_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgBase_2eproto LIBPROTOC_EXPORT

namespace protobuf_NFMsgBase_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[38];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_NFMsgBase_2eproto
namespace NFMsg {
class Ident;
class IdentDefaultTypeInternal;
LIBPROTOC_EXPORT extern IdentDefaultTypeInternal _Ident_default_instance_;
class MsgBase;
class MsgBaseDefaultTypeInternal;
LIBPROTOC_EXPORT extern MsgBaseDefaultTypeInternal _MsgBase_default_instance_;
class MultiObjectPropertyList;
class MultiObjectPropertyListDefaultTypeInternal;
LIBPROTOC_EXPORT extern MultiObjectPropertyListDefaultTypeInternal _MultiObjectPropertyList_default_instance_;
class MultiObjectRecordList;
class MultiObjectRecordListDefaultTypeInternal;
LIBPROTOC_EXPORT extern MultiObjectRecordListDefaultTypeInternal _MultiObjectRecordList_default_instance_;
class ObjectPropertyFloat;
class ObjectPropertyFloatDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectPropertyFloatDefaultTypeInternal _ObjectPropertyFloat_default_instance_;
class ObjectPropertyInt;
class ObjectPropertyIntDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectPropertyIntDefaultTypeInternal _ObjectPropertyInt_default_instance_;
class ObjectPropertyList;
class ObjectPropertyListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectPropertyListDefaultTypeInternal _ObjectPropertyList_default_instance_;
class ObjectPropertyObject;
class ObjectPropertyObjectDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectPropertyObjectDefaultTypeInternal _ObjectPropertyObject_default_instance_;
class ObjectPropertyString;
class ObjectPropertyStringDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectPropertyStringDefaultTypeInternal _ObjectPropertyString_default_instance_;
class ObjectPropertyVector2;
class ObjectPropertyVector2DefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectPropertyVector2DefaultTypeInternal _ObjectPropertyVector2_default_instance_;
class ObjectPropertyVector3;
class ObjectPropertyVector3DefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectPropertyVector3DefaultTypeInternal _ObjectPropertyVector3_default_instance_;
class ObjectRecordAddRow;
class ObjectRecordAddRowDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordAddRowDefaultTypeInternal _ObjectRecordAddRow_default_instance_;
class ObjectRecordBase;
class ObjectRecordBaseDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordBaseDefaultTypeInternal _ObjectRecordBase_default_instance_;
class ObjectRecordFloat;
class ObjectRecordFloatDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordFloatDefaultTypeInternal _ObjectRecordFloat_default_instance_;
class ObjectRecordInt;
class ObjectRecordIntDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordIntDefaultTypeInternal _ObjectRecordInt_default_instance_;
class ObjectRecordList;
class ObjectRecordListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordListDefaultTypeInternal _ObjectRecordList_default_instance_;
class ObjectRecordObject;
class ObjectRecordObjectDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordObjectDefaultTypeInternal _ObjectRecordObject_default_instance_;
class ObjectRecordRemove;
class ObjectRecordRemoveDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordRemoveDefaultTypeInternal _ObjectRecordRemove_default_instance_;
class ObjectRecordString;
class ObjectRecordStringDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordStringDefaultTypeInternal _ObjectRecordString_default_instance_;
class ObjectRecordSwap;
class ObjectRecordSwapDefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordSwapDefaultTypeInternal _ObjectRecordSwap_default_instance_;
class ObjectRecordVector2;
class ObjectRecordVector2DefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordVector2DefaultTypeInternal _ObjectRecordVector2_default_instance_;
class ObjectRecordVector3;
class ObjectRecordVector3DefaultTypeInternal;
LIBPROTOC_EXPORT extern ObjectRecordVector3DefaultTypeInternal _ObjectRecordVector3_default_instance_;
class PropertyFloat;
class PropertyFloatDefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyFloatDefaultTypeInternal _PropertyFloat_default_instance_;
class PropertyInt;
class PropertyIntDefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyIntDefaultTypeInternal _PropertyInt_default_instance_;
class PropertyObject;
class PropertyObjectDefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyObjectDefaultTypeInternal _PropertyObject_default_instance_;
class PropertyString;
class PropertyStringDefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyStringDefaultTypeInternal _PropertyString_default_instance_;
class PropertyVector2;
class PropertyVector2DefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyVector2DefaultTypeInternal _PropertyVector2_default_instance_;
class PropertyVector3;
class PropertyVector3DefaultTypeInternal;
LIBPROTOC_EXPORT extern PropertyVector3DefaultTypeInternal _PropertyVector3_default_instance_;
class RecordAddRowStruct;
class RecordAddRowStructDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordAddRowStructDefaultTypeInternal _RecordAddRowStruct_default_instance_;
class RecordFloat;
class RecordFloatDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordFloatDefaultTypeInternal _RecordFloat_default_instance_;
class RecordInt;
class RecordIntDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordIntDefaultTypeInternal _RecordInt_default_instance_;
class RecordObject;
class RecordObjectDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordObjectDefaultTypeInternal _RecordObject_default_instance_;
class RecordString;
class RecordStringDefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordStringDefaultTypeInternal _RecordString_default_instance_;
class RecordVector2;
class RecordVector2DefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordVector2DefaultTypeInternal _RecordVector2_default_instance_;
class RecordVector3;
class RecordVector3DefaultTypeInternal;
LIBPROTOC_EXPORT extern RecordVector3DefaultTypeInternal _RecordVector3_default_instance_;
class ReqCommand;
class ReqCommandDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqCommandDefaultTypeInternal _ReqCommand_default_instance_;
class Vector2;
class Vector2DefaultTypeInternal;
LIBPROTOC_EXPORT extern Vector2DefaultTypeInternal _Vector2_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
LIBPROTOC_EXPORT extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::NFMsg::Ident* Arena::CreateMaybeMessage<::NFMsg::Ident>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::MsgBase* Arena::CreateMaybeMessage<::NFMsg::MsgBase>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::MultiObjectPropertyList* Arena::CreateMaybeMessage<::NFMsg::MultiObjectPropertyList>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::MultiObjectRecordList* Arena::CreateMaybeMessage<::NFMsg::MultiObjectRecordList>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectPropertyFloat* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyFloat>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectPropertyInt* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyInt>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectPropertyList* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyList>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectPropertyObject* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyObject>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectPropertyString* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyString>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectPropertyVector2* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyVector2>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectPropertyVector3* Arena::CreateMaybeMessage<::NFMsg::ObjectPropertyVector3>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectRecordAddRow* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordAddRow>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectRecordBase* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordBase>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectRecordFloat* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordFloat>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectRecordInt* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordInt>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectRecordList* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordList>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectRecordObject* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordObject>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectRecordRemove* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordRemove>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectRecordString* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordString>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectRecordSwap* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordSwap>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectRecordVector2* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordVector2>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ObjectRecordVector3* Arena::CreateMaybeMessage<::NFMsg::ObjectRecordVector3>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::PropertyFloat* Arena::CreateMaybeMessage<::NFMsg::PropertyFloat>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::PropertyInt* Arena::CreateMaybeMessage<::NFMsg::PropertyInt>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::PropertyObject* Arena::CreateMaybeMessage<::NFMsg::PropertyObject>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::PropertyString* Arena::CreateMaybeMessage<::NFMsg::PropertyString>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::PropertyVector2* Arena::CreateMaybeMessage<::NFMsg::PropertyVector2>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::PropertyVector3* Arena::CreateMaybeMessage<::NFMsg::PropertyVector3>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::RecordAddRowStruct* Arena::CreateMaybeMessage<::NFMsg::RecordAddRowStruct>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::RecordFloat* Arena::CreateMaybeMessage<::NFMsg::RecordFloat>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::RecordInt* Arena::CreateMaybeMessage<::NFMsg::RecordInt>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::RecordObject* Arena::CreateMaybeMessage<::NFMsg::RecordObject>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::RecordString* Arena::CreateMaybeMessage<::NFMsg::RecordString>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::RecordVector2* Arena::CreateMaybeMessage<::NFMsg::RecordVector2>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::RecordVector3* Arena::CreateMaybeMessage<::NFMsg::RecordVector3>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqCommand* Arena::CreateMaybeMessage<::NFMsg::ReqCommand>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::Vector2* Arena::CreateMaybeMessage<::NFMsg::Vector2>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::Vector3* Arena::CreateMaybeMessage<::NFMsg::Vector3>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFMsg {

enum ReqCommand_EGameCommandType {
  ReqCommand_EGameCommandType_EGCT_MODIY_PROPERTY = 0,
  ReqCommand_EGameCommandType_EGCT_MODIY_ITEM = 1,
  ReqCommand_EGameCommandType_EGCT_CREATE_OBJECT = 2,
  ReqCommand_EGameCommandType_EGCT_ADD_ROLE_EXP = 3,
  ReqCommand_EGameCommandType_ReqCommand_EGameCommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReqCommand_EGameCommandType_ReqCommand_EGameCommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool ReqCommand_EGameCommandType_IsValid(int value);
const ReqCommand_EGameCommandType ReqCommand_EGameCommandType_EGameCommandType_MIN = ReqCommand_EGameCommandType_EGCT_MODIY_PROPERTY;
const ReqCommand_EGameCommandType ReqCommand_EGameCommandType_EGameCommandType_MAX = ReqCommand_EGameCommandType_EGCT_ADD_ROLE_EXP;
const int ReqCommand_EGameCommandType_EGameCommandType_ARRAYSIZE = ReqCommand_EGameCommandType_EGameCommandType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqCommand_EGameCommandType_descriptor();
inline const ::std::string& ReqCommand_EGameCommandType_Name(ReqCommand_EGameCommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqCommand_EGameCommandType_descriptor(), value);
}
inline bool ReqCommand_EGameCommandType_Parse(
    const ::std::string& name, ReqCommand_EGameCommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqCommand_EGameCommandType>(
    ReqCommand_EGameCommandType_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT Ident : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.Ident) */ {
 public:
  Ident();
  virtual ~Ident();

  Ident(const Ident& from);

  inline Ident& operator=(const Ident& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ident(Ident&& from) noexcept
    : Ident() {
    *this = ::std::move(from);
  }

  inline Ident& operator=(Ident&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ident& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ident* internal_default_instance() {
    return reinterpret_cast<const Ident*>(
               &_Ident_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Ident* other);
  friend void swap(Ident& a, Ident& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ident* New() const final {
    return CreateMaybeMessage<Ident>(NULL);
  }

  Ident* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ident>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ident& from);
  void MergeFrom(const Ident& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ident* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 svrid = 1;
  void clear_svrid();
  static const int kSvridFieldNumber = 1;
  ::google::protobuf::int64 svrid() const;
  void set_svrid(::google::protobuf::int64 value);

  // int64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.Ident)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 svrid_;
  ::google::protobuf::int64 index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT Vector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.Vector2) */ {
 public:
  Vector2();
  virtual ~Vector2();

  Vector2(const Vector2& from);

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector2(Vector2&& from) noexcept
    : Vector2() {
    *this = ::std::move(from);
  }

  inline Vector2& operator=(Vector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2* internal_default_instance() {
    return reinterpret_cast<const Vector2*>(
               &_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Vector2* other);
  friend void swap(Vector2& a, Vector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector2* New() const final {
    return CreateMaybeMessage<Vector2>(NULL);
  }

  Vector2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vector2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vector2& from);
  void MergeFrom(const Vector2& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:NFMsg.Vector2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT Vector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Vector3* other);
  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(NULL);
  }

  Vector3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:NFMsg.Vector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyInt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyInt) */ {
 public:
  PropertyInt();
  virtual ~PropertyInt();

  PropertyInt(const PropertyInt& from);

  inline PropertyInt& operator=(const PropertyInt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertyInt(PropertyInt&& from) noexcept
    : PropertyInt() {
    *this = ::std::move(from);
  }

  inline PropertyInt& operator=(PropertyInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyInt* internal_default_instance() {
    return reinterpret_cast<const PropertyInt*>(
               &_PropertyInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PropertyInt* other);
  friend void swap(PropertyInt& a, PropertyInt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertyInt* New() const final {
    return CreateMaybeMessage<PropertyInt>(NULL);
  }

  PropertyInt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PropertyInt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PropertyInt& from);
  void MergeFrom(const PropertyInt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyInt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes property_name = 1;
  void clear_property_name();
  static const int kPropertyNameFieldNumber = 1;
  const ::std::string& property_name() const;
  void set_property_name(const ::std::string& value);
  #if LANG_CXX11
  void set_property_name(::std::string&& value);
  #endif
  void set_property_name(const char* value);
  void set_property_name(const void* value, size_t size);
  ::std::string* mutable_property_name();
  ::std::string* release_property_name();
  void set_allocated_property_name(::std::string* property_name);

  // int64 data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  ::google::protobuf::int64 data() const;
  void set_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyInt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr property_name_;
  ::google::protobuf::int64 data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyFloat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyFloat) */ {
 public:
  PropertyFloat();
  virtual ~PropertyFloat();

  PropertyFloat(const PropertyFloat& from);

  inline PropertyFloat& operator=(const PropertyFloat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertyFloat(PropertyFloat&& from) noexcept
    : PropertyFloat() {
    *this = ::std::move(from);
  }

  inline PropertyFloat& operator=(PropertyFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyFloat* internal_default_instance() {
    return reinterpret_cast<const PropertyFloat*>(
               &_PropertyFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PropertyFloat* other);
  friend void swap(PropertyFloat& a, PropertyFloat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertyFloat* New() const final {
    return CreateMaybeMessage<PropertyFloat>(NULL);
  }

  PropertyFloat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PropertyFloat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PropertyFloat& from);
  void MergeFrom(const PropertyFloat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyFloat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes property_name = 1;
  void clear_property_name();
  static const int kPropertyNameFieldNumber = 1;
  const ::std::string& property_name() const;
  void set_property_name(const ::std::string& value);
  #if LANG_CXX11
  void set_property_name(::std::string&& value);
  #endif
  void set_property_name(const char* value);
  void set_property_name(const void* value, size_t size);
  ::std::string* mutable_property_name();
  ::std::string* release_property_name();
  void set_allocated_property_name(::std::string* property_name);

  // float data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  float data() const;
  void set_data(float value);

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyFloat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr property_name_;
  float data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyString) */ {
 public:
  PropertyString();
  virtual ~PropertyString();

  PropertyString(const PropertyString& from);

  inline PropertyString& operator=(const PropertyString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertyString(PropertyString&& from) noexcept
    : PropertyString() {
    *this = ::std::move(from);
  }

  inline PropertyString& operator=(PropertyString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyString* internal_default_instance() {
    return reinterpret_cast<const PropertyString*>(
               &_PropertyString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PropertyString* other);
  friend void swap(PropertyString& a, PropertyString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertyString* New() const final {
    return CreateMaybeMessage<PropertyString>(NULL);
  }

  PropertyString* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PropertyString>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PropertyString& from);
  void MergeFrom(const PropertyString& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes property_name = 1;
  void clear_property_name();
  static const int kPropertyNameFieldNumber = 1;
  const ::std::string& property_name() const;
  void set_property_name(const ::std::string& value);
  #if LANG_CXX11
  void set_property_name(::std::string&& value);
  #endif
  void set_property_name(const char* value);
  void set_property_name(const void* value, size_t size);
  ::std::string* mutable_property_name();
  ::std::string* release_property_name();
  void set_allocated_property_name(::std::string* property_name);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr property_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyObject) */ {
 public:
  PropertyObject();
  virtual ~PropertyObject();

  PropertyObject(const PropertyObject& from);

  inline PropertyObject& operator=(const PropertyObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertyObject(PropertyObject&& from) noexcept
    : PropertyObject() {
    *this = ::std::move(from);
  }

  inline PropertyObject& operator=(PropertyObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyObject* internal_default_instance() {
    return reinterpret_cast<const PropertyObject*>(
               &_PropertyObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PropertyObject* other);
  friend void swap(PropertyObject& a, PropertyObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertyObject* New() const final {
    return CreateMaybeMessage<PropertyObject>(NULL);
  }

  PropertyObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PropertyObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PropertyObject& from);
  void MergeFrom(const PropertyObject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes property_name = 1;
  void clear_property_name();
  static const int kPropertyNameFieldNumber = 1;
  const ::std::string& property_name() const;
  void set_property_name(const ::std::string& value);
  #if LANG_CXX11
  void set_property_name(::std::string&& value);
  #endif
  void set_property_name(const char* value);
  void set_property_name(const void* value, size_t size);
  ::std::string* mutable_property_name();
  ::std::string* release_property_name();
  void set_allocated_property_name(::std::string* property_name);

  // .NFMsg.Ident data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  private:
  const ::NFMsg::Ident& _internal_data() const;
  public:
  const ::NFMsg::Ident& data() const;
  ::NFMsg::Ident* release_data();
  ::NFMsg::Ident* mutable_data();
  void set_allocated_data(::NFMsg::Ident* data);

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr property_name_;
  ::NFMsg::Ident* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyVector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyVector2) */ {
 public:
  PropertyVector2();
  virtual ~PropertyVector2();

  PropertyVector2(const PropertyVector2& from);

  inline PropertyVector2& operator=(const PropertyVector2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertyVector2(PropertyVector2&& from) noexcept
    : PropertyVector2() {
    *this = ::std::move(from);
  }

  inline PropertyVector2& operator=(PropertyVector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyVector2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyVector2* internal_default_instance() {
    return reinterpret_cast<const PropertyVector2*>(
               &_PropertyVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PropertyVector2* other);
  friend void swap(PropertyVector2& a, PropertyVector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertyVector2* New() const final {
    return CreateMaybeMessage<PropertyVector2>(NULL);
  }

  PropertyVector2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PropertyVector2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PropertyVector2& from);
  void MergeFrom(const PropertyVector2& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyVector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes property_name = 1;
  void clear_property_name();
  static const int kPropertyNameFieldNumber = 1;
  const ::std::string& property_name() const;
  void set_property_name(const ::std::string& value);
  #if LANG_CXX11
  void set_property_name(::std::string&& value);
  #endif
  void set_property_name(const char* value);
  void set_property_name(const void* value, size_t size);
  ::std::string* mutable_property_name();
  ::std::string* release_property_name();
  void set_allocated_property_name(::std::string* property_name);

  // .NFMsg.Vector2 data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  private:
  const ::NFMsg::Vector2& _internal_data() const;
  public:
  const ::NFMsg::Vector2& data() const;
  ::NFMsg::Vector2* release_data();
  ::NFMsg::Vector2* mutable_data();
  void set_allocated_data(::NFMsg::Vector2* data);

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyVector2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr property_name_;
  ::NFMsg::Vector2* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PropertyVector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.PropertyVector3) */ {
 public:
  PropertyVector3();
  virtual ~PropertyVector3();

  PropertyVector3(const PropertyVector3& from);

  inline PropertyVector3& operator=(const PropertyVector3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertyVector3(PropertyVector3&& from) noexcept
    : PropertyVector3() {
    *this = ::std::move(from);
  }

  inline PropertyVector3& operator=(PropertyVector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyVector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyVector3* internal_default_instance() {
    return reinterpret_cast<const PropertyVector3*>(
               &_PropertyVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PropertyVector3* other);
  friend void swap(PropertyVector3& a, PropertyVector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertyVector3* New() const final {
    return CreateMaybeMessage<PropertyVector3>(NULL);
  }

  PropertyVector3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PropertyVector3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PropertyVector3& from);
  void MergeFrom(const PropertyVector3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyVector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes property_name = 1;
  void clear_property_name();
  static const int kPropertyNameFieldNumber = 1;
  const ::std::string& property_name() const;
  void set_property_name(const ::std::string& value);
  #if LANG_CXX11
  void set_property_name(::std::string&& value);
  #endif
  void set_property_name(const char* value);
  void set_property_name(const void* value, size_t size);
  ::std::string* mutable_property_name();
  ::std::string* release_property_name();
  void set_allocated_property_name(::std::string* property_name);

  // .NFMsg.Vector3 data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  private:
  const ::NFMsg::Vector3& _internal_data() const;
  public:
  const ::NFMsg::Vector3& data() const;
  ::NFMsg::Vector3* release_data();
  ::NFMsg::Vector3* mutable_data();
  void set_allocated_data(::NFMsg::Vector3* data);

  // @@protoc_insertion_point(class_scope:NFMsg.PropertyVector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr property_name_;
  ::NFMsg::Vector3* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordInt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordInt) */ {
 public:
  RecordInt();
  virtual ~RecordInt();

  RecordInt(const RecordInt& from);

  inline RecordInt& operator=(const RecordInt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordInt(RecordInt&& from) noexcept
    : RecordInt() {
    *this = ::std::move(from);
  }

  inline RecordInt& operator=(RecordInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordInt* internal_default_instance() {
    return reinterpret_cast<const RecordInt*>(
               &_RecordInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RecordInt* other);
  friend void swap(RecordInt& a, RecordInt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordInt* New() const final {
    return CreateMaybeMessage<RecordInt>(NULL);
  }

  RecordInt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordInt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordInt& from);
  void MergeFrom(const RecordInt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordInt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  ::google::protobuf::int32 row() const;
  void set_row(::google::protobuf::int32 value);

  // int32 col = 2;
  void clear_col();
  static const int kColFieldNumber = 2;
  ::google::protobuf::int32 col() const;
  void set_col(::google::protobuf::int32 value);

  // int64 data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  ::google::protobuf::int64 data() const;
  void set_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.RecordInt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 row_;
  ::google::protobuf::int32 col_;
  ::google::protobuf::int64 data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordFloat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordFloat) */ {
 public:
  RecordFloat();
  virtual ~RecordFloat();

  RecordFloat(const RecordFloat& from);

  inline RecordFloat& operator=(const RecordFloat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordFloat(RecordFloat&& from) noexcept
    : RecordFloat() {
    *this = ::std::move(from);
  }

  inline RecordFloat& operator=(RecordFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordFloat* internal_default_instance() {
    return reinterpret_cast<const RecordFloat*>(
               &_RecordFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(RecordFloat* other);
  friend void swap(RecordFloat& a, RecordFloat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordFloat* New() const final {
    return CreateMaybeMessage<RecordFloat>(NULL);
  }

  RecordFloat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordFloat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordFloat& from);
  void MergeFrom(const RecordFloat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordFloat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  ::google::protobuf::int32 row() const;
  void set_row(::google::protobuf::int32 value);

  // int32 col = 2;
  void clear_col();
  static const int kColFieldNumber = 2;
  ::google::protobuf::int32 col() const;
  void set_col(::google::protobuf::int32 value);

  // float data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  float data() const;
  void set_data(float value);

  // @@protoc_insertion_point(class_scope:NFMsg.RecordFloat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 row_;
  ::google::protobuf::int32 col_;
  float data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordString) */ {
 public:
  RecordString();
  virtual ~RecordString();

  RecordString(const RecordString& from);

  inline RecordString& operator=(const RecordString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordString(RecordString&& from) noexcept
    : RecordString() {
    *this = ::std::move(from);
  }

  inline RecordString& operator=(RecordString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordString* internal_default_instance() {
    return reinterpret_cast<const RecordString*>(
               &_RecordString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RecordString* other);
  friend void swap(RecordString& a, RecordString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordString* New() const final {
    return CreateMaybeMessage<RecordString>(NULL);
  }

  RecordString* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordString>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordString& from);
  void MergeFrom(const RecordString& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  ::google::protobuf::int32 row() const;
  void set_row(::google::protobuf::int32 value);

  // int32 col = 2;
  void clear_col();
  static const int kColFieldNumber = 2;
  ::google::protobuf::int32 col() const;
  void set_col(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.RecordString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 row_;
  ::google::protobuf::int32 col_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordObject) */ {
 public:
  RecordObject();
  virtual ~RecordObject();

  RecordObject(const RecordObject& from);

  inline RecordObject& operator=(const RecordObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordObject(RecordObject&& from) noexcept
    : RecordObject() {
    *this = ::std::move(from);
  }

  inline RecordObject& operator=(RecordObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordObject* internal_default_instance() {
    return reinterpret_cast<const RecordObject*>(
               &_RecordObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RecordObject* other);
  friend void swap(RecordObject& a, RecordObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordObject* New() const final {
    return CreateMaybeMessage<RecordObject>(NULL);
  }

  RecordObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordObject& from);
  void MergeFrom(const RecordObject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Ident data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  private:
  const ::NFMsg::Ident& _internal_data() const;
  public:
  const ::NFMsg::Ident& data() const;
  ::NFMsg::Ident* release_data();
  ::NFMsg::Ident* mutable_data();
  void set_allocated_data(::NFMsg::Ident* data);

  // int32 row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  ::google::protobuf::int32 row() const;
  void set_row(::google::protobuf::int32 value);

  // int32 col = 2;
  void clear_col();
  static const int kColFieldNumber = 2;
  ::google::protobuf::int32 col() const;
  void set_col(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.RecordObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* data_;
  ::google::protobuf::int32 row_;
  ::google::protobuf::int32 col_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordVector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordVector2) */ {
 public:
  RecordVector2();
  virtual ~RecordVector2();

  RecordVector2(const RecordVector2& from);

  inline RecordVector2& operator=(const RecordVector2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordVector2(RecordVector2&& from) noexcept
    : RecordVector2() {
    *this = ::std::move(from);
  }

  inline RecordVector2& operator=(RecordVector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordVector2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordVector2* internal_default_instance() {
    return reinterpret_cast<const RecordVector2*>(
               &_RecordVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(RecordVector2* other);
  friend void swap(RecordVector2& a, RecordVector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordVector2* New() const final {
    return CreateMaybeMessage<RecordVector2>(NULL);
  }

  RecordVector2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordVector2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordVector2& from);
  void MergeFrom(const RecordVector2& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordVector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Vector2 data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  private:
  const ::NFMsg::Vector2& _internal_data() const;
  public:
  const ::NFMsg::Vector2& data() const;
  ::NFMsg::Vector2* release_data();
  ::NFMsg::Vector2* mutable_data();
  void set_allocated_data(::NFMsg::Vector2* data);

  // int32 row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  ::google::protobuf::int32 row() const;
  void set_row(::google::protobuf::int32 value);

  // int32 col = 2;
  void clear_col();
  static const int kColFieldNumber = 2;
  ::google::protobuf::int32 col() const;
  void set_col(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.RecordVector2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Vector2* data_;
  ::google::protobuf::int32 row_;
  ::google::protobuf::int32 col_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordVector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordVector3) */ {
 public:
  RecordVector3();
  virtual ~RecordVector3();

  RecordVector3(const RecordVector3& from);

  inline RecordVector3& operator=(const RecordVector3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordVector3(RecordVector3&& from) noexcept
    : RecordVector3() {
    *this = ::std::move(from);
  }

  inline RecordVector3& operator=(RecordVector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordVector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordVector3* internal_default_instance() {
    return reinterpret_cast<const RecordVector3*>(
               &_RecordVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(RecordVector3* other);
  friend void swap(RecordVector3& a, RecordVector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordVector3* New() const final {
    return CreateMaybeMessage<RecordVector3>(NULL);
  }

  RecordVector3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordVector3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordVector3& from);
  void MergeFrom(const RecordVector3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordVector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFMsg.Vector3 data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  private:
  const ::NFMsg::Vector3& _internal_data() const;
  public:
  const ::NFMsg::Vector3& data() const;
  ::NFMsg::Vector3* release_data();
  ::NFMsg::Vector3* mutable_data();
  void set_allocated_data(::NFMsg::Vector3* data);

  // int32 row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  ::google::protobuf::int32 row() const;
  void set_row(::google::protobuf::int32 value);

  // int32 col = 2;
  void clear_col();
  static const int kColFieldNumber = 2;
  ::google::protobuf::int32 col() const;
  void set_col(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.RecordVector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Vector3* data_;
  ::google::protobuf::int32 row_;
  ::google::protobuf::int32 col_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RecordAddRowStruct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.RecordAddRowStruct) */ {
 public:
  RecordAddRowStruct();
  virtual ~RecordAddRowStruct();

  RecordAddRowStruct(const RecordAddRowStruct& from);

  inline RecordAddRowStruct& operator=(const RecordAddRowStruct& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecordAddRowStruct(RecordAddRowStruct&& from) noexcept
    : RecordAddRowStruct() {
    *this = ::std::move(from);
  }

  inline RecordAddRowStruct& operator=(RecordAddRowStruct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordAddRowStruct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordAddRowStruct* internal_default_instance() {
    return reinterpret_cast<const RecordAddRowStruct*>(
               &_RecordAddRowStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(RecordAddRowStruct* other);
  friend void swap(RecordAddRowStruct& a, RecordAddRowStruct& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecordAddRowStruct* New() const final {
    return CreateMaybeMessage<RecordAddRowStruct>(NULL);
  }

  RecordAddRowStruct* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecordAddRowStruct>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecordAddRowStruct& from);
  void MergeFrom(const RecordAddRowStruct& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordAddRowStruct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.RecordInt record_int_list = 2;
  int record_int_list_size() const;
  void clear_record_int_list();
  static const int kRecordIntListFieldNumber = 2;
  ::NFMsg::RecordInt* mutable_record_int_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >*
      mutable_record_int_list();
  const ::NFMsg::RecordInt& record_int_list(int index) const;
  ::NFMsg::RecordInt* add_record_int_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >&
      record_int_list() const;

  // repeated .NFMsg.RecordFloat record_float_list = 3;
  int record_float_list_size() const;
  void clear_record_float_list();
  static const int kRecordFloatListFieldNumber = 3;
  ::NFMsg::RecordFloat* mutable_record_float_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >*
      mutable_record_float_list();
  const ::NFMsg::RecordFloat& record_float_list(int index) const;
  ::NFMsg::RecordFloat* add_record_float_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >&
      record_float_list() const;

  // repeated .NFMsg.RecordString record_string_list = 4;
  int record_string_list_size() const;
  void clear_record_string_list();
  static const int kRecordStringListFieldNumber = 4;
  ::NFMsg::RecordString* mutable_record_string_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >*
      mutable_record_string_list();
  const ::NFMsg::RecordString& record_string_list(int index) const;
  ::NFMsg::RecordString* add_record_string_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >&
      record_string_list() const;

  // repeated .NFMsg.RecordObject record_object_list = 5;
  int record_object_list_size() const;
  void clear_record_object_list();
  static const int kRecordObjectListFieldNumber = 5;
  ::NFMsg::RecordObject* mutable_record_object_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >*
      mutable_record_object_list();
  const ::NFMsg::RecordObject& record_object_list(int index) const;
  ::NFMsg::RecordObject* add_record_object_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >&
      record_object_list() const;

  // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
  int record_vector2_list_size() const;
  void clear_record_vector2_list();
  static const int kRecordVector2ListFieldNumber = 6;
  ::NFMsg::RecordVector2* mutable_record_vector2_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >*
      mutable_record_vector2_list();
  const ::NFMsg::RecordVector2& record_vector2_list(int index) const;
  ::NFMsg::RecordVector2* add_record_vector2_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >&
      record_vector2_list() const;

  // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
  int record_vector3_list_size() const;
  void clear_record_vector3_list();
  static const int kRecordVector3ListFieldNumber = 7;
  ::NFMsg::RecordVector3* mutable_record_vector3_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >*
      mutable_record_vector3_list();
  const ::NFMsg::RecordVector3& record_vector3_list(int index) const;
  ::NFMsg::RecordVector3* add_record_vector3_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >&
      record_vector3_list() const;

  // int32 row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  ::google::protobuf::int32 row() const;
  void set_row(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.RecordAddRowStruct)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt > record_int_list_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat > record_float_list_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString > record_string_list_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject > record_object_list_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 > record_vector2_list_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 > record_vector3_list_;
  ::google::protobuf::int32 row_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordBase) */ {
 public:
  ObjectRecordBase();
  virtual ~ObjectRecordBase();

  ObjectRecordBase(const ObjectRecordBase& from);

  inline ObjectRecordBase& operator=(const ObjectRecordBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectRecordBase(ObjectRecordBase&& from) noexcept
    : ObjectRecordBase() {
    *this = ::std::move(from);
  }

  inline ObjectRecordBase& operator=(ObjectRecordBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectRecordBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordBase* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordBase*>(
               &_ObjectRecordBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ObjectRecordBase* other);
  friend void swap(ObjectRecordBase& a, ObjectRecordBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordBase* New() const final {
    return CreateMaybeMessage<ObjectRecordBase>(NULL);
  }

  ObjectRecordBase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordBase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectRecordBase& from);
  void MergeFrom(const ObjectRecordBase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
  int row_struct_size() const;
  void clear_row_struct();
  static const int kRowStructFieldNumber = 2;
  ::NFMsg::RecordAddRowStruct* mutable_row_struct(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >*
      mutable_row_struct();
  const ::NFMsg::RecordAddRowStruct& row_struct(int index) const;
  ::NFMsg::RecordAddRowStruct* add_row_struct();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >&
      row_struct() const;

  // bytes record_name = 1;
  void clear_record_name();
  static const int kRecordNameFieldNumber = 1;
  const ::std::string& record_name() const;
  void set_record_name(const ::std::string& value);
  #if LANG_CXX11
  void set_record_name(::std::string&& value);
  #endif
  void set_record_name(const char* value);
  void set_record_name(const void* value, size_t size);
  ::std::string* mutable_record_name();
  ::std::string* release_record_name();
  void set_allocated_record_name(::std::string* record_name);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct > row_struct_;
  ::google::protobuf::internal::ArenaStringPtr record_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectPropertyInt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyInt) */ {
 public:
  ObjectPropertyInt();
  virtual ~ObjectPropertyInt();

  ObjectPropertyInt(const ObjectPropertyInt& from);

  inline ObjectPropertyInt& operator=(const ObjectPropertyInt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectPropertyInt(ObjectPropertyInt&& from) noexcept
    : ObjectPropertyInt() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyInt& operator=(ObjectPropertyInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectPropertyInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectPropertyInt* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyInt*>(
               &_ObjectPropertyInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ObjectPropertyInt* other);
  friend void swap(ObjectPropertyInt& a, ObjectPropertyInt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyInt* New() const final {
    return CreateMaybeMessage<ObjectPropertyInt>(NULL);
  }

  ObjectPropertyInt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyInt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectPropertyInt& from);
  void MergeFrom(const ObjectPropertyInt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyInt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.PropertyInt property_list = 2;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 2;
  ::NFMsg::PropertyInt* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >*
      mutable_property_list();
  const ::NFMsg::PropertyInt& property_list(int index) const;
  ::NFMsg::PropertyInt* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyInt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectPropertyFloat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyFloat) */ {
 public:
  ObjectPropertyFloat();
  virtual ~ObjectPropertyFloat();

  ObjectPropertyFloat(const ObjectPropertyFloat& from);

  inline ObjectPropertyFloat& operator=(const ObjectPropertyFloat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectPropertyFloat(ObjectPropertyFloat&& from) noexcept
    : ObjectPropertyFloat() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyFloat& operator=(ObjectPropertyFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectPropertyFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectPropertyFloat* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyFloat*>(
               &_ObjectPropertyFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ObjectPropertyFloat* other);
  friend void swap(ObjectPropertyFloat& a, ObjectPropertyFloat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyFloat* New() const final {
    return CreateMaybeMessage<ObjectPropertyFloat>(NULL);
  }

  ObjectPropertyFloat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyFloat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectPropertyFloat& from);
  void MergeFrom(const ObjectPropertyFloat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyFloat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.PropertyFloat property_list = 2;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 2;
  ::NFMsg::PropertyFloat* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >*
      mutable_property_list();
  const ::NFMsg::PropertyFloat& property_list(int index) const;
  ::NFMsg::PropertyFloat* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyFloat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectPropertyString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyString) */ {
 public:
  ObjectPropertyString();
  virtual ~ObjectPropertyString();

  ObjectPropertyString(const ObjectPropertyString& from);

  inline ObjectPropertyString& operator=(const ObjectPropertyString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectPropertyString(ObjectPropertyString&& from) noexcept
    : ObjectPropertyString() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyString& operator=(ObjectPropertyString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectPropertyString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectPropertyString* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyString*>(
               &_ObjectPropertyString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ObjectPropertyString* other);
  friend void swap(ObjectPropertyString& a, ObjectPropertyString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyString* New() const final {
    return CreateMaybeMessage<ObjectPropertyString>(NULL);
  }

  ObjectPropertyString* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyString>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectPropertyString& from);
  void MergeFrom(const ObjectPropertyString& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.PropertyString property_list = 2;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 2;
  ::NFMsg::PropertyString* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >*
      mutable_property_list();
  const ::NFMsg::PropertyString& property_list(int index) const;
  ::NFMsg::PropertyString* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectPropertyObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyObject) */ {
 public:
  ObjectPropertyObject();
  virtual ~ObjectPropertyObject();

  ObjectPropertyObject(const ObjectPropertyObject& from);

  inline ObjectPropertyObject& operator=(const ObjectPropertyObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectPropertyObject(ObjectPropertyObject&& from) noexcept
    : ObjectPropertyObject() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyObject& operator=(ObjectPropertyObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectPropertyObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectPropertyObject* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyObject*>(
               &_ObjectPropertyObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ObjectPropertyObject* other);
  friend void swap(ObjectPropertyObject& a, ObjectPropertyObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyObject* New() const final {
    return CreateMaybeMessage<ObjectPropertyObject>(NULL);
  }

  ObjectPropertyObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectPropertyObject& from);
  void MergeFrom(const ObjectPropertyObject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.PropertyObject property_list = 2;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 2;
  ::NFMsg::PropertyObject* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >*
      mutable_property_list();
  const ::NFMsg::PropertyObject& property_list(int index) const;
  ::NFMsg::PropertyObject* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectPropertyVector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyVector2) */ {
 public:
  ObjectPropertyVector2();
  virtual ~ObjectPropertyVector2();

  ObjectPropertyVector2(const ObjectPropertyVector2& from);

  inline ObjectPropertyVector2& operator=(const ObjectPropertyVector2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectPropertyVector2(ObjectPropertyVector2&& from) noexcept
    : ObjectPropertyVector2() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyVector2& operator=(ObjectPropertyVector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectPropertyVector2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectPropertyVector2* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyVector2*>(
               &_ObjectPropertyVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ObjectPropertyVector2* other);
  friend void swap(ObjectPropertyVector2& a, ObjectPropertyVector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyVector2* New() const final {
    return CreateMaybeMessage<ObjectPropertyVector2>(NULL);
  }

  ObjectPropertyVector2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyVector2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectPropertyVector2& from);
  void MergeFrom(const ObjectPropertyVector2& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyVector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.PropertyVector2 property_list = 2;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 2;
  ::NFMsg::PropertyVector2* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >*
      mutable_property_list();
  const ::NFMsg::PropertyVector2& property_list(int index) const;
  ::NFMsg::PropertyVector2* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyVector2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectPropertyVector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyVector3) */ {
 public:
  ObjectPropertyVector3();
  virtual ~ObjectPropertyVector3();

  ObjectPropertyVector3(const ObjectPropertyVector3& from);

  inline ObjectPropertyVector3& operator=(const ObjectPropertyVector3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectPropertyVector3(ObjectPropertyVector3&& from) noexcept
    : ObjectPropertyVector3() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyVector3& operator=(ObjectPropertyVector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectPropertyVector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectPropertyVector3* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyVector3*>(
               &_ObjectPropertyVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ObjectPropertyVector3* other);
  friend void swap(ObjectPropertyVector3& a, ObjectPropertyVector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyVector3* New() const final {
    return CreateMaybeMessage<ObjectPropertyVector3>(NULL);
  }

  ObjectPropertyVector3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyVector3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectPropertyVector3& from);
  void MergeFrom(const ObjectPropertyVector3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyVector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.PropertyVector3 property_list = 2;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 2;
  ::NFMsg::PropertyVector3* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >*
      mutable_property_list();
  const ::NFMsg::PropertyVector3& property_list(int index) const;
  ::NFMsg::PropertyVector3* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >&
      property_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyVector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 > property_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordInt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordInt) */ {
 public:
  ObjectRecordInt();
  virtual ~ObjectRecordInt();

  ObjectRecordInt(const ObjectRecordInt& from);

  inline ObjectRecordInt& operator=(const ObjectRecordInt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectRecordInt(ObjectRecordInt&& from) noexcept
    : ObjectRecordInt() {
    *this = ::std::move(from);
  }

  inline ObjectRecordInt& operator=(ObjectRecordInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectRecordInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordInt* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordInt*>(
               &_ObjectRecordInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ObjectRecordInt* other);
  friend void swap(ObjectRecordInt& a, ObjectRecordInt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordInt* New() const final {
    return CreateMaybeMessage<ObjectRecordInt>(NULL);
  }

  ObjectRecordInt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordInt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectRecordInt& from);
  void MergeFrom(const ObjectRecordInt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordInt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.RecordInt property_list = 3;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 3;
  ::NFMsg::RecordInt* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >*
      mutable_property_list();
  const ::NFMsg::RecordInt& property_list(int index) const;
  ::NFMsg::RecordInt* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  static const int kRecordNameFieldNumber = 2;
  const ::std::string& record_name() const;
  void set_record_name(const ::std::string& value);
  #if LANG_CXX11
  void set_record_name(::std::string&& value);
  #endif
  void set_record_name(const char* value);
  void set_record_name(const void* value, size_t size);
  ::std::string* mutable_record_name();
  ::std::string* release_record_name();
  void set_allocated_record_name(::std::string* record_name);

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordInt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt > property_list_;
  ::google::protobuf::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordFloat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordFloat) */ {
 public:
  ObjectRecordFloat();
  virtual ~ObjectRecordFloat();

  ObjectRecordFloat(const ObjectRecordFloat& from);

  inline ObjectRecordFloat& operator=(const ObjectRecordFloat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectRecordFloat(ObjectRecordFloat&& from) noexcept
    : ObjectRecordFloat() {
    *this = ::std::move(from);
  }

  inline ObjectRecordFloat& operator=(ObjectRecordFloat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectRecordFloat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordFloat* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordFloat*>(
               &_ObjectRecordFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ObjectRecordFloat* other);
  friend void swap(ObjectRecordFloat& a, ObjectRecordFloat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordFloat* New() const final {
    return CreateMaybeMessage<ObjectRecordFloat>(NULL);
  }

  ObjectRecordFloat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordFloat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectRecordFloat& from);
  void MergeFrom(const ObjectRecordFloat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordFloat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.RecordFloat property_list = 3;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 3;
  ::NFMsg::RecordFloat* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >*
      mutable_property_list();
  const ::NFMsg::RecordFloat& property_list(int index) const;
  ::NFMsg::RecordFloat* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  static const int kRecordNameFieldNumber = 2;
  const ::std::string& record_name() const;
  void set_record_name(const ::std::string& value);
  #if LANG_CXX11
  void set_record_name(::std::string&& value);
  #endif
  void set_record_name(const char* value);
  void set_record_name(const void* value, size_t size);
  ::std::string* mutable_record_name();
  ::std::string* release_record_name();
  void set_allocated_record_name(::std::string* record_name);

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordFloat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat > property_list_;
  ::google::protobuf::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordString) */ {
 public:
  ObjectRecordString();
  virtual ~ObjectRecordString();

  ObjectRecordString(const ObjectRecordString& from);

  inline ObjectRecordString& operator=(const ObjectRecordString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectRecordString(ObjectRecordString&& from) noexcept
    : ObjectRecordString() {
    *this = ::std::move(from);
  }

  inline ObjectRecordString& operator=(ObjectRecordString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectRecordString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordString* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordString*>(
               &_ObjectRecordString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ObjectRecordString* other);
  friend void swap(ObjectRecordString& a, ObjectRecordString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordString* New() const final {
    return CreateMaybeMessage<ObjectRecordString>(NULL);
  }

  ObjectRecordString* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordString>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectRecordString& from);
  void MergeFrom(const ObjectRecordString& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.RecordString property_list = 3;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 3;
  ::NFMsg::RecordString* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >*
      mutable_property_list();
  const ::NFMsg::RecordString& property_list(int index) const;
  ::NFMsg::RecordString* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  static const int kRecordNameFieldNumber = 2;
  const ::std::string& record_name() const;
  void set_record_name(const ::std::string& value);
  #if LANG_CXX11
  void set_record_name(::std::string&& value);
  #endif
  void set_record_name(const char* value);
  void set_record_name(const void* value, size_t size);
  ::std::string* mutable_record_name();
  ::std::string* release_record_name();
  void set_allocated_record_name(::std::string* record_name);

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString > property_list_;
  ::google::protobuf::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordObject) */ {
 public:
  ObjectRecordObject();
  virtual ~ObjectRecordObject();

  ObjectRecordObject(const ObjectRecordObject& from);

  inline ObjectRecordObject& operator=(const ObjectRecordObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectRecordObject(ObjectRecordObject&& from) noexcept
    : ObjectRecordObject() {
    *this = ::std::move(from);
  }

  inline ObjectRecordObject& operator=(ObjectRecordObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectRecordObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordObject* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordObject*>(
               &_ObjectRecordObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ObjectRecordObject* other);
  friend void swap(ObjectRecordObject& a, ObjectRecordObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordObject* New() const final {
    return CreateMaybeMessage<ObjectRecordObject>(NULL);
  }

  ObjectRecordObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectRecordObject& from);
  void MergeFrom(const ObjectRecordObject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.RecordObject property_list = 3;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 3;
  ::NFMsg::RecordObject* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >*
      mutable_property_list();
  const ::NFMsg::RecordObject& property_list(int index) const;
  ::NFMsg::RecordObject* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  static const int kRecordNameFieldNumber = 2;
  const ::std::string& record_name() const;
  void set_record_name(const ::std::string& value);
  #if LANG_CXX11
  void set_record_name(::std::string&& value);
  #endif
  void set_record_name(const char* value);
  void set_record_name(const void* value, size_t size);
  ::std::string* mutable_record_name();
  ::std::string* release_record_name();
  void set_allocated_record_name(::std::string* record_name);

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject > property_list_;
  ::google::protobuf::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordVector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordVector2) */ {
 public:
  ObjectRecordVector2();
  virtual ~ObjectRecordVector2();

  ObjectRecordVector2(const ObjectRecordVector2& from);

  inline ObjectRecordVector2& operator=(const ObjectRecordVector2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectRecordVector2(ObjectRecordVector2&& from) noexcept
    : ObjectRecordVector2() {
    *this = ::std::move(from);
  }

  inline ObjectRecordVector2& operator=(ObjectRecordVector2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectRecordVector2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordVector2* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordVector2*>(
               &_ObjectRecordVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(ObjectRecordVector2* other);
  friend void swap(ObjectRecordVector2& a, ObjectRecordVector2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordVector2* New() const final {
    return CreateMaybeMessage<ObjectRecordVector2>(NULL);
  }

  ObjectRecordVector2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordVector2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectRecordVector2& from);
  void MergeFrom(const ObjectRecordVector2& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordVector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.RecordVector2 property_list = 3;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 3;
  ::NFMsg::RecordVector2* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >*
      mutable_property_list();
  const ::NFMsg::RecordVector2& property_list(int index) const;
  ::NFMsg::RecordVector2* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  static const int kRecordNameFieldNumber = 2;
  const ::std::string& record_name() const;
  void set_record_name(const ::std::string& value);
  #if LANG_CXX11
  void set_record_name(::std::string&& value);
  #endif
  void set_record_name(const char* value);
  void set_record_name(const void* value, size_t size);
  ::std::string* mutable_record_name();
  ::std::string* release_record_name();
  void set_allocated_record_name(::std::string* record_name);

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordVector2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 > property_list_;
  ::google::protobuf::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordVector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordVector3) */ {
 public:
  ObjectRecordVector3();
  virtual ~ObjectRecordVector3();

  ObjectRecordVector3(const ObjectRecordVector3& from);

  inline ObjectRecordVector3& operator=(const ObjectRecordVector3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectRecordVector3(ObjectRecordVector3&& from) noexcept
    : ObjectRecordVector3() {
    *this = ::std::move(from);
  }

  inline ObjectRecordVector3& operator=(ObjectRecordVector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectRecordVector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordVector3* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordVector3*>(
               &_ObjectRecordVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(ObjectRecordVector3* other);
  friend void swap(ObjectRecordVector3& a, ObjectRecordVector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordVector3* New() const final {
    return CreateMaybeMessage<ObjectRecordVector3>(NULL);
  }

  ObjectRecordVector3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordVector3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectRecordVector3& from);
  void MergeFrom(const ObjectRecordVector3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordVector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.RecordVector3 property_list = 3;
  int property_list_size() const;
  void clear_property_list();
  static const int kPropertyListFieldNumber = 3;
  ::NFMsg::RecordVector3* mutable_property_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >*
      mutable_property_list();
  const ::NFMsg::RecordVector3& property_list(int index) const;
  ::NFMsg::RecordVector3* add_property_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  static const int kRecordNameFieldNumber = 2;
  const ::std::string& record_name() const;
  void set_record_name(const ::std::string& value);
  #if LANG_CXX11
  void set_record_name(::std::string&& value);
  #endif
  void set_record_name(const char* value);
  void set_record_name(const void* value, size_t size);
  ::std::string* mutable_record_name();
  ::std::string* release_record_name();
  void set_allocated_record_name(::std::string* record_name);

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordVector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 > property_list_;
  ::google::protobuf::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordSwap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordSwap) */ {
 public:
  ObjectRecordSwap();
  virtual ~ObjectRecordSwap();

  ObjectRecordSwap(const ObjectRecordSwap& from);

  inline ObjectRecordSwap& operator=(const ObjectRecordSwap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectRecordSwap(ObjectRecordSwap&& from) noexcept
    : ObjectRecordSwap() {
    *this = ::std::move(from);
  }

  inline ObjectRecordSwap& operator=(ObjectRecordSwap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectRecordSwap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordSwap* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordSwap*>(
               &_ObjectRecordSwap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(ObjectRecordSwap* other);
  friend void swap(ObjectRecordSwap& a, ObjectRecordSwap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordSwap* New() const final {
    return CreateMaybeMessage<ObjectRecordSwap>(NULL);
  }

  ObjectRecordSwap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordSwap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectRecordSwap& from);
  void MergeFrom(const ObjectRecordSwap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordSwap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes origin_record_name = 2;
  void clear_origin_record_name();
  static const int kOriginRecordNameFieldNumber = 2;
  const ::std::string& origin_record_name() const;
  void set_origin_record_name(const ::std::string& value);
  #if LANG_CXX11
  void set_origin_record_name(::std::string&& value);
  #endif
  void set_origin_record_name(const char* value);
  void set_origin_record_name(const void* value, size_t size);
  ::std::string* mutable_origin_record_name();
  ::std::string* release_origin_record_name();
  void set_allocated_origin_record_name(::std::string* origin_record_name);

  // bytes target_record_name = 3;
  void clear_target_record_name();
  static const int kTargetRecordNameFieldNumber = 3;
  const ::std::string& target_record_name() const;
  void set_target_record_name(const ::std::string& value);
  #if LANG_CXX11
  void set_target_record_name(::std::string&& value);
  #endif
  void set_target_record_name(const char* value);
  void set_target_record_name(const void* value, size_t size);
  ::std::string* mutable_target_record_name();
  ::std::string* release_target_record_name();
  void set_allocated_target_record_name(::std::string* target_record_name);

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // int32 row_origin = 4;
  void clear_row_origin();
  static const int kRowOriginFieldNumber = 4;
  ::google::protobuf::int32 row_origin() const;
  void set_row_origin(::google::protobuf::int32 value);

  // int32 row_target = 5;
  void clear_row_target();
  static const int kRowTargetFieldNumber = 5;
  ::google::protobuf::int32 row_target() const;
  void set_row_target(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordSwap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr origin_record_name_;
  ::google::protobuf::internal::ArenaStringPtr target_record_name_;
  ::NFMsg::Ident* player_id_;
  ::google::protobuf::int32 row_origin_;
  ::google::protobuf::int32 row_target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordAddRow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordAddRow) */ {
 public:
  ObjectRecordAddRow();
  virtual ~ObjectRecordAddRow();

  ObjectRecordAddRow(const ObjectRecordAddRow& from);

  inline ObjectRecordAddRow& operator=(const ObjectRecordAddRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectRecordAddRow(ObjectRecordAddRow&& from) noexcept
    : ObjectRecordAddRow() {
    *this = ::std::move(from);
  }

  inline ObjectRecordAddRow& operator=(ObjectRecordAddRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectRecordAddRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordAddRow* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordAddRow*>(
               &_ObjectRecordAddRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(ObjectRecordAddRow* other);
  friend void swap(ObjectRecordAddRow& a, ObjectRecordAddRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordAddRow* New() const final {
    return CreateMaybeMessage<ObjectRecordAddRow>(NULL);
  }

  ObjectRecordAddRow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordAddRow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectRecordAddRow& from);
  void MergeFrom(const ObjectRecordAddRow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordAddRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.RecordAddRowStruct row_data = 3;
  int row_data_size() const;
  void clear_row_data();
  static const int kRowDataFieldNumber = 3;
  ::NFMsg::RecordAddRowStruct* mutable_row_data(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >*
      mutable_row_data();
  const ::NFMsg::RecordAddRowStruct& row_data(int index) const;
  ::NFMsg::RecordAddRowStruct* add_row_data();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >&
      row_data() const;

  // bytes record_name = 2;
  void clear_record_name();
  static const int kRecordNameFieldNumber = 2;
  const ::std::string& record_name() const;
  void set_record_name(const ::std::string& value);
  #if LANG_CXX11
  void set_record_name(::std::string&& value);
  #endif
  void set_record_name(const char* value);
  void set_record_name(const void* value, size_t size);
  ::std::string* mutable_record_name();
  ::std::string* release_record_name();
  void set_allocated_record_name(::std::string* record_name);

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordAddRow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct > row_data_;
  ::google::protobuf::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordRemove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordRemove) */ {
 public:
  ObjectRecordRemove();
  virtual ~ObjectRecordRemove();

  ObjectRecordRemove(const ObjectRecordRemove& from);

  inline ObjectRecordRemove& operator=(const ObjectRecordRemove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectRecordRemove(ObjectRecordRemove&& from) noexcept
    : ObjectRecordRemove() {
    *this = ::std::move(from);
  }

  inline ObjectRecordRemove& operator=(ObjectRecordRemove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectRecordRemove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordRemove* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordRemove*>(
               &_ObjectRecordRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(ObjectRecordRemove* other);
  friend void swap(ObjectRecordRemove& a, ObjectRecordRemove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordRemove* New() const final {
    return CreateMaybeMessage<ObjectRecordRemove>(NULL);
  }

  ObjectRecordRemove* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordRemove>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectRecordRemove& from);
  void MergeFrom(const ObjectRecordRemove& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordRemove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 remove_row = 3;
  int remove_row_size() const;
  void clear_remove_row();
  static const int kRemoveRowFieldNumber = 3;
  ::google::protobuf::int32 remove_row(int index) const;
  void set_remove_row(int index, ::google::protobuf::int32 value);
  void add_remove_row(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remove_row() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remove_row();

  // bytes record_name = 2;
  void clear_record_name();
  static const int kRecordNameFieldNumber = 2;
  const ::std::string& record_name() const;
  void set_record_name(const ::std::string& value);
  #if LANG_CXX11
  void set_record_name(::std::string&& value);
  #endif
  void set_record_name(const char* value);
  void set_record_name(const void* value, size_t size);
  ::std::string* mutable_record_name();
  ::std::string* release_record_name();
  void set_allocated_record_name(::std::string* record_name);

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordRemove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remove_row_;
  mutable int _remove_row_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr record_name_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectPropertyList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectPropertyList) */ {
 public:
  ObjectPropertyList();
  virtual ~ObjectPropertyList();

  ObjectPropertyList(const ObjectPropertyList& from);

  inline ObjectPropertyList& operator=(const ObjectPropertyList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectPropertyList(ObjectPropertyList&& from) noexcept
    : ObjectPropertyList() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyList& operator=(ObjectPropertyList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectPropertyList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectPropertyList* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyList*>(
               &_ObjectPropertyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(ObjectPropertyList* other);
  friend void swap(ObjectPropertyList& a, ObjectPropertyList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyList* New() const final {
    return CreateMaybeMessage<ObjectPropertyList>(NULL);
  }

  ObjectPropertyList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectPropertyList& from);
  void MergeFrom(const ObjectPropertyList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.PropertyInt property_int_list = 2;
  int property_int_list_size() const;
  void clear_property_int_list();
  static const int kPropertyIntListFieldNumber = 2;
  ::NFMsg::PropertyInt* mutable_property_int_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >*
      mutable_property_int_list();
  const ::NFMsg::PropertyInt& property_int_list(int index) const;
  ::NFMsg::PropertyInt* add_property_int_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >&
      property_int_list() const;

  // repeated .NFMsg.PropertyFloat property_float_list = 3;
  int property_float_list_size() const;
  void clear_property_float_list();
  static const int kPropertyFloatListFieldNumber = 3;
  ::NFMsg::PropertyFloat* mutable_property_float_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >*
      mutable_property_float_list();
  const ::NFMsg::PropertyFloat& property_float_list(int index) const;
  ::NFMsg::PropertyFloat* add_property_float_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >&
      property_float_list() const;

  // repeated .NFMsg.PropertyString property_string_list = 4;
  int property_string_list_size() const;
  void clear_property_string_list();
  static const int kPropertyStringListFieldNumber = 4;
  ::NFMsg::PropertyString* mutable_property_string_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >*
      mutable_property_string_list();
  const ::NFMsg::PropertyString& property_string_list(int index) const;
  ::NFMsg::PropertyString* add_property_string_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >&
      property_string_list() const;

  // repeated .NFMsg.PropertyObject property_object_list = 5;
  int property_object_list_size() const;
  void clear_property_object_list();
  static const int kPropertyObjectListFieldNumber = 5;
  ::NFMsg::PropertyObject* mutable_property_object_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >*
      mutable_property_object_list();
  const ::NFMsg::PropertyObject& property_object_list(int index) const;
  ::NFMsg::PropertyObject* add_property_object_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >&
      property_object_list() const;

  // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
  int property_vector2_list_size() const;
  void clear_property_vector2_list();
  static const int kPropertyVector2ListFieldNumber = 6;
  ::NFMsg::PropertyVector2* mutable_property_vector2_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >*
      mutable_property_vector2_list();
  const ::NFMsg::PropertyVector2& property_vector2_list(int index) const;
  ::NFMsg::PropertyVector2* add_property_vector2_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >&
      property_vector2_list() const;

  // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
  int property_vector3_list_size() const;
  void clear_property_vector3_list();
  static const int kPropertyVector3ListFieldNumber = 7;
  ::NFMsg::PropertyVector3* mutable_property_vector3_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >*
      mutable_property_vector3_list();
  const ::NFMsg::PropertyVector3& property_vector3_list(int index) const;
  ::NFMsg::PropertyVector3* add_property_vector3_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >&
      property_vector3_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectPropertyList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt > property_int_list_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat > property_float_list_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString > property_string_list_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject > property_object_list_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 > property_vector2_list_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 > property_vector3_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MultiObjectPropertyList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.MultiObjectPropertyList) */ {
 public:
  MultiObjectPropertyList();
  virtual ~MultiObjectPropertyList();

  MultiObjectPropertyList(const MultiObjectPropertyList& from);

  inline MultiObjectPropertyList& operator=(const MultiObjectPropertyList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultiObjectPropertyList(MultiObjectPropertyList&& from) noexcept
    : MultiObjectPropertyList() {
    *this = ::std::move(from);
  }

  inline MultiObjectPropertyList& operator=(MultiObjectPropertyList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiObjectPropertyList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiObjectPropertyList* internal_default_instance() {
    return reinterpret_cast<const MultiObjectPropertyList*>(
               &_MultiObjectPropertyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(MultiObjectPropertyList* other);
  friend void swap(MultiObjectPropertyList& a, MultiObjectPropertyList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultiObjectPropertyList* New() const final {
    return CreateMaybeMessage<MultiObjectPropertyList>(NULL);
  }

  MultiObjectPropertyList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MultiObjectPropertyList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MultiObjectPropertyList& from);
  void MergeFrom(const MultiObjectPropertyList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiObjectPropertyList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
  int multi_player_property_size() const;
  void clear_multi_player_property();
  static const int kMultiPlayerPropertyFieldNumber = 1;
  ::NFMsg::ObjectPropertyList* mutable_multi_player_property(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectPropertyList >*
      mutable_multi_player_property();
  const ::NFMsg::ObjectPropertyList& multi_player_property(int index) const;
  ::NFMsg::ObjectPropertyList* add_multi_player_property();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectPropertyList >&
      multi_player_property() const;

  // @@protoc_insertion_point(class_scope:NFMsg.MultiObjectPropertyList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectPropertyList > multi_player_property_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ObjectRecordList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ObjectRecordList) */ {
 public:
  ObjectRecordList();
  virtual ~ObjectRecordList();

  ObjectRecordList(const ObjectRecordList& from);

  inline ObjectRecordList& operator=(const ObjectRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectRecordList(ObjectRecordList&& from) noexcept
    : ObjectRecordList() {
    *this = ::std::move(from);
  }

  inline ObjectRecordList& operator=(ObjectRecordList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectRecordList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectRecordList* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordList*>(
               &_ObjectRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(ObjectRecordList* other);
  friend void swap(ObjectRecordList& a, ObjectRecordList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordList* New() const final {
    return CreateMaybeMessage<ObjectRecordList>(NULL);
  }

  ObjectRecordList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectRecordList& from);
  void MergeFrom(const ObjectRecordList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.ObjectRecordBase record_list = 2;
  int record_list_size() const;
  void clear_record_list();
  static const int kRecordListFieldNumber = 2;
  ::NFMsg::ObjectRecordBase* mutable_record_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordBase >*
      mutable_record_list();
  const ::NFMsg::ObjectRecordBase& record_list(int index) const;
  ::NFMsg::ObjectRecordBase* add_record_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordBase >&
      record_list() const;

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // @@protoc_insertion_point(class_scope:NFMsg.ObjectRecordList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordBase > record_list_;
  ::NFMsg::Ident* player_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MultiObjectRecordList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.MultiObjectRecordList) */ {
 public:
  MultiObjectRecordList();
  virtual ~MultiObjectRecordList();

  MultiObjectRecordList(const MultiObjectRecordList& from);

  inline MultiObjectRecordList& operator=(const MultiObjectRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultiObjectRecordList(MultiObjectRecordList&& from) noexcept
    : MultiObjectRecordList() {
    *this = ::std::move(from);
  }

  inline MultiObjectRecordList& operator=(MultiObjectRecordList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiObjectRecordList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiObjectRecordList* internal_default_instance() {
    return reinterpret_cast<const MultiObjectRecordList*>(
               &_MultiObjectRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(MultiObjectRecordList* other);
  friend void swap(MultiObjectRecordList& a, MultiObjectRecordList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultiObjectRecordList* New() const final {
    return CreateMaybeMessage<MultiObjectRecordList>(NULL);
  }

  MultiObjectRecordList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MultiObjectRecordList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MultiObjectRecordList& from);
  void MergeFrom(const MultiObjectRecordList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiObjectRecordList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
  int multi_player_record_size() const;
  void clear_multi_player_record();
  static const int kMultiPlayerRecordFieldNumber = 1;
  ::NFMsg::ObjectRecordList* mutable_multi_player_record(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordList >*
      mutable_multi_player_record();
  const ::NFMsg::ObjectRecordList& multi_player_record(int index) const;
  ::NFMsg::ObjectRecordList* add_multi_player_record();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordList >&
      multi_player_record() const;

  // @@protoc_insertion_point(class_scope:NFMsg.MultiObjectRecordList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordList > multi_player_record_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT MsgBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.MsgBase) */ {
 public:
  MsgBase();
  virtual ~MsgBase();

  MsgBase(const MsgBase& from);

  inline MsgBase& operator=(const MsgBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgBase(MsgBase&& from) noexcept
    : MsgBase() {
    *this = ::std::move(from);
  }

  inline MsgBase& operator=(MsgBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgBase* internal_default_instance() {
    return reinterpret_cast<const MsgBase*>(
               &_MsgBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(MsgBase* other);
  friend void swap(MsgBase& a, MsgBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgBase* New() const final {
    return CreateMaybeMessage<MsgBase>(NULL);
  }

  MsgBase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgBase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgBase& from);
  void MergeFrom(const MsgBase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFMsg.Ident player_Client_list = 3;
  int player_client_list_size() const;
  void clear_player_client_list();
  static const int kPlayerClientListFieldNumber = 3;
  ::NFMsg::Ident* mutable_player_client_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_player_client_list();
  const ::NFMsg::Ident& player_client_list(int index) const;
  ::NFMsg::Ident* add_player_client_list();
  const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
      player_client_list() const;

  // bytes msg_data = 2;
  void clear_msg_data();
  static const int kMsgDataFieldNumber = 2;
  const ::std::string& msg_data() const;
  void set_msg_data(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_data(::std::string&& value);
  #endif
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  ::std::string* mutable_msg_data();
  ::std::string* release_msg_data();
  void set_allocated_msg_data(::std::string* msg_data);

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  public:
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);

  // .NFMsg.Ident hash_ident = 4;
  bool has_hash_ident() const;
  void clear_hash_ident();
  static const int kHashIdentFieldNumber = 4;
  private:
  const ::NFMsg::Ident& _internal_hash_ident() const;
  public:
  const ::NFMsg::Ident& hash_ident() const;
  ::NFMsg::Ident* release_hash_ident();
  ::NFMsg::Ident* mutable_hash_ident();
  void set_allocated_hash_ident(::NFMsg::Ident* hash_ident);

  // @@protoc_insertion_point(class_scope:NFMsg.MsgBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident > player_client_list_;
  ::google::protobuf::internal::ArenaStringPtr msg_data_;
  ::NFMsg::Ident* player_id_;
  ::NFMsg::Ident* hash_ident_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqCommand) */ {
 public:
  ReqCommand();
  virtual ~ReqCommand();

  ReqCommand(const ReqCommand& from);

  inline ReqCommand& operator=(const ReqCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqCommand(ReqCommand&& from) noexcept
    : ReqCommand() {
    *this = ::std::move(from);
  }

  inline ReqCommand& operator=(ReqCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqCommand* internal_default_instance() {
    return reinterpret_cast<const ReqCommand*>(
               &_ReqCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ReqCommand* other);
  friend void swap(ReqCommand& a, ReqCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqCommand* New() const final {
    return CreateMaybeMessage<ReqCommand>(NULL);
  }

  ReqCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqCommand& from);
  void MergeFrom(const ReqCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqCommand_EGameCommandType EGameCommandType;
  static const EGameCommandType EGCT_MODIY_PROPERTY =
    ReqCommand_EGameCommandType_EGCT_MODIY_PROPERTY;
  static const EGameCommandType EGCT_MODIY_ITEM =
    ReqCommand_EGameCommandType_EGCT_MODIY_ITEM;
  static const EGameCommandType EGCT_CREATE_OBJECT =
    ReqCommand_EGameCommandType_EGCT_CREATE_OBJECT;
  static const EGameCommandType EGCT_ADD_ROLE_EXP =
    ReqCommand_EGameCommandType_EGCT_ADD_ROLE_EXP;
  static inline bool EGameCommandType_IsValid(int value) {
    return ReqCommand_EGameCommandType_IsValid(value);
  }
  static const EGameCommandType EGameCommandType_MIN =
    ReqCommand_EGameCommandType_EGameCommandType_MIN;
  static const EGameCommandType EGameCommandType_MAX =
    ReqCommand_EGameCommandType_EGameCommandType_MAX;
  static const int EGameCommandType_ARRAYSIZE =
    ReqCommand_EGameCommandType_EGameCommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameCommandType_descriptor() {
    return ReqCommand_EGameCommandType_descriptor();
  }
  static inline const ::std::string& EGameCommandType_Name(EGameCommandType value) {
    return ReqCommand_EGameCommandType_Name(value);
  }
  static inline bool EGameCommandType_Parse(const ::std::string& name,
      EGameCommandType* value) {
    return ReqCommand_EGameCommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes command_str_value = 3;
  void clear_command_str_value();
  static const int kCommandStrValueFieldNumber = 3;
  const ::std::string& command_str_value() const;
  void set_command_str_value(const ::std::string& value);
  #if LANG_CXX11
  void set_command_str_value(::std::string&& value);
  #endif
  void set_command_str_value(const char* value);
  void set_command_str_value(const void* value, size_t size);
  ::std::string* mutable_command_str_value();
  ::std::string* release_command_str_value();
  void set_allocated_command_str_value(::std::string* command_str_value);

  // bytes command_value_str = 6;
  void clear_command_value_str();
  static const int kCommandValueStrFieldNumber = 6;
  const ::std::string& command_value_str() const;
  void set_command_value_str(const ::std::string& value);
  #if LANG_CXX11
  void set_command_value_str(::std::string&& value);
  #endif
  void set_command_value_str(const char* value);
  void set_command_value_str(const void* value, size_t size);
  ::std::string* mutable_command_value_str();
  ::std::string* release_command_value_str();
  void set_allocated_command_value_str(::std::string* command_value_str);

  // .NFMsg.Ident control_id = 1;
  bool has_control_id() const;
  void clear_control_id();
  static const int kControlIdFieldNumber = 1;
  private:
  const ::NFMsg::Ident& _internal_control_id() const;
  public:
  const ::NFMsg::Ident& control_id() const;
  ::NFMsg::Ident* release_control_id();
  ::NFMsg::Ident* mutable_control_id();
  void set_allocated_control_id(::NFMsg::Ident* control_id);

  // .NFMsg.Ident command_value_object = 7;
  bool has_command_value_object() const;
  void clear_command_value_object();
  static const int kCommandValueObjectFieldNumber = 7;
  private:
  const ::NFMsg::Ident& _internal_command_value_object() const;
  public:
  const ::NFMsg::Ident& command_value_object() const;
  ::NFMsg::Ident* release_command_value_object();
  ::NFMsg::Ident* mutable_command_value_object();
  void set_allocated_command_value_object(::NFMsg::Ident* command_value_object);

  // int64 command_value_int = 4;
  void clear_command_value_int();
  static const int kCommandValueIntFieldNumber = 4;
  ::google::protobuf::int64 command_value_int() const;
  void set_command_value_int(::google::protobuf::int64 value);

  // double command_value_float = 5;
  void clear_command_value_float();
  static const int kCommandValueFloatFieldNumber = 5;
  double command_value_float() const;
  void set_command_value_float(double value);

  // .NFMsg.ReqCommand.EGameCommandType command_id = 2;
  void clear_command_id();
  static const int kCommandIdFieldNumber = 2;
  ::NFMsg::ReqCommand_EGameCommandType command_id() const;
  void set_command_id(::NFMsg::ReqCommand_EGameCommandType value);

  // int32 row = 8;
  void clear_row();
  static const int kRowFieldNumber = 8;
  ::google::protobuf::int32 row() const;
  void set_row(::google::protobuf::int32 value);

  // int32 col = 9;
  void clear_col();
  static const int kColFieldNumber = 9;
  ::google::protobuf::int32 col() const;
  void set_col(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFMsg.ReqCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr command_str_value_;
  ::google::protobuf::internal::ArenaStringPtr command_value_str_;
  ::NFMsg::Ident* control_id_;
  ::NFMsg::Ident* command_value_object_;
  ::google::protobuf::int64 command_value_int_;
  double command_value_float_;
  int command_id_;
  ::google::protobuf::int32 row_;
  ::google::protobuf::int32 col_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_NFMsgBase_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ident

// int64 svrid = 1;
inline void Ident::clear_svrid() {
  svrid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ident::svrid() const {
  // @@protoc_insertion_point(field_get:NFMsg.Ident.svrid)
  return svrid_;
}
inline void Ident::set_svrid(::google::protobuf::int64 value) {
  
  svrid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Ident.svrid)
}

// int64 index = 2;
inline void Ident::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ident::index() const {
  // @@protoc_insertion_point(field_get:NFMsg.Ident.index)
  return index_;
}
inline void Ident::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Ident.index)
}

// -------------------------------------------------------------------

// Vector2

// float x = 1;
inline void Vector2::clear_x() {
  x_ = 0;
}
inline float Vector2::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector2.x)
  return x_;
}
inline void Vector2::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Vector2.x)
}

// float y = 2;
inline void Vector2::clear_y() {
  y_ = 0;
}
inline float Vector2::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector2.y)
  return y_;
}
inline void Vector2::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Vector2.y)
}

// -------------------------------------------------------------------

// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector3.x)
  return x_;
}
inline void Vector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector3.y)
  return y_;
}
inline void Vector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector3.z)
  return z_;
}
inline void Vector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Vector3.z)
}

// -------------------------------------------------------------------

// PropertyInt

// bytes property_name = 1;
inline void PropertyInt::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyInt::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyInt.property_name)
  return property_name_.GetNoArena();
}
inline void PropertyInt::set_property_name(const ::std::string& value) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyInt.property_name)
}
#if LANG_CXX11
inline void PropertyInt::set_property_name(::std::string&& value) {
  
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyInt.property_name)
}
#endif
inline void PropertyInt::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyInt.property_name)
}
inline void PropertyInt::set_property_name(const void* value, size_t size) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyInt.property_name)
}
inline ::std::string* PropertyInt::mutable_property_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyInt.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyInt::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyInt.property_name)
  
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyInt::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    
  } else {
    
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyInt.property_name)
}

// int64 data = 2;
inline void PropertyInt::clear_data() {
  data_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PropertyInt::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyInt.data)
  return data_;
}
inline void PropertyInt::set_data(::google::protobuf::int64 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PropertyInt.data)
}

// -------------------------------------------------------------------

// PropertyFloat

// bytes property_name = 1;
inline void PropertyFloat::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyFloat::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyFloat.property_name)
  return property_name_.GetNoArena();
}
inline void PropertyFloat::set_property_name(const ::std::string& value) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyFloat.property_name)
}
#if LANG_CXX11
inline void PropertyFloat::set_property_name(::std::string&& value) {
  
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyFloat.property_name)
}
#endif
inline void PropertyFloat::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyFloat.property_name)
}
inline void PropertyFloat::set_property_name(const void* value, size_t size) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyFloat.property_name)
}
inline ::std::string* PropertyFloat::mutable_property_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyFloat.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyFloat::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyFloat.property_name)
  
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyFloat::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    
  } else {
    
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyFloat.property_name)
}

// float data = 2;
inline void PropertyFloat::clear_data() {
  data_ = 0;
}
inline float PropertyFloat::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyFloat.data)
  return data_;
}
inline void PropertyFloat::set_data(float value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PropertyFloat.data)
}

// -------------------------------------------------------------------

// PropertyString

// bytes property_name = 1;
inline void PropertyString::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyString::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyString.property_name)
  return property_name_.GetNoArena();
}
inline void PropertyString::set_property_name(const ::std::string& value) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyString.property_name)
}
#if LANG_CXX11
inline void PropertyString::set_property_name(::std::string&& value) {
  
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyString.property_name)
}
#endif
inline void PropertyString::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyString.property_name)
}
inline void PropertyString::set_property_name(const void* value, size_t size) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyString.property_name)
}
inline ::std::string* PropertyString::mutable_property_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyString.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyString::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyString.property_name)
  
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyString::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    
  } else {
    
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyString.property_name)
}

// bytes data = 2;
inline void PropertyString::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyString::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyString.data)
  return data_.GetNoArena();
}
inline void PropertyString::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyString.data)
}
#if LANG_CXX11
inline void PropertyString::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyString.data)
}
#endif
inline void PropertyString::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyString.data)
}
inline void PropertyString::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyString.data)
}
inline ::std::string* PropertyString::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyString.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyString::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyString.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyString::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyString.data)
}

// -------------------------------------------------------------------

// PropertyObject

// bytes property_name = 1;
inline void PropertyObject::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyObject::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyObject.property_name)
  return property_name_.GetNoArena();
}
inline void PropertyObject::set_property_name(const ::std::string& value) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyObject.property_name)
}
#if LANG_CXX11
inline void PropertyObject::set_property_name(::std::string&& value) {
  
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyObject.property_name)
}
#endif
inline void PropertyObject::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyObject.property_name)
}
inline void PropertyObject::set_property_name(const void* value, size_t size) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyObject.property_name)
}
inline ::std::string* PropertyObject::mutable_property_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyObject.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyObject::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyObject.property_name)
  
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyObject::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    
  } else {
    
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyObject.property_name)
}

// .NFMsg.Ident data = 2;
inline bool PropertyObject::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void PropertyObject::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::NFMsg::Ident& PropertyObject::_internal_data() const {
  return *data_;
}
inline const ::NFMsg::Ident& PropertyObject::data() const {
  const ::NFMsg::Ident* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.PropertyObject.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* PropertyObject::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyObject.data)
  
  ::NFMsg::Ident* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* PropertyObject::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyObject.data)
  return data_;
}
inline void PropertyObject::set_allocated_data(::NFMsg::Ident* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyObject.data)
}

// -------------------------------------------------------------------

// PropertyVector2

// bytes property_name = 1;
inline void PropertyVector2::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyVector2::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector2.property_name)
  return property_name_.GetNoArena();
}
inline void PropertyVector2::set_property_name(const ::std::string& value) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyVector2.property_name)
}
#if LANG_CXX11
inline void PropertyVector2::set_property_name(::std::string&& value) {
  
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyVector2.property_name)
}
#endif
inline void PropertyVector2::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyVector2.property_name)
}
inline void PropertyVector2::set_property_name(const void* value, size_t size) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyVector2.property_name)
}
inline ::std::string* PropertyVector2::mutable_property_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector2.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyVector2::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector2.property_name)
  
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyVector2::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    
  } else {
    
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector2.property_name)
}

// .NFMsg.Vector2 data = 2;
inline bool PropertyVector2::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void PropertyVector2::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::NFMsg::Vector2& PropertyVector2::_internal_data() const {
  return *data_;
}
inline const ::NFMsg::Vector2& PropertyVector2::data() const {
  const ::NFMsg::Vector2* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector2.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector2*>(
      &::NFMsg::_Vector2_default_instance_);
}
inline ::NFMsg::Vector2* PropertyVector2::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector2.data)
  
  ::NFMsg::Vector2* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::NFMsg::Vector2* PropertyVector2::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector2>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector2.data)
  return data_;
}
inline void PropertyVector2::set_allocated_data(::NFMsg::Vector2* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector2.data)
}

// -------------------------------------------------------------------

// PropertyVector3

// bytes property_name = 1;
inline void PropertyVector3::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertyVector3::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector3.property_name)
  return property_name_.GetNoArena();
}
inline void PropertyVector3::set_property_name(const ::std::string& value) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyVector3.property_name)
}
#if LANG_CXX11
inline void PropertyVector3::set_property_name(::std::string&& value) {
  
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyVector3.property_name)
}
#endif
inline void PropertyVector3::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyVector3.property_name)
}
inline void PropertyVector3::set_property_name(const void* value, size_t size) {
  
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyVector3.property_name)
}
inline ::std::string* PropertyVector3::mutable_property_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector3.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertyVector3::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector3.property_name)
  
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertyVector3::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    
  } else {
    
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector3.property_name)
}

// .NFMsg.Vector3 data = 2;
inline bool PropertyVector3::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void PropertyVector3::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::NFMsg::Vector3& PropertyVector3::_internal_data() const {
  return *data_;
}
inline const ::NFMsg::Vector3& PropertyVector3::data() const {
  const ::NFMsg::Vector3* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector3.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline ::NFMsg::Vector3* PropertyVector3::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector3.data)
  
  ::NFMsg::Vector3* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::NFMsg::Vector3* PropertyVector3::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector3.data)
  return data_;
}
inline void PropertyVector3::set_allocated_data(::NFMsg::Vector3* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector3.data)
}

// -------------------------------------------------------------------

// RecordInt

// int32 row = 1;
inline void RecordInt::clear_row() {
  row_ = 0;
}
inline ::google::protobuf::int32 RecordInt::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordInt.row)
  return row_;
}
inline void RecordInt::set_row(::google::protobuf::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordInt.row)
}

// int32 col = 2;
inline void RecordInt::clear_col() {
  col_ = 0;
}
inline ::google::protobuf::int32 RecordInt::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordInt.col)
  return col_;
}
inline void RecordInt::set_col(::google::protobuf::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordInt.col)
}

// int64 data = 3;
inline void RecordInt::clear_data() {
  data_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RecordInt::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordInt.data)
  return data_;
}
inline void RecordInt::set_data(::google::protobuf::int64 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordInt.data)
}

// -------------------------------------------------------------------

// RecordFloat

// int32 row = 1;
inline void RecordFloat::clear_row() {
  row_ = 0;
}
inline ::google::protobuf::int32 RecordFloat::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordFloat.row)
  return row_;
}
inline void RecordFloat::set_row(::google::protobuf::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordFloat.row)
}

// int32 col = 2;
inline void RecordFloat::clear_col() {
  col_ = 0;
}
inline ::google::protobuf::int32 RecordFloat::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordFloat.col)
  return col_;
}
inline void RecordFloat::set_col(::google::protobuf::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordFloat.col)
}

// float data = 3;
inline void RecordFloat::clear_data() {
  data_ = 0;
}
inline float RecordFloat::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordFloat.data)
  return data_;
}
inline void RecordFloat::set_data(float value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordFloat.data)
}

// -------------------------------------------------------------------

// RecordString

// int32 row = 1;
inline void RecordString::clear_row() {
  row_ = 0;
}
inline ::google::protobuf::int32 RecordString::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordString.row)
  return row_;
}
inline void RecordString::set_row(::google::protobuf::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordString.row)
}

// int32 col = 2;
inline void RecordString::clear_col() {
  col_ = 0;
}
inline ::google::protobuf::int32 RecordString::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordString.col)
  return col_;
}
inline void RecordString::set_col(::google::protobuf::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordString.col)
}

// bytes data = 3;
inline void RecordString::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecordString::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordString.data)
  return data_.GetNoArena();
}
inline void RecordString::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordString.data)
}
#if LANG_CXX11
inline void RecordString::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.RecordString.data)
}
#endif
inline void RecordString::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.RecordString.data)
}
inline void RecordString::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.RecordString.data)
}
inline ::std::string* RecordString::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordString.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecordString::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordString.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecordString::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordString.data)
}

// -------------------------------------------------------------------

// RecordObject

// int32 row = 1;
inline void RecordObject::clear_row() {
  row_ = 0;
}
inline ::google::protobuf::int32 RecordObject::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordObject.row)
  return row_;
}
inline void RecordObject::set_row(::google::protobuf::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordObject.row)
}

// int32 col = 2;
inline void RecordObject::clear_col() {
  col_ = 0;
}
inline ::google::protobuf::int32 RecordObject::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordObject.col)
  return col_;
}
inline void RecordObject::set_col(::google::protobuf::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordObject.col)
}

// .NFMsg.Ident data = 3;
inline bool RecordObject::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void RecordObject::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::NFMsg::Ident& RecordObject::_internal_data() const {
  return *data_;
}
inline const ::NFMsg::Ident& RecordObject::data() const {
  const ::NFMsg::Ident* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.RecordObject.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* RecordObject::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordObject.data)
  
  ::NFMsg::Ident* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* RecordObject::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordObject.data)
  return data_;
}
inline void RecordObject::set_allocated_data(::NFMsg::Ident* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordObject.data)
}

// -------------------------------------------------------------------

// RecordVector2

// int32 row = 1;
inline void RecordVector2::clear_row() {
  row_ = 0;
}
inline ::google::protobuf::int32 RecordVector2::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector2.row)
  return row_;
}
inline void RecordVector2::set_row(::google::protobuf::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector2.row)
}

// int32 col = 2;
inline void RecordVector2::clear_col() {
  col_ = 0;
}
inline ::google::protobuf::int32 RecordVector2::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector2.col)
  return col_;
}
inline void RecordVector2::set_col(::google::protobuf::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector2.col)
}

// .NFMsg.Vector2 data = 3;
inline bool RecordVector2::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void RecordVector2::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::NFMsg::Vector2& RecordVector2::_internal_data() const {
  return *data_;
}
inline const ::NFMsg::Vector2& RecordVector2::data() const {
  const ::NFMsg::Vector2* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector2.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector2*>(
      &::NFMsg::_Vector2_default_instance_);
}
inline ::NFMsg::Vector2* RecordVector2::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordVector2.data)
  
  ::NFMsg::Vector2* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::NFMsg::Vector2* RecordVector2::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector2>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordVector2.data)
  return data_;
}
inline void RecordVector2::set_allocated_data(::NFMsg::Vector2* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordVector2.data)
}

// -------------------------------------------------------------------

// RecordVector3

// int32 row = 1;
inline void RecordVector3::clear_row() {
  row_ = 0;
}
inline ::google::protobuf::int32 RecordVector3::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector3.row)
  return row_;
}
inline void RecordVector3::set_row(::google::protobuf::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector3.row)
}

// int32 col = 2;
inline void RecordVector3::clear_col() {
  col_ = 0;
}
inline ::google::protobuf::int32 RecordVector3::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector3.col)
  return col_;
}
inline void RecordVector3::set_col(::google::protobuf::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector3.col)
}

// .NFMsg.Vector3 data = 3;
inline bool RecordVector3::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void RecordVector3::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::NFMsg::Vector3& RecordVector3::_internal_data() const {
  return *data_;
}
inline const ::NFMsg::Vector3& RecordVector3::data() const {
  const ::NFMsg::Vector3* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector3.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline ::NFMsg::Vector3* RecordVector3::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordVector3.data)
  
  ::NFMsg::Vector3* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::NFMsg::Vector3* RecordVector3::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordVector3.data)
  return data_;
}
inline void RecordVector3::set_allocated_data(::NFMsg::Vector3* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordVector3.data)
}

// -------------------------------------------------------------------

// RecordAddRowStruct

// int32 row = 1;
inline void RecordAddRowStruct::clear_row() {
  row_ = 0;
}
inline ::google::protobuf::int32 RecordAddRowStruct::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.row)
  return row_;
}
inline void RecordAddRowStruct::set_row(::google::protobuf::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordAddRowStruct.row)
}

// repeated .NFMsg.RecordInt record_int_list = 2;
inline int RecordAddRowStruct::record_int_list_size() const {
  return record_int_list_.size();
}
inline void RecordAddRowStruct::clear_record_int_list() {
  record_int_list_.Clear();
}
inline ::NFMsg::RecordInt* RecordAddRowStruct::mutable_record_int_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >*
RecordAddRowStruct::mutable_record_int_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_int_list)
  return &record_int_list_;
}
inline const ::NFMsg::RecordInt& RecordAddRowStruct::record_int_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_.Get(index);
}
inline ::NFMsg::RecordInt* RecordAddRowStruct::add_record_int_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >&
RecordAddRowStruct::record_int_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_;
}

// repeated .NFMsg.RecordFloat record_float_list = 3;
inline int RecordAddRowStruct::record_float_list_size() const {
  return record_float_list_.size();
}
inline void RecordAddRowStruct::clear_record_float_list() {
  record_float_list_.Clear();
}
inline ::NFMsg::RecordFloat* RecordAddRowStruct::mutable_record_float_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >*
RecordAddRowStruct::mutable_record_float_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_float_list)
  return &record_float_list_;
}
inline const ::NFMsg::RecordFloat& RecordAddRowStruct::record_float_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_.Get(index);
}
inline ::NFMsg::RecordFloat* RecordAddRowStruct::add_record_float_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >&
RecordAddRowStruct::record_float_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_;
}

// repeated .NFMsg.RecordString record_string_list = 4;
inline int RecordAddRowStruct::record_string_list_size() const {
  return record_string_list_.size();
}
inline void RecordAddRowStruct::clear_record_string_list() {
  record_string_list_.Clear();
}
inline ::NFMsg::RecordString* RecordAddRowStruct::mutable_record_string_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >*
RecordAddRowStruct::mutable_record_string_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_string_list)
  return &record_string_list_;
}
inline const ::NFMsg::RecordString& RecordAddRowStruct::record_string_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_.Get(index);
}
inline ::NFMsg::RecordString* RecordAddRowStruct::add_record_string_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >&
RecordAddRowStruct::record_string_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_;
}

// repeated .NFMsg.RecordObject record_object_list = 5;
inline int RecordAddRowStruct::record_object_list_size() const {
  return record_object_list_.size();
}
inline void RecordAddRowStruct::clear_record_object_list() {
  record_object_list_.Clear();
}
inline ::NFMsg::RecordObject* RecordAddRowStruct::mutable_record_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >*
RecordAddRowStruct::mutable_record_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_object_list)
  return &record_object_list_;
}
inline const ::NFMsg::RecordObject& RecordAddRowStruct::record_object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_.Get(index);
}
inline ::NFMsg::RecordObject* RecordAddRowStruct::add_record_object_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >&
RecordAddRowStruct::record_object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_;
}

// repeated .NFMsg.RecordVector2 record_vector2_list = 6;
inline int RecordAddRowStruct::record_vector2_list_size() const {
  return record_vector2_list_.size();
}
inline void RecordAddRowStruct::clear_record_vector2_list() {
  record_vector2_list_.Clear();
}
inline ::NFMsg::RecordVector2* RecordAddRowStruct::mutable_record_vector2_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >*
RecordAddRowStruct::mutable_record_vector2_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_vector2_list)
  return &record_vector2_list_;
}
inline const ::NFMsg::RecordVector2& RecordAddRowStruct::record_vector2_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_.Get(index);
}
inline ::NFMsg::RecordVector2* RecordAddRowStruct::add_record_vector2_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >&
RecordAddRowStruct::record_vector2_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_;
}

// repeated .NFMsg.RecordVector3 record_vector3_list = 7;
inline int RecordAddRowStruct::record_vector3_list_size() const {
  return record_vector3_list_.size();
}
inline void RecordAddRowStruct::clear_record_vector3_list() {
  record_vector3_list_.Clear();
}
inline ::NFMsg::RecordVector3* RecordAddRowStruct::mutable_record_vector3_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >*
RecordAddRowStruct::mutable_record_vector3_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_vector3_list)
  return &record_vector3_list_;
}
inline const ::NFMsg::RecordVector3& RecordAddRowStruct::record_vector3_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_.Get(index);
}
inline ::NFMsg::RecordVector3* RecordAddRowStruct::add_record_vector3_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >&
RecordAddRowStruct::record_vector3_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_;
}

// -------------------------------------------------------------------

// ObjectRecordBase

// bytes record_name = 1;
inline void ObjectRecordBase::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectRecordBase::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordBase.record_name)
  return record_name_.GetNoArena();
}
inline void ObjectRecordBase::set_record_name(const ::std::string& value) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordBase.record_name)
}
#if LANG_CXX11
inline void ObjectRecordBase::set_record_name(::std::string&& value) {
  
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordBase.record_name)
}
#endif
inline void ObjectRecordBase::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordBase.record_name)
}
inline void ObjectRecordBase::set_record_name(const void* value, size_t size) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordBase.record_name)
}
inline ::std::string* ObjectRecordBase::mutable_record_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordBase.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectRecordBase::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordBase.record_name)
  
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectRecordBase::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    
  } else {
    
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordBase.record_name)
}

// repeated .NFMsg.RecordAddRowStruct row_struct = 2;
inline int ObjectRecordBase::row_struct_size() const {
  return row_struct_.size();
}
inline void ObjectRecordBase::clear_row_struct() {
  row_struct_.Clear();
}
inline ::NFMsg::RecordAddRowStruct* ObjectRecordBase::mutable_row_struct(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordBase.row_struct)
  return row_struct_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >*
ObjectRecordBase::mutable_row_struct() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordBase.row_struct)
  return &row_struct_;
}
inline const ::NFMsg::RecordAddRowStruct& ObjectRecordBase::row_struct(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordBase.row_struct)
  return row_struct_.Get(index);
}
inline ::NFMsg::RecordAddRowStruct* ObjectRecordBase::add_row_struct() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordBase.row_struct)
  return row_struct_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >&
ObjectRecordBase::row_struct() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordBase.row_struct)
  return row_struct_;
}

// -------------------------------------------------------------------

// ObjectPropertyInt

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyInt::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectPropertyInt::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectPropertyInt::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectPropertyInt::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyInt.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectPropertyInt::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyInt.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyInt::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyInt.player_id)
  return player_id_;
}
inline void ObjectPropertyInt::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyInt.player_id)
}

// repeated .NFMsg.PropertyInt property_list = 2;
inline int ObjectPropertyInt::property_list_size() const {
  return property_list_.size();
}
inline void ObjectPropertyInt::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyInt* ObjectPropertyInt::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyInt.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >*
ObjectPropertyInt::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyInt.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyInt& ObjectPropertyInt::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyInt.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::PropertyInt* ObjectPropertyInt::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyInt.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >&
ObjectPropertyInt::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyInt.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyFloat

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyFloat::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectPropertyFloat::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectPropertyFloat::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectPropertyFloat::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyFloat.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectPropertyFloat::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyFloat.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyFloat::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyFloat.player_id)
  return player_id_;
}
inline void ObjectPropertyFloat::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyFloat.player_id)
}

// repeated .NFMsg.PropertyFloat property_list = 2;
inline int ObjectPropertyFloat::property_list_size() const {
  return property_list_.size();
}
inline void ObjectPropertyFloat::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyFloat* ObjectPropertyFloat::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyFloat.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >*
ObjectPropertyFloat::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyFloat.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyFloat& ObjectPropertyFloat::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyFloat.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::PropertyFloat* ObjectPropertyFloat::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyFloat.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >&
ObjectPropertyFloat::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyFloat.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyString

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyString::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectPropertyString::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectPropertyString::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectPropertyString::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyString.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectPropertyString::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyString.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyString::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyString.player_id)
  return player_id_;
}
inline void ObjectPropertyString::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyString.player_id)
}

// repeated .NFMsg.PropertyString property_list = 2;
inline int ObjectPropertyString::property_list_size() const {
  return property_list_.size();
}
inline void ObjectPropertyString::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyString* ObjectPropertyString::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyString.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >*
ObjectPropertyString::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyString.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyString& ObjectPropertyString::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyString.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::PropertyString* ObjectPropertyString::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyString.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >&
ObjectPropertyString::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyString.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyObject

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyObject::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectPropertyObject::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectPropertyObject::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectPropertyObject::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyObject.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectPropertyObject::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyObject.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyObject::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyObject.player_id)
  return player_id_;
}
inline void ObjectPropertyObject::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyObject.player_id)
}

// repeated .NFMsg.PropertyObject property_list = 2;
inline int ObjectPropertyObject::property_list_size() const {
  return property_list_.size();
}
inline void ObjectPropertyObject::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyObject* ObjectPropertyObject::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyObject.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >*
ObjectPropertyObject::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyObject.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyObject& ObjectPropertyObject::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyObject.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::PropertyObject* ObjectPropertyObject::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyObject.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >&
ObjectPropertyObject::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyObject.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyVector2

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyVector2::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectPropertyVector2::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectPropertyVector2::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectPropertyVector2::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector2.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectPropertyVector2::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyVector2.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyVector2::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector2.player_id)
  return player_id_;
}
inline void ObjectPropertyVector2::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyVector2.player_id)
}

// repeated .NFMsg.PropertyVector2 property_list = 2;
inline int ObjectPropertyVector2::property_list_size() const {
  return property_list_.size();
}
inline void ObjectPropertyVector2::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyVector2* ObjectPropertyVector2::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector2.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >*
ObjectPropertyVector2::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyVector2.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyVector2& ObjectPropertyVector2::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector2.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::PropertyVector2* ObjectPropertyVector2::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyVector2.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >&
ObjectPropertyVector2::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyVector2.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyVector3

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyVector3::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectPropertyVector3::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectPropertyVector3::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectPropertyVector3::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector3.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectPropertyVector3::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyVector3.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyVector3::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector3.player_id)
  return player_id_;
}
inline void ObjectPropertyVector3::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyVector3.player_id)
}

// repeated .NFMsg.PropertyVector3 property_list = 2;
inline int ObjectPropertyVector3::property_list_size() const {
  return property_list_.size();
}
inline void ObjectPropertyVector3::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::PropertyVector3* ObjectPropertyVector3::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector3.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >*
ObjectPropertyVector3::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyVector3.property_list)
  return &property_list_;
}
inline const ::NFMsg::PropertyVector3& ObjectPropertyVector3::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector3.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::PropertyVector3* ObjectPropertyVector3::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyVector3.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >&
ObjectPropertyVector3::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyVector3.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordInt

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordInt::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectRecordInt::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectRecordInt::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectRecordInt::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordInt.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectRecordInt::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordInt.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordInt::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordInt.player_id)
  return player_id_;
}
inline void ObjectRecordInt::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordInt.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordInt::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectRecordInt::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordInt.record_name)
  return record_name_.GetNoArena();
}
inline void ObjectRecordInt::set_record_name(const ::std::string& value) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordInt.record_name)
}
#if LANG_CXX11
inline void ObjectRecordInt::set_record_name(::std::string&& value) {
  
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordInt.record_name)
}
#endif
inline void ObjectRecordInt::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordInt.record_name)
}
inline void ObjectRecordInt::set_record_name(const void* value, size_t size) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordInt.record_name)
}
inline ::std::string* ObjectRecordInt::mutable_record_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordInt.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectRecordInt::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordInt.record_name)
  
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectRecordInt::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    
  } else {
    
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordInt.record_name)
}

// repeated .NFMsg.RecordInt property_list = 3;
inline int ObjectRecordInt::property_list_size() const {
  return property_list_.size();
}
inline void ObjectRecordInt::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordInt* ObjectRecordInt::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordInt.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >*
ObjectRecordInt::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordInt.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordInt& ObjectRecordInt::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordInt.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::RecordInt* ObjectRecordInt::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordInt.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >&
ObjectRecordInt::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordInt.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordFloat

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordFloat::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectRecordFloat::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectRecordFloat::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectRecordFloat::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordFloat.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectRecordFloat::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordFloat.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordFloat::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordFloat.player_id)
  return player_id_;
}
inline void ObjectRecordFloat::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordFloat.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordFloat::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectRecordFloat::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordFloat.record_name)
  return record_name_.GetNoArena();
}
inline void ObjectRecordFloat::set_record_name(const ::std::string& value) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordFloat.record_name)
}
#if LANG_CXX11
inline void ObjectRecordFloat::set_record_name(::std::string&& value) {
  
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordFloat.record_name)
}
#endif
inline void ObjectRecordFloat::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordFloat.record_name)
}
inline void ObjectRecordFloat::set_record_name(const void* value, size_t size) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordFloat.record_name)
}
inline ::std::string* ObjectRecordFloat::mutable_record_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordFloat.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectRecordFloat::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordFloat.record_name)
  
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectRecordFloat::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    
  } else {
    
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordFloat.record_name)
}

// repeated .NFMsg.RecordFloat property_list = 3;
inline int ObjectRecordFloat::property_list_size() const {
  return property_list_.size();
}
inline void ObjectRecordFloat::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordFloat* ObjectRecordFloat::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordFloat.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >*
ObjectRecordFloat::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordFloat.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordFloat& ObjectRecordFloat::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordFloat.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::RecordFloat* ObjectRecordFloat::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordFloat.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >&
ObjectRecordFloat::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordFloat.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordString

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordString::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectRecordString::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectRecordString::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectRecordString::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordString.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectRecordString::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordString.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordString::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordString.player_id)
  return player_id_;
}
inline void ObjectRecordString::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordString.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordString::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectRecordString::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordString.record_name)
  return record_name_.GetNoArena();
}
inline void ObjectRecordString::set_record_name(const ::std::string& value) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordString.record_name)
}
#if LANG_CXX11
inline void ObjectRecordString::set_record_name(::std::string&& value) {
  
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordString.record_name)
}
#endif
inline void ObjectRecordString::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordString.record_name)
}
inline void ObjectRecordString::set_record_name(const void* value, size_t size) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordString.record_name)
}
inline ::std::string* ObjectRecordString::mutable_record_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordString.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectRecordString::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordString.record_name)
  
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectRecordString::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    
  } else {
    
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordString.record_name)
}

// repeated .NFMsg.RecordString property_list = 3;
inline int ObjectRecordString::property_list_size() const {
  return property_list_.size();
}
inline void ObjectRecordString::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordString* ObjectRecordString::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordString.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >*
ObjectRecordString::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordString.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordString& ObjectRecordString::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordString.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::RecordString* ObjectRecordString::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordString.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >&
ObjectRecordString::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordString.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordObject

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordObject::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectRecordObject::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectRecordObject::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectRecordObject::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordObject.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectRecordObject::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordObject.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordObject::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordObject.player_id)
  return player_id_;
}
inline void ObjectRecordObject::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordObject.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordObject::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectRecordObject::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordObject.record_name)
  return record_name_.GetNoArena();
}
inline void ObjectRecordObject::set_record_name(const ::std::string& value) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordObject.record_name)
}
#if LANG_CXX11
inline void ObjectRecordObject::set_record_name(::std::string&& value) {
  
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordObject.record_name)
}
#endif
inline void ObjectRecordObject::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordObject.record_name)
}
inline void ObjectRecordObject::set_record_name(const void* value, size_t size) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordObject.record_name)
}
inline ::std::string* ObjectRecordObject::mutable_record_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordObject.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectRecordObject::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordObject.record_name)
  
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectRecordObject::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    
  } else {
    
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordObject.record_name)
}

// repeated .NFMsg.RecordObject property_list = 3;
inline int ObjectRecordObject::property_list_size() const {
  return property_list_.size();
}
inline void ObjectRecordObject::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordObject* ObjectRecordObject::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordObject.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >*
ObjectRecordObject::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordObject.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordObject& ObjectRecordObject::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordObject.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::RecordObject* ObjectRecordObject::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordObject.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >&
ObjectRecordObject::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordObject.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordVector2

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordVector2::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectRecordVector2::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectRecordVector2::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectRecordVector2::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector2.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectRecordVector2::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector2.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordVector2::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector2.player_id)
  return player_id_;
}
inline void ObjectRecordVector2::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector2.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordVector2::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectRecordVector2::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector2.record_name)
  return record_name_.GetNoArena();
}
inline void ObjectRecordVector2::set_record_name(const ::std::string& value) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordVector2.record_name)
}
#if LANG_CXX11
inline void ObjectRecordVector2::set_record_name(::std::string&& value) {
  
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordVector2.record_name)
}
#endif
inline void ObjectRecordVector2::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordVector2.record_name)
}
inline void ObjectRecordVector2::set_record_name(const void* value, size_t size) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordVector2.record_name)
}
inline ::std::string* ObjectRecordVector2::mutable_record_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector2.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectRecordVector2::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector2.record_name)
  
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectRecordVector2::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    
  } else {
    
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector2.record_name)
}

// repeated .NFMsg.RecordVector2 property_list = 3;
inline int ObjectRecordVector2::property_list_size() const {
  return property_list_.size();
}
inline void ObjectRecordVector2::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordVector2* ObjectRecordVector2::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector2.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >*
ObjectRecordVector2::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordVector2.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordVector2& ObjectRecordVector2::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector2.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::RecordVector2* ObjectRecordVector2::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordVector2.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >&
ObjectRecordVector2::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordVector2.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordVector3

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordVector3::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectRecordVector3::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectRecordVector3::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectRecordVector3::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector3.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectRecordVector3::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector3.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordVector3::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector3.player_id)
  return player_id_;
}
inline void ObjectRecordVector3::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector3.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordVector3::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectRecordVector3::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector3.record_name)
  return record_name_.GetNoArena();
}
inline void ObjectRecordVector3::set_record_name(const ::std::string& value) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordVector3.record_name)
}
#if LANG_CXX11
inline void ObjectRecordVector3::set_record_name(::std::string&& value) {
  
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordVector3.record_name)
}
#endif
inline void ObjectRecordVector3::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordVector3.record_name)
}
inline void ObjectRecordVector3::set_record_name(const void* value, size_t size) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordVector3.record_name)
}
inline ::std::string* ObjectRecordVector3::mutable_record_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector3.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectRecordVector3::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector3.record_name)
  
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectRecordVector3::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    
  } else {
    
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector3.record_name)
}

// repeated .NFMsg.RecordVector3 property_list = 3;
inline int ObjectRecordVector3::property_list_size() const {
  return property_list_.size();
}
inline void ObjectRecordVector3::clear_property_list() {
  property_list_.Clear();
}
inline ::NFMsg::RecordVector3* ObjectRecordVector3::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector3.property_list)
  return property_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >*
ObjectRecordVector3::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordVector3.property_list)
  return &property_list_;
}
inline const ::NFMsg::RecordVector3& ObjectRecordVector3::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector3.property_list)
  return property_list_.Get(index);
}
inline ::NFMsg::RecordVector3* ObjectRecordVector3::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordVector3.property_list)
  return property_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >&
ObjectRecordVector3::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordVector3.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordSwap

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordSwap::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectRecordSwap::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectRecordSwap::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectRecordSwap::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectRecordSwap::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordSwap.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordSwap::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordSwap.player_id)
  return player_id_;
}
inline void ObjectRecordSwap::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordSwap.player_id)
}

// bytes origin_record_name = 2;
inline void ObjectRecordSwap::clear_origin_record_name() {
  origin_record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectRecordSwap::origin_record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.origin_record_name)
  return origin_record_name_.GetNoArena();
}
inline void ObjectRecordSwap::set_origin_record_name(const ::std::string& value) {
  
  origin_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.origin_record_name)
}
#if LANG_CXX11
inline void ObjectRecordSwap::set_origin_record_name(::std::string&& value) {
  
  origin_record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordSwap.origin_record_name)
}
#endif
inline void ObjectRecordSwap::set_origin_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  origin_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordSwap.origin_record_name)
}
inline void ObjectRecordSwap::set_origin_record_name(const void* value, size_t size) {
  
  origin_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordSwap.origin_record_name)
}
inline ::std::string* ObjectRecordSwap::mutable_origin_record_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordSwap.origin_record_name)
  return origin_record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectRecordSwap::release_origin_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordSwap.origin_record_name)
  
  return origin_record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectRecordSwap::set_allocated_origin_record_name(::std::string* origin_record_name) {
  if (origin_record_name != NULL) {
    
  } else {
    
  }
  origin_record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordSwap.origin_record_name)
}

// bytes target_record_name = 3;
inline void ObjectRecordSwap::clear_target_record_name() {
  target_record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectRecordSwap::target_record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.target_record_name)
  return target_record_name_.GetNoArena();
}
inline void ObjectRecordSwap::set_target_record_name(const ::std::string& value) {
  
  target_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.target_record_name)
}
#if LANG_CXX11
inline void ObjectRecordSwap::set_target_record_name(::std::string&& value) {
  
  target_record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordSwap.target_record_name)
}
#endif
inline void ObjectRecordSwap::set_target_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordSwap.target_record_name)
}
inline void ObjectRecordSwap::set_target_record_name(const void* value, size_t size) {
  
  target_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordSwap.target_record_name)
}
inline ::std::string* ObjectRecordSwap::mutable_target_record_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordSwap.target_record_name)
  return target_record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectRecordSwap::release_target_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordSwap.target_record_name)
  
  return target_record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectRecordSwap::set_allocated_target_record_name(::std::string* target_record_name) {
  if (target_record_name != NULL) {
    
  } else {
    
  }
  target_record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordSwap.target_record_name)
}

// int32 row_origin = 4;
inline void ObjectRecordSwap::clear_row_origin() {
  row_origin_ = 0;
}
inline ::google::protobuf::int32 ObjectRecordSwap::row_origin() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.row_origin)
  return row_origin_;
}
inline void ObjectRecordSwap::set_row_origin(::google::protobuf::int32 value) {
  
  row_origin_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.row_origin)
}

// int32 row_target = 5;
inline void ObjectRecordSwap::clear_row_target() {
  row_target_ = 0;
}
inline ::google::protobuf::int32 ObjectRecordSwap::row_target() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.row_target)
  return row_target_;
}
inline void ObjectRecordSwap::set_row_target(::google::protobuf::int32 value) {
  
  row_target_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.row_target)
}

// -------------------------------------------------------------------

// ObjectRecordAddRow

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordAddRow::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectRecordAddRow::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectRecordAddRow::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectRecordAddRow::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordAddRow.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectRecordAddRow::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordAddRow.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordAddRow::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordAddRow.player_id)
  return player_id_;
}
inline void ObjectRecordAddRow::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordAddRow.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordAddRow::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectRecordAddRow::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordAddRow.record_name)
  return record_name_.GetNoArena();
}
inline void ObjectRecordAddRow::set_record_name(const ::std::string& value) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordAddRow.record_name)
}
#if LANG_CXX11
inline void ObjectRecordAddRow::set_record_name(::std::string&& value) {
  
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordAddRow.record_name)
}
#endif
inline void ObjectRecordAddRow::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordAddRow.record_name)
}
inline void ObjectRecordAddRow::set_record_name(const void* value, size_t size) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordAddRow.record_name)
}
inline ::std::string* ObjectRecordAddRow::mutable_record_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordAddRow.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectRecordAddRow::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordAddRow.record_name)
  
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectRecordAddRow::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    
  } else {
    
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordAddRow.record_name)
}

// repeated .NFMsg.RecordAddRowStruct row_data = 3;
inline int ObjectRecordAddRow::row_data_size() const {
  return row_data_.size();
}
inline void ObjectRecordAddRow::clear_row_data() {
  row_data_.Clear();
}
inline ::NFMsg::RecordAddRowStruct* ObjectRecordAddRow::mutable_row_data(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordAddRow.row_data)
  return row_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >*
ObjectRecordAddRow::mutable_row_data() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordAddRow.row_data)
  return &row_data_;
}
inline const ::NFMsg::RecordAddRowStruct& ObjectRecordAddRow::row_data(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordAddRow.row_data)
  return row_data_.Get(index);
}
inline ::NFMsg::RecordAddRowStruct* ObjectRecordAddRow::add_row_data() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordAddRow.row_data)
  return row_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >&
ObjectRecordAddRow::row_data() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordAddRow.row_data)
  return row_data_;
}

// -------------------------------------------------------------------

// ObjectRecordRemove

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordRemove::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectRecordRemove::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectRecordRemove::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectRecordRemove::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordRemove.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectRecordRemove::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordRemove.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordRemove::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordRemove.player_id)
  return player_id_;
}
inline void ObjectRecordRemove::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordRemove.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordRemove::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectRecordRemove::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordRemove.record_name)
  return record_name_.GetNoArena();
}
inline void ObjectRecordRemove::set_record_name(const ::std::string& value) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordRemove.record_name)
}
#if LANG_CXX11
inline void ObjectRecordRemove::set_record_name(::std::string&& value) {
  
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordRemove.record_name)
}
#endif
inline void ObjectRecordRemove::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordRemove.record_name)
}
inline void ObjectRecordRemove::set_record_name(const void* value, size_t size) {
  
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordRemove.record_name)
}
inline ::std::string* ObjectRecordRemove::mutable_record_name() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordRemove.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectRecordRemove::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordRemove.record_name)
  
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectRecordRemove::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    
  } else {
    
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordRemove.record_name)
}

// repeated int32 remove_row = 3;
inline int ObjectRecordRemove::remove_row_size() const {
  return remove_row_.size();
}
inline void ObjectRecordRemove::clear_remove_row() {
  remove_row_.Clear();
}
inline ::google::protobuf::int32 ObjectRecordRemove::remove_row(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordRemove.remove_row)
  return remove_row_.Get(index);
}
inline void ObjectRecordRemove::set_remove_row(int index, ::google::protobuf::int32 value) {
  remove_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordRemove.remove_row)
}
inline void ObjectRecordRemove::add_remove_row(::google::protobuf::int32 value) {
  remove_row_.Add(value);
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordRemove.remove_row)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ObjectRecordRemove::remove_row() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordRemove.remove_row)
  return remove_row_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ObjectRecordRemove::mutable_remove_row() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordRemove.remove_row)
  return &remove_row_;
}

// -------------------------------------------------------------------

// ObjectPropertyList

// .NFMsg.Ident player_id = 1;
inline bool ObjectPropertyList::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectPropertyList::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectPropertyList::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectPropertyList::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectPropertyList::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyList.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectPropertyList::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.player_id)
  return player_id_;
}
inline void ObjectPropertyList::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyList.player_id)
}

// repeated .NFMsg.PropertyInt property_int_list = 2;
inline int ObjectPropertyList::property_int_list_size() const {
  return property_int_list_.size();
}
inline void ObjectPropertyList::clear_property_int_list() {
  property_int_list_.Clear();
}
inline ::NFMsg::PropertyInt* ObjectPropertyList::mutable_property_int_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_int_list)
  return property_int_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >*
ObjectPropertyList::mutable_property_int_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_int_list)
  return &property_int_list_;
}
inline const ::NFMsg::PropertyInt& ObjectPropertyList::property_int_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_int_list)
  return property_int_list_.Get(index);
}
inline ::NFMsg::PropertyInt* ObjectPropertyList::add_property_int_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_int_list)
  return property_int_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >&
ObjectPropertyList::property_int_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_int_list)
  return property_int_list_;
}

// repeated .NFMsg.PropertyFloat property_float_list = 3;
inline int ObjectPropertyList::property_float_list_size() const {
  return property_float_list_.size();
}
inline void ObjectPropertyList::clear_property_float_list() {
  property_float_list_.Clear();
}
inline ::NFMsg::PropertyFloat* ObjectPropertyList::mutable_property_float_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_float_list)
  return property_float_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >*
ObjectPropertyList::mutable_property_float_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_float_list)
  return &property_float_list_;
}
inline const ::NFMsg::PropertyFloat& ObjectPropertyList::property_float_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_float_list)
  return property_float_list_.Get(index);
}
inline ::NFMsg::PropertyFloat* ObjectPropertyList::add_property_float_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_float_list)
  return property_float_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >&
ObjectPropertyList::property_float_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_float_list)
  return property_float_list_;
}

// repeated .NFMsg.PropertyString property_string_list = 4;
inline int ObjectPropertyList::property_string_list_size() const {
  return property_string_list_.size();
}
inline void ObjectPropertyList::clear_property_string_list() {
  property_string_list_.Clear();
}
inline ::NFMsg::PropertyString* ObjectPropertyList::mutable_property_string_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_string_list)
  return property_string_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >*
ObjectPropertyList::mutable_property_string_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_string_list)
  return &property_string_list_;
}
inline const ::NFMsg::PropertyString& ObjectPropertyList::property_string_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_string_list)
  return property_string_list_.Get(index);
}
inline ::NFMsg::PropertyString* ObjectPropertyList::add_property_string_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_string_list)
  return property_string_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >&
ObjectPropertyList::property_string_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_string_list)
  return property_string_list_;
}

// repeated .NFMsg.PropertyObject property_object_list = 5;
inline int ObjectPropertyList::property_object_list_size() const {
  return property_object_list_.size();
}
inline void ObjectPropertyList::clear_property_object_list() {
  property_object_list_.Clear();
}
inline ::NFMsg::PropertyObject* ObjectPropertyList::mutable_property_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_object_list)
  return property_object_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >*
ObjectPropertyList::mutable_property_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_object_list)
  return &property_object_list_;
}
inline const ::NFMsg::PropertyObject& ObjectPropertyList::property_object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_object_list)
  return property_object_list_.Get(index);
}
inline ::NFMsg::PropertyObject* ObjectPropertyList::add_property_object_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_object_list)
  return property_object_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >&
ObjectPropertyList::property_object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_object_list)
  return property_object_list_;
}

// repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
inline int ObjectPropertyList::property_vector2_list_size() const {
  return property_vector2_list_.size();
}
inline void ObjectPropertyList::clear_property_vector2_list() {
  property_vector2_list_.Clear();
}
inline ::NFMsg::PropertyVector2* ObjectPropertyList::mutable_property_vector2_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >*
ObjectPropertyList::mutable_property_vector2_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_vector2_list)
  return &property_vector2_list_;
}
inline const ::NFMsg::PropertyVector2& ObjectPropertyList::property_vector2_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_.Get(index);
}
inline ::NFMsg::PropertyVector2* ObjectPropertyList::add_property_vector2_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >&
ObjectPropertyList::property_vector2_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_;
}

// repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
inline int ObjectPropertyList::property_vector3_list_size() const {
  return property_vector3_list_.size();
}
inline void ObjectPropertyList::clear_property_vector3_list() {
  property_vector3_list_.Clear();
}
inline ::NFMsg::PropertyVector3* ObjectPropertyList::mutable_property_vector3_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >*
ObjectPropertyList::mutable_property_vector3_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_vector3_list)
  return &property_vector3_list_;
}
inline const ::NFMsg::PropertyVector3& ObjectPropertyList::property_vector3_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_.Get(index);
}
inline ::NFMsg::PropertyVector3* ObjectPropertyList::add_property_vector3_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >&
ObjectPropertyList::property_vector3_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_;
}

// -------------------------------------------------------------------

// MultiObjectPropertyList

// repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
inline int MultiObjectPropertyList::multi_player_property_size() const {
  return multi_player_property_.size();
}
inline void MultiObjectPropertyList::clear_multi_player_property() {
  multi_player_property_.Clear();
}
inline ::NFMsg::ObjectPropertyList* MultiObjectPropertyList::mutable_multi_player_property(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectPropertyList >*
MultiObjectPropertyList::mutable_multi_player_property() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.MultiObjectPropertyList.multi_player_property)
  return &multi_player_property_;
}
inline const ::NFMsg::ObjectPropertyList& MultiObjectPropertyList::multi_player_property(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_.Get(index);
}
inline ::NFMsg::ObjectPropertyList* MultiObjectPropertyList::add_multi_player_property() {
  // @@protoc_insertion_point(field_add:NFMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectPropertyList >&
MultiObjectPropertyList::multi_player_property() const {
  // @@protoc_insertion_point(field_list:NFMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_;
}

// -------------------------------------------------------------------

// ObjectRecordList

// .NFMsg.Ident player_id = 1;
inline bool ObjectRecordList::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void ObjectRecordList::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& ObjectRecordList::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& ObjectRecordList::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordList.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ObjectRecordList::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordList.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ObjectRecordList::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordList.player_id)
  return player_id_;
}
inline void ObjectRecordList::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordList.player_id)
}

// repeated .NFMsg.ObjectRecordBase record_list = 2;
inline int ObjectRecordList::record_list_size() const {
  return record_list_.size();
}
inline void ObjectRecordList::clear_record_list() {
  record_list_.Clear();
}
inline ::NFMsg::ObjectRecordBase* ObjectRecordList::mutable_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordList.record_list)
  return record_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordBase >*
ObjectRecordList::mutable_record_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordList.record_list)
  return &record_list_;
}
inline const ::NFMsg::ObjectRecordBase& ObjectRecordList::record_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordList.record_list)
  return record_list_.Get(index);
}
inline ::NFMsg::ObjectRecordBase* ObjectRecordList::add_record_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordList.record_list)
  return record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordBase >&
ObjectRecordList::record_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordList.record_list)
  return record_list_;
}

// -------------------------------------------------------------------

// MultiObjectRecordList

// repeated .NFMsg.ObjectRecordList multi_player_record = 1;
inline int MultiObjectRecordList::multi_player_record_size() const {
  return multi_player_record_.size();
}
inline void MultiObjectRecordList::clear_multi_player_record() {
  multi_player_record_.Clear();
}
inline ::NFMsg::ObjectRecordList* MultiObjectRecordList::mutable_multi_player_record(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordList >*
MultiObjectRecordList::mutable_multi_player_record() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.MultiObjectRecordList.multi_player_record)
  return &multi_player_record_;
}
inline const ::NFMsg::ObjectRecordList& MultiObjectRecordList::multi_player_record(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_.Get(index);
}
inline ::NFMsg::ObjectRecordList* MultiObjectRecordList::add_multi_player_record() {
  // @@protoc_insertion_point(field_add:NFMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordList >&
MultiObjectRecordList::multi_player_record() const {
  // @@protoc_insertion_point(field_list:NFMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_;
}

// -------------------------------------------------------------------

// MsgBase

// .NFMsg.Ident player_id = 1;
inline bool MsgBase::has_player_id() const {
  return this != internal_default_instance() && player_id_ != NULL;
}
inline void MsgBase::clear_player_id() {
  if (GetArenaNoVirtual() == NULL && player_id_ != NULL) {
    delete player_id_;
  }
  player_id_ = NULL;
}
inline const ::NFMsg::Ident& MsgBase::_internal_player_id() const {
  return *player_id_;
}
inline const ::NFMsg::Ident& MsgBase::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* MsgBase::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.MsgBase.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* MsgBase::mutable_player_id() {
  
  if (player_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.player_id)
  return player_id_;
}
inline void MsgBase::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_id_;
  }
  if (player_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.MsgBase.player_id)
}

// bytes msg_data = 2;
inline void MsgBase::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgBase::msg_data() const {
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.msg_data)
  return msg_data_.GetNoArena();
}
inline void MsgBase::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.MsgBase.msg_data)
}
#if LANG_CXX11
inline void MsgBase::set_msg_data(::std::string&& value) {
  
  msg_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.MsgBase.msg_data)
}
#endif
inline void MsgBase::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.MsgBase.msg_data)
}
inline void MsgBase::set_msg_data(const void* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.MsgBase.msg_data)
}
inline ::std::string* MsgBase::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgBase::release_msg_data() {
  // @@protoc_insertion_point(field_release:NFMsg.MsgBase.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgBase::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.MsgBase.msg_data)
}

// repeated .NFMsg.Ident player_Client_list = 3;
inline int MsgBase::player_client_list_size() const {
  return player_client_list_.size();
}
inline void MsgBase::clear_player_client_list() {
  player_client_list_.Clear();
}
inline ::NFMsg::Ident* MsgBase::mutable_player_client_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.player_Client_list)
  return player_client_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
MsgBase::mutable_player_client_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.MsgBase.player_Client_list)
  return &player_client_list_;
}
inline const ::NFMsg::Ident& MsgBase::player_client_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.player_Client_list)
  return player_client_list_.Get(index);
}
inline ::NFMsg::Ident* MsgBase::add_player_client_list() {
  // @@protoc_insertion_point(field_add:NFMsg.MsgBase.player_Client_list)
  return player_client_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
MsgBase::player_client_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.MsgBase.player_Client_list)
  return player_client_list_;
}

// .NFMsg.Ident hash_ident = 4;
inline bool MsgBase::has_hash_ident() const {
  return this != internal_default_instance() && hash_ident_ != NULL;
}
inline void MsgBase::clear_hash_ident() {
  if (GetArenaNoVirtual() == NULL && hash_ident_ != NULL) {
    delete hash_ident_;
  }
  hash_ident_ = NULL;
}
inline const ::NFMsg::Ident& MsgBase::_internal_hash_ident() const {
  return *hash_ident_;
}
inline const ::NFMsg::Ident& MsgBase::hash_ident() const {
  const ::NFMsg::Ident* p = hash_ident_;
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.hash_ident)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* MsgBase::release_hash_ident() {
  // @@protoc_insertion_point(field_release:NFMsg.MsgBase.hash_ident)
  
  ::NFMsg::Ident* temp = hash_ident_;
  hash_ident_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* MsgBase::mutable_hash_ident() {
  
  if (hash_ident_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    hash_ident_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.hash_ident)
  return hash_ident_;
}
inline void MsgBase::set_allocated_hash_ident(::NFMsg::Ident* hash_ident) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hash_ident_;
  }
  if (hash_ident) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hash_ident = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hash_ident, submessage_arena);
    }
    
  } else {
    
  }
  hash_ident_ = hash_ident;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.MsgBase.hash_ident)
}

// -------------------------------------------------------------------

// ReqCommand

// .NFMsg.Ident control_id = 1;
inline bool ReqCommand::has_control_id() const {
  return this != internal_default_instance() && control_id_ != NULL;
}
inline void ReqCommand::clear_control_id() {
  if (GetArenaNoVirtual() == NULL && control_id_ != NULL) {
    delete control_id_;
  }
  control_id_ = NULL;
}
inline const ::NFMsg::Ident& ReqCommand::_internal_control_id() const {
  return *control_id_;
}
inline const ::NFMsg::Ident& ReqCommand::control_id() const {
  const ::NFMsg::Ident* p = control_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.control_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqCommand::release_control_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.control_id)
  
  ::NFMsg::Ident* temp = control_id_;
  control_id_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqCommand::mutable_control_id() {
  
  if (control_id_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    control_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.control_id)
  return control_id_;
}
inline void ReqCommand::set_allocated_control_id(::NFMsg::Ident* control_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete control_id_;
  }
  if (control_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      control_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, control_id, submessage_arena);
    }
    
  } else {
    
  }
  control_id_ = control_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.control_id)
}

// .NFMsg.ReqCommand.EGameCommandType command_id = 2;
inline void ReqCommand::clear_command_id() {
  command_id_ = 0;
}
inline ::NFMsg::ReqCommand_EGameCommandType ReqCommand::command_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_id)
  return static_cast< ::NFMsg::ReqCommand_EGameCommandType >(command_id_);
}
inline void ReqCommand::set_command_id(::NFMsg::ReqCommand_EGameCommandType value) {
  
  command_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_id)
}

// bytes command_str_value = 3;
inline void ReqCommand::clear_command_str_value() {
  command_str_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCommand::command_str_value() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_str_value)
  return command_str_value_.GetNoArena();
}
inline void ReqCommand::set_command_str_value(const ::std::string& value) {
  
  command_str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_str_value)
}
#if LANG_CXX11
inline void ReqCommand::set_command_str_value(::std::string&& value) {
  
  command_str_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqCommand.command_str_value)
}
#endif
inline void ReqCommand::set_command_str_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqCommand.command_str_value)
}
inline void ReqCommand::set_command_str_value(const void* value, size_t size) {
  
  command_str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqCommand.command_str_value)
}
inline ::std::string* ReqCommand::mutable_command_str_value() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.command_str_value)
  return command_str_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCommand::release_command_str_value() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.command_str_value)
  
  return command_str_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCommand::set_allocated_command_str_value(::std::string* command_str_value) {
  if (command_str_value != NULL) {
    
  } else {
    
  }
  command_str_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_str_value);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.command_str_value)
}

// int64 command_value_int = 4;
inline void ReqCommand::clear_command_value_int() {
  command_value_int_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqCommand::command_value_int() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_int)
  return command_value_int_;
}
inline void ReqCommand::set_command_value_int(::google::protobuf::int64 value) {
  
  command_value_int_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_value_int)
}

// double command_value_float = 5;
inline void ReqCommand::clear_command_value_float() {
  command_value_float_ = 0;
}
inline double ReqCommand::command_value_float() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_float)
  return command_value_float_;
}
inline void ReqCommand::set_command_value_float(double value) {
  
  command_value_float_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_value_float)
}

// bytes command_value_str = 6;
inline void ReqCommand::clear_command_value_str() {
  command_value_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqCommand::command_value_str() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_str)
  return command_value_str_.GetNoArena();
}
inline void ReqCommand::set_command_value_str(const ::std::string& value) {
  
  command_value_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_value_str)
}
#if LANG_CXX11
inline void ReqCommand::set_command_value_str(::std::string&& value) {
  
  command_value_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqCommand.command_value_str)
}
#endif
inline void ReqCommand::set_command_value_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_value_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqCommand.command_value_str)
}
inline void ReqCommand::set_command_value_str(const void* value, size_t size) {
  
  command_value_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqCommand.command_value_str)
}
inline ::std::string* ReqCommand::mutable_command_value_str() {
  
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.command_value_str)
  return command_value_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCommand::release_command_value_str() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.command_value_str)
  
  return command_value_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCommand::set_allocated_command_value_str(::std::string* command_value_str) {
  if (command_value_str != NULL) {
    
  } else {
    
  }
  command_value_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_value_str);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.command_value_str)
}

// .NFMsg.Ident command_value_object = 7;
inline bool ReqCommand::has_command_value_object() const {
  return this != internal_default_instance() && command_value_object_ != NULL;
}
inline void ReqCommand::clear_command_value_object() {
  if (GetArenaNoVirtual() == NULL && command_value_object_ != NULL) {
    delete command_value_object_;
  }
  command_value_object_ = NULL;
}
inline const ::NFMsg::Ident& ReqCommand::_internal_command_value_object() const {
  return *command_value_object_;
}
inline const ::NFMsg::Ident& ReqCommand::command_value_object() const {
  const ::NFMsg::Ident* p = command_value_object_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_object)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline ::NFMsg::Ident* ReqCommand::release_command_value_object() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.command_value_object)
  
  ::NFMsg::Ident* temp = command_value_object_;
  command_value_object_ = NULL;
  return temp;
}
inline ::NFMsg::Ident* ReqCommand::mutable_command_value_object() {
  
  if (command_value_object_ == NULL) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    command_value_object_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.command_value_object)
  return command_value_object_;
}
inline void ReqCommand::set_allocated_command_value_object(::NFMsg::Ident* command_value_object) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete command_value_object_;
  }
  if (command_value_object) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      command_value_object = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, command_value_object, submessage_arena);
    }
    
  } else {
    
  }
  command_value_object_ = command_value_object;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.command_value_object)
}

// int32 row = 8;
inline void ReqCommand::clear_row() {
  row_ = 0;
}
inline ::google::protobuf::int32 ReqCommand::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.row)
  return row_;
}
inline void ReqCommand::set_row(::google::protobuf::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.row)
}

// int32 col = 9;
inline void ReqCommand::clear_col() {
  col_ = 0;
}
inline ::google::protobuf::int32 ReqCommand::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.col)
  return col_;
}
inline void ReqCommand::set_col(::google::protobuf::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.col)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFMsg::ReqCommand_EGameCommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqCommand_EGameCommandType>() {
  return ::NFMsg::ReqCommand_EGameCommandType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_NFMsgBase_2eproto
