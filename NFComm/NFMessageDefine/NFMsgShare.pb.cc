// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#include "NFMsgShare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_NFMsgBase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgBase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ident;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgBase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_NFMsgBase_2eproto
namespace protobuf_NFMsgShare_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CurrencyStruct;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ItemStruct;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckPlayerChat_ChatContainer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AckSearchClan_SearchClanObject;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EffectData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PVPPlayerInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerEntryInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ReqAddSceneBuilding;
}  // namespace protobuf_NFMsgShare_2eproto
namespace NFMsg {
class ReqEnterGameServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqEnterGameServer>
      _instance;
} _ReqEnterGameServer_default_instance_;
class ReqAckEnterGameSuccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckEnterGameSuccess>
      _instance;
} _ReqAckEnterGameSuccess_default_instance_;
class ReqHeartBeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqHeartBeat>
      _instance;
} _ReqHeartBeat_default_instance_;
class ReqLeaveGameServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqLeaveGameServer>
      _instance;
} _ReqLeaveGameServer_default_instance_;
class PlayerEntryInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerEntryInfo>
      _instance;
} _PlayerEntryInfo_default_instance_;
class AckPlayerEntryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckPlayerEntryList>
      _instance;
} _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckPlayerLeaveList>
      _instance;
} _AckPlayerLeaveList_default_instance_;
class ReqAckSynDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckSynData>
      _instance;
} _ReqAckSynData_default_instance_;
class ReqAckPlayerMoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckPlayerMove>
      _instance;
} _ReqAckPlayerMove_default_instance_;
class ReqAckPlayerChat_ChatContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckPlayerChat_ChatContainer>
      _instance;
} _ReqAckPlayerChat_ChatContainer_default_instance_;
class ReqAckPlayerChatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckPlayerChat>
      _instance;
} _ReqAckPlayerChat_default_instance_;
class ReqAckPlayerPosSyncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckPlayerPosSync>
      _instance;
} _ReqAckPlayerPosSync_default_instance_;
class EffectDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EffectData>
      _instance;
} _EffectData_default_instance_;
class ReqAckUseSkillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckUseSkill>
      _instance;
} _ReqAckUseSkill_default_instance_;
class ReqAckUseItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckUseItem>
      _instance;
} _ReqAckUseItem_default_instance_;
class ReqAckSwapSceneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckSwapScene>
      _instance;
} _ReqAckSwapScene_default_instance_;
class ReqAckHomeSceneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckHomeScene>
      _instance;
} _ReqAckHomeScene_default_instance_;
class ItemStructDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ItemStruct>
      _instance;
} _ItemStruct_default_instance_;
class CurrencyStructDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrencyStruct>
      _instance;
} _CurrencyStruct_default_instance_;
class ReqAckReliveHeroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckReliveHero>
      _instance;
} _ReqAckReliveHero_default_instance_;
class ReqPickDropItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqPickDropItem>
      _instance;
} _ReqPickDropItem_default_instance_;
class ReqAcceptTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAcceptTask>
      _instance;
} _ReqAcceptTask_default_instance_;
class ReqCompeleteTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqCompeleteTask>
      _instance;
} _ReqCompeleteTask_default_instance_;
class ReqAddSceneBuildingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAddSceneBuilding>
      _instance;
} _ReqAddSceneBuilding_default_instance_;
class ReqSceneBuildingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSceneBuildings>
      _instance;
} _ReqSceneBuildings_default_instance_;
class AckSceneBuildingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSceneBuildings>
      _instance;
} _AckSceneBuildings_default_instance_;
class ReqStoreSceneBuildingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqStoreSceneBuildings>
      _instance;
} _ReqStoreSceneBuildings_default_instance_;
class ReqAckCreateClanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckCreateClan>
      _instance;
} _ReqAckCreateClan_default_instance_;
class ReqSearchClanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSearchClan>
      _instance;
} _ReqSearchClan_default_instance_;
class AckSearchClan_SearchClanObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSearchClan_SearchClanObject>
      _instance;
} _AckSearchClan_SearchClanObject_default_instance_;
class AckSearchClanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSearchClan>
      _instance;
} _AckSearchClan_default_instance_;
class ReqAckJoinClanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckJoinClan>
      _instance;
} _ReqAckJoinClan_default_instance_;
class ReqAckLeaveClanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckLeaveClan>
      _instance;
} _ReqAckLeaveClan_default_instance_;
class ReqAckOprClanMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckOprClanMember>
      _instance;
} _ReqAckOprClanMember_default_instance_;
class ReqEnterClanEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqEnterClanEctype>
      _instance;
} _ReqEnterClanEctype_default_instance_;
class ReqSetFightHeroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSetFightHero>
      _instance;
} _ReqSetFightHero_default_instance_;
class ReqSwitchFightHeroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSwitchFightHero>
      _instance;
} _ReqSwitchFightHero_default_instance_;
class ReqBuyItemFromShopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqBuyItemFromShop>
      _instance;
} _ReqBuyItemFromShop_default_instance_;
class PVPPlayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPPlayerInfo>
      _instance;
} _PVPPlayerInfo_default_instance_;
class ReqSearchOppnentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSearchOppnent>
      _instance;
} _ReqSearchOppnent_default_instance_;
class AckSearchOppnentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSearchOppnent>
      _instance;
} _AckSearchOppnent_default_instance_;
class ReqAckCancelSearchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckCancelSearch>
      _instance;
} _ReqAckCancelSearch_default_instance_;
class ReqEndBattleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqEndBattle>
      _instance;
} _ReqEndBattle_default_instance_;
class AckEndBattleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckEndBattle>
      _instance;
} _AckEndBattle_default_instance_;
class ReqSendMailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSendMail>
      _instance;
} _ReqSendMail_default_instance_;
class ReqSwitchServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSwitchServer>
      _instance;
} _ReqSwitchServer_default_instance_;
class AckSwitchServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSwitchServer>
      _instance;
} _AckSwitchServer_default_instance_;
}  // namespace NFMsg
namespace protobuf_NFMsgShare_2eproto {
static void InitDefaultsReqEnterGameServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqEnterGameServer_default_instance_;
    new (ptr) ::NFMsg::ReqEnterGameServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqEnterGameServer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqEnterGameServer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqEnterGameServer}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckEnterGameSuccess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckEnterGameSuccess_default_instance_;
    new (ptr) ::NFMsg::ReqAckEnterGameSuccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckEnterGameSuccess::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckEnterGameSuccess =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAckEnterGameSuccess}, {}};

static void InitDefaultsReqHeartBeat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqHeartBeat_default_instance_;
    new (ptr) ::NFMsg::ReqHeartBeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqHeartBeat::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ReqHeartBeat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqHeartBeat}, {}};

static void InitDefaultsReqLeaveGameServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqLeaveGameServer_default_instance_;
    new (ptr) ::NFMsg::ReqLeaveGameServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqLeaveGameServer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ReqLeaveGameServer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqLeaveGameServer}, {}};

static void InitDefaultsPlayerEntryInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PlayerEntryInfo_default_instance_;
    new (ptr) ::NFMsg::PlayerEntryInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PlayerEntryInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerEntryInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerEntryInfo}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckPlayerEntryList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckPlayerEntryList_default_instance_;
    new (ptr) ::NFMsg::AckPlayerEntryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckPlayerEntryList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_AckPlayerEntryList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckPlayerEntryList}, {
      &protobuf_NFMsgShare_2eproto::scc_info_PlayerEntryInfo.base,}};

static void InitDefaultsAckPlayerLeaveList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckPlayerLeaveList_default_instance_;
    new (ptr) ::NFMsg::AckPlayerLeaveList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckPlayerLeaveList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_AckPlayerLeaveList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckPlayerLeaveList}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckSynData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckSynData_default_instance_;
    new (ptr) ::NFMsg::ReqAckSynData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckSynData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckSynData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckSynData}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckPlayerMove() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerMove_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerMove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerMove::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckPlayerMove =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckPlayerMove}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgBase_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsReqAckPlayerChat_ChatContainer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerChat_ChatContainer_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerChat_ChatContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerChat_ChatContainer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckPlayerChat_ChatContainer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAckPlayerChat_ChatContainer}, {}};

static void InitDefaultsReqAckPlayerChat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerChat_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerChat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerChat::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckPlayerChat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckPlayerChat}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerChat_ChatContainer.base,}};

static void InitDefaultsReqAckPlayerPosSync() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerPosSync_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerPosSync();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerPosSync::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckPlayerPosSync =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckPlayerPosSync}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgBase_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsEffectData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_EffectData_default_instance_;
    new (ptr) ::NFMsg::EffectData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::EffectData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_EffectData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEffectData}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckUseSkill() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckUseSkill_default_instance_;
    new (ptr) ::NFMsg::ReqAckUseSkill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckUseSkill::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckUseSkill =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckUseSkill}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_EffectData.base,}};

static void InitDefaultsReqAckUseItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckUseItem_default_instance_;
    new (ptr) ::NFMsg::ReqAckUseItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckUseItem::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<4> scc_info_ReqAckUseItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsReqAckUseItem}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_EffectData.base,
      &protobuf_NFMsgShare_2eproto::scc_info_ItemStruct.base,
      &protobuf_NFMsgBase_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsReqAckSwapScene() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckSwapScene_default_instance_;
    new (ptr) ::NFMsg::ReqAckSwapScene();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckSwapScene::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckSwapScene =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAckSwapScene}, {}};

static void InitDefaultsReqAckHomeScene() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckHomeScene_default_instance_;
    new (ptr) ::NFMsg::ReqAckHomeScene();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckHomeScene::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckHomeScene =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAckHomeScene}, {}};

static void InitDefaultsItemStruct() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ItemStruct_default_instance_;
    new (ptr) ::NFMsg::ItemStruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ItemStruct::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ItemStruct =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsItemStruct}, {}};

static void InitDefaultsCurrencyStruct() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_CurrencyStruct_default_instance_;
    new (ptr) ::NFMsg::CurrencyStruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::CurrencyStruct::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_CurrencyStruct =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCurrencyStruct}, {}};

static void InitDefaultsReqAckReliveHero() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckReliveHero_default_instance_;
    new (ptr) ::NFMsg::ReqAckReliveHero();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckReliveHero::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckReliveHero =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckReliveHero}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqPickDropItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqPickDropItem_default_instance_;
    new (ptr) ::NFMsg::ReqPickDropItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqPickDropItem::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqPickDropItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqPickDropItem}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAcceptTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAcceptTask_default_instance_;
    new (ptr) ::NFMsg::ReqAcceptTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAcceptTask::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ReqAcceptTask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAcceptTask}, {}};

static void InitDefaultsReqCompeleteTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqCompeleteTask_default_instance_;
    new (ptr) ::NFMsg::ReqCompeleteTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqCompeleteTask::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ReqCompeleteTask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqCompeleteTask}, {}};

static void InitDefaultsReqAddSceneBuilding() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAddSceneBuilding_default_instance_;
    new (ptr) ::NFMsg::ReqAddSceneBuilding();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAddSceneBuilding::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_ReqAddSceneBuilding =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAddSceneBuilding}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Vector3.base,
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqSceneBuildings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSceneBuildings_default_instance_;
    new (ptr) ::NFMsg::ReqSceneBuildings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSceneBuildings::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqSceneBuildings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqSceneBuildings}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsAckSceneBuildings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSceneBuildings_default_instance_;
    new (ptr) ::NFMsg::AckSceneBuildings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSceneBuildings::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_AckSceneBuildings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckSceneBuildings}, {
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAddSceneBuilding.base,}};

static void InitDefaultsReqStoreSceneBuildings() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqStoreSceneBuildings_default_instance_;
    new (ptr) ::NFMsg::ReqStoreSceneBuildings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqStoreSceneBuildings::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_ReqStoreSceneBuildings =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqStoreSceneBuildings}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAddSceneBuilding.base,}};

static void InitDefaultsReqAckCreateClan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckCreateClan_default_instance_;
    new (ptr) ::NFMsg::ReqAckCreateClan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckCreateClan::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckCreateClan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckCreateClan}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqSearchClan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSearchClan_default_instance_;
    new (ptr) ::NFMsg::ReqSearchClan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSearchClan::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ReqSearchClan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqSearchClan}, {}};

static void InitDefaultsAckSearchClan_SearchClanObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSearchClan_SearchClanObject_default_instance_;
    new (ptr) ::NFMsg::AckSearchClan_SearchClanObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSearchClan_SearchClanObject::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_AckSearchClan_SearchClanObject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckSearchClan_SearchClanObject}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckSearchClan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSearchClan_default_instance_;
    new (ptr) ::NFMsg::AckSearchClan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSearchClan::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_AckSearchClan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckSearchClan}, {
      &protobuf_NFMsgShare_2eproto::scc_info_AckSearchClan_SearchClanObject.base,}};

static void InitDefaultsReqAckJoinClan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckJoinClan_default_instance_;
    new (ptr) ::NFMsg::ReqAckJoinClan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckJoinClan::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckJoinClan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckJoinClan}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckLeaveClan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckLeaveClan_default_instance_;
    new (ptr) ::NFMsg::ReqAckLeaveClan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckLeaveClan::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckLeaveClan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckLeaveClan}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckOprClanMember() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckOprClanMember_default_instance_;
    new (ptr) ::NFMsg::ReqAckOprClanMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckOprClanMember::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckOprClanMember =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckOprClanMember}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqEnterClanEctype() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqEnterClanEctype_default_instance_;
    new (ptr) ::NFMsg::ReqEnterClanEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqEnterClanEctype::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqEnterClanEctype =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqEnterClanEctype}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqSetFightHero() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSetFightHero_default_instance_;
    new (ptr) ::NFMsg::ReqSetFightHero();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSetFightHero::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqSetFightHero =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqSetFightHero}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqSwitchFightHero() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSwitchFightHero_default_instance_;
    new (ptr) ::NFMsg::ReqSwitchFightHero();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSwitchFightHero::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqSwitchFightHero =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqSwitchFightHero}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqBuyItemFromShop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqBuyItemFromShop_default_instance_;
    new (ptr) ::NFMsg::ReqBuyItemFromShop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqBuyItemFromShop::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ReqBuyItemFromShop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqBuyItemFromShop}, {}};

static void InitDefaultsPVPPlayerInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PVPPlayerInfo_default_instance_;
    new (ptr) ::NFMsg::PVPPlayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PVPPlayerInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_PVPPlayerInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPVPPlayerInfo}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqSearchOppnent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSearchOppnent_default_instance_;
    new (ptr) ::NFMsg::ReqSearchOppnent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSearchOppnent::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqSearchOppnent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqSearchOppnent}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckSearchOppnent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSearchOppnent_default_instance_;
    new (ptr) ::NFMsg::AckSearchOppnent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSearchOppnent::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<3> scc_info_AckSearchOppnent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsAckSearchOppnent}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_PVPPlayerInfo.base,
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAddSceneBuilding.base,}};

static void InitDefaultsReqAckCancelSearch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckCancelSearch_default_instance_;
    new (ptr) ::NFMsg::ReqAckCancelSearch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckCancelSearch::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckCancelSearch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckCancelSearch}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqEndBattle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqEndBattle_default_instance_;
    new (ptr) ::NFMsg::ReqEndBattle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqEndBattle::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_ReqEndBattle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqEndBattle}, {}};

static void InitDefaultsAckEndBattle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckEndBattle_default_instance_;
    new (ptr) ::NFMsg::AckEndBattle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckEndBattle::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<2> scc_info_AckEndBattle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAckEndBattle}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_ItemStruct.base,}};

static void InitDefaultsReqSendMail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSendMail_default_instance_;
    new (ptr) ::NFMsg::ReqSendMail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSendMail::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<3> scc_info_ReqSendMail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReqSendMail}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_ItemStruct.base,
      &protobuf_NFMsgShare_2eproto::scc_info_CurrencyStruct.base,}};

static void InitDefaultsReqSwitchServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSwitchServer_default_instance_;
    new (ptr) ::NFMsg::ReqSwitchServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSwitchServer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_ReqSwitchServer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqSwitchServer}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckSwitchServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSwitchServer_default_instance_;
    new (ptr) ::NFMsg::AckSwitchServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSwitchServer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_AckSwitchServer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckSwitchServer}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ReqEnterGameServer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckEnterGameSuccess.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqHeartBeat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqLeaveGameServer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerEntryInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckPlayerEntryList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckPlayerLeaveList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckSynData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckPlayerMove.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckPlayerChat_ChatContainer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckPlayerChat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckPlayerPosSync.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EffectData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckUseSkill.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckUseItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckSwapScene.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckHomeScene.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ItemStruct.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurrencyStruct.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckReliveHero.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqPickDropItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAcceptTask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqCompeleteTask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAddSceneBuilding.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSceneBuildings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckSceneBuildings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqStoreSceneBuildings.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckCreateClan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSearchClan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckSearchClan_SearchClanObject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckSearchClan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckJoinClan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckLeaveClan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckOprClanMember.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqEnterClanEctype.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSetFightHero.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSwitchFightHero.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqBuyItemFromShop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPPlayerInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSearchOppnent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckSearchOppnent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckCancelSearch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqEndBattle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckEndBattle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSendMail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSwitchServer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckSwitchServer.base);
}

::google::protobuf::Metadata file_level_metadata[47];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckEnterGameSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckEnterGameSuccess, arg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHeartBeat, arg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqLeaveGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqLeaveGameServer, arg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, object_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, career_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, player_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, class_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerEntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerEntryList, object_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerLeaveList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerLeaveList, object_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, syser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, object_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, syn_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, msg_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, mover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, movetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, laststate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, target_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, source_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, move_direction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat_ChatContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat_ChatContainer, containertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat_ChatContainer, data_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, container_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, mover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, interpolationtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, frame_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, effect_ident_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, effect_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, effect_rlt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, use_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, effect_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, item_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, effect_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, targetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, transfer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, line_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckHomeScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckHomeScene, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ItemStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ItemStruct, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ItemStruct, item_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::CurrencyStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::CurrencyStruct, currency_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::CurrencyStruct, currency_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckReliveHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckReliveHero, diamond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckReliveHero, hero_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPickDropItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPickDropItem, item_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAcceptTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAcceptTask, task_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqCompeleteTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqCompeleteTask, task_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, master_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, master_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, is_home_scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, is_building_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSceneBuildings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSceneBuildings, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSceneBuildings, pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSceneBuildings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSceneBuildings, buildings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqStoreSceneBuildings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqStoreSceneBuildings, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqStoreSceneBuildings, home_scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqStoreSceneBuildings, buildings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateClan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateClan, clan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateClan, clan_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchClan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchClan, clan_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_member_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_member_max_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_honor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_rank_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchClan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchClan, clan_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinClan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinClan, clan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinClan, clan_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveClan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveClan, clan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveClan, clan_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprClanMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprClanMember, clan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprClanMember, member_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprClanMember, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterClanEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterClanEctype, clan_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSetFightHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSetFightHero, heroid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSetFightHero, set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchFightHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchFightHero, heroid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqBuyItemFromShop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqBuyItemFromShop, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqBuyItemFromShop, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, single_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, battle_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, diamond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_cnf1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_cnf2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_cnf3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_star1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_star2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_star3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_id1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_id2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_id3_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, self_scene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, diamond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, battle_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, friends_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchOppnent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchOppnent, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchOppnent, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchOppnent, gamble_diamond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchOppnent, team_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchOppnent, opponent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchOppnent, buildings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCancelSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCancelSearch, selfid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEndBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEndBattle, auto_end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, cup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, diamond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, single_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, item_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSendMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSendMail, reciever_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSendMail, item_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSendMail, currency_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, self_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, target_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, gate_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, sceneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, groupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSwitchServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSwitchServer, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSwitchServer, self_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSwitchServer, target_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSwitchServer, gate_serverid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::ReqEnterGameServer)},
  { 9, -1, sizeof(::NFMsg::ReqAckEnterGameSuccess)},
  { 15, -1, sizeof(::NFMsg::ReqHeartBeat)},
  { 21, -1, sizeof(::NFMsg::ReqLeaveGameServer)},
  { 27, -1, sizeof(::NFMsg::PlayerEntryInfo)},
  { 41, -1, sizeof(::NFMsg::AckPlayerEntryList)},
  { 47, -1, sizeof(::NFMsg::AckPlayerLeaveList)},
  { 53, -1, sizeof(::NFMsg::ReqAckSynData)},
  { 63, -1, sizeof(::NFMsg::ReqAckPlayerMove)},
  { 76, -1, sizeof(::NFMsg::ReqAckPlayerChat_ChatContainer)},
  { 83, -1, sizeof(::NFMsg::ReqAckPlayerChat)},
  { 94, -1, sizeof(::NFMsg::ReqAckPlayerPosSync)},
  { 106, -1, sizeof(::NFMsg::EffectData)},
  { 114, -1, sizeof(::NFMsg::ReqAckUseSkill)},
  { 123, -1, sizeof(::NFMsg::ReqAckUseItem)},
  { 134, -1, sizeof(::NFMsg::ReqAckSwapScene)},
  { 146, -1, sizeof(::NFMsg::ReqAckHomeScene)},
  { 152, -1, sizeof(::NFMsg::ItemStruct)},
  { 159, -1, sizeof(::NFMsg::CurrencyStruct)},
  { 166, -1, sizeof(::NFMsg::ReqAckReliveHero)},
  { 173, -1, sizeof(::NFMsg::ReqPickDropItem)},
  { 179, -1, sizeof(::NFMsg::ReqAcceptTask)},
  { 185, -1, sizeof(::NFMsg::ReqCompeleteTask)},
  { 191, -1, sizeof(::NFMsg::ReqAddSceneBuilding)},
  { 204, -1, sizeof(::NFMsg::ReqSceneBuildings)},
  { 211, -1, sizeof(::NFMsg::AckSceneBuildings)},
  { 217, -1, sizeof(::NFMsg::ReqStoreSceneBuildings)},
  { 225, -1, sizeof(::NFMsg::ReqAckCreateClan)},
  { 232, -1, sizeof(::NFMsg::ReqSearchClan)},
  { 238, -1, sizeof(::NFMsg::AckSearchClan_SearchClanObject)},
  { 250, -1, sizeof(::NFMsg::AckSearchClan)},
  { 256, -1, sizeof(::NFMsg::ReqAckJoinClan)},
  { 263, -1, sizeof(::NFMsg::ReqAckLeaveClan)},
  { 270, -1, sizeof(::NFMsg::ReqAckOprClanMember)},
  { 278, -1, sizeof(::NFMsg::ReqEnterClanEctype)},
  { 284, -1, sizeof(::NFMsg::ReqSetFightHero)},
  { 291, -1, sizeof(::NFMsg::ReqSwitchFightHero)},
  { 297, -1, sizeof(::NFMsg::ReqBuyItemFromShop)},
  { 304, -1, sizeof(::NFMsg::PVPPlayerInfo)},
  { 326, -1, sizeof(::NFMsg::ReqSearchOppnent)},
  { 335, -1, sizeof(::NFMsg::AckSearchOppnent)},
  { 346, -1, sizeof(::NFMsg::ReqAckCancelSearch)},
  { 352, -1, sizeof(::NFMsg::ReqEndBattle)},
  { 358, -1, sizeof(::NFMsg::AckEndBattle)},
  { 373, -1, sizeof(::NFMsg::ReqSendMail)},
  { 381, -1, sizeof(::NFMsg::ReqSwitchServer)},
  { 393, -1, sizeof(::NFMsg::AckSwitchServer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqEnterGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckEnterGameSuccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqHeartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqLeaveGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_PlayerEntryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckPlayerEntryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckPlayerLeaveList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckSynData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckPlayerMove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckPlayerChat_ChatContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckPlayerChat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckPlayerPosSync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_EffectData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckUseSkill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckUseItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckSwapScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckHomeScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ItemStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_CurrencyStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckReliveHero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqPickDropItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAcceptTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqCompeleteTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAddSceneBuilding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSceneBuildings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckSceneBuildings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqStoreSceneBuildings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckCreateClan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSearchClan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckSearchClan_SearchClanObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckSearchClan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckJoinClan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckLeaveClan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckOprClanMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqEnterClanEctype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSetFightHero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSwitchFightHero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqBuyItemFromShop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_PVPPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSearchOppnent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckSearchOppnent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckCancelSearch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqEndBattle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckEndBattle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSendMail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSwitchServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckSwitchServer_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "NFMsgShare.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 47);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020NFMsgShare.proto\022\005NFMsg\032\016NFDefine.prot"
      "o\032\017NFMsgBase.proto\"^\n\022ReqEnterGameServer"
      "\022\030\n\002id\030\001 \001(\0132\014.NFMsg.Ident\022\017\n\007account\030\002 "
      "\001(\014\022\017\n\007game_id\030\003 \001(\005\022\014\n\004name\030\004 \001(\014\"%\n\026Re"
      "qAckEnterGameSuccess\022\013\n\003arg\030\001 \001(\005\"\033\n\014Req"
      "HeartBeat\022\013\n\003arg\030\001 \001(\005\"!\n\022ReqLeaveGameSe"
      "rver\022\013\n\003arg\030\001 \001(\005\"\267\001\n\017PlayerEntryInfo\022!\n"
      "\013object_guid\030\001 \001(\0132\014.NFMsg.Ident\022\t\n\001x\030\002 "
      "\001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\023\n\013career_type"
      "\030\005 \001(\005\022\024\n\014player_state\030\006 \001(\005\022\021\n\tconfig_i"
      "d\030\007 \001(\014\022\020\n\010scene_id\030\010 \001(\005\022\020\n\010class_id\030\t "
      "\001(\014\"A\n\022AckPlayerEntryList\022+\n\013object_list"
      "\030\001 \003(\0132\026.NFMsg.PlayerEntryInfo\"7\n\022AckPla"
      "yerLeaveList\022!\n\013object_list\030\001 \003(\0132\014.NFMs"
      "g.Ident\"\206\002\n\rReqAckSynData\022\033\n\005syser\030\001 \001(\013"
      "2\014.NFMsg.Ident\022!\n\013object_list\030\002 \003(\0132\014.NF"
      "Msg.Ident\022\014\n\004data\030\003 \001(\014\022.\n\010syn_type\030\004 \001("
      "\0162\034.NFMsg.ReqAckSynData.SynType\022 \n\006msg_i"
      "d\030\005 \001(\0162\020.NFMsg.ESynMsgID\"U\n\007SynType\022\016\n\n"
      "EST_UNKNOW\020\000\022\r\n\tEST_GROUP\020\001\022\r\n\tEST_SCENE"
      "\020\002\022\014\n\010EST_CLAN\020\003\022\016\n\nEST_FRIEND\020\004\"\341\001\n\020Req"
      "AckPlayerMove\022\033\n\005mover\030\001 \001(\0132\014.NFMsg.Ide"
      "nt\022\020\n\010moveType\030\002 \001(\005\022\r\n\005speed\030\003 \001(\002\022\014\n\004t"
      "ime\030\004 \001(\005\022\021\n\tlastState\030\005 \001(\005\022\"\n\ntarget_p"
      "os\030\006 \003(\0132\016.NFMsg.Vector3\022\"\n\nsource_pos\030\007"
      " \003(\0132\016.NFMsg.Vector3\022&\n\016move_direction\030\010"
      " \003(\0132\016.NFMsg.Vector3\"\256\003\n\020ReqAckPlayerCha"
      "t\022\035\n\007chat_id\030\001 \001(\0132\014.NFMsg.Ident\0228\n\tchat"
      "_type\030\002 \001(\0162%.NFMsg.ReqAckPlayerChat.EGa"
      "meChatType\022\021\n\tchat_info\030\003 \001(\014\022\021\n\tchat_na"
      "me\030\004 \001(\014\022\037\n\ttarget_id\030\005 \001(\0132\014.NFMsg.Iden"
      "t\022=\n\016Container_data\030\006 \003(\0132%.NFMsg.ReqAck"
      "PlayerChat.ChatContainer\032j\n\rChatContaine"
      "r\022\025\n\rConTainerType\030\002 \001(\005\022\021\n\tdata_info\030\003 "
      "\001(\014\"/\n\rContainerType\022\017\n\013EGCT_UNKNOW\020\000\022\r\n"
      "\tEGCT_ITEM\020\001\"O\n\rEGameChatType\022\r\n\tEGCT_CL"
      "AN\020\000\022\020\n\014EGCT_PRIVATE\020\001\022\r\n\tEGCT_TEAM\020\002\022\016\n"
      "\nEGCT_WORLD\020\003\"\277\001\n\023ReqAckPlayerPosSync\022\033\n"
      "\005mover\030\001 \001(\0132\014.NFMsg.Ident\022\014\n\004time\030\002 \001(\005"
      "\022\031\n\021InterpolationTime\030\003 \001(\002\022 \n\010position\030"
      "\004 \001(\0132\016.NFMsg.Vector3\022!\n\tdirection\030\005 \001(\013"
      "2\016.NFMsg.Vector3\022\016\n\006status\030\006 \001(\005\022\r\n\005fram"
      "e\030\007 \001(\005\"\323\001\n\nEffectData\022\"\n\014effect_ident\030\001"
      " \001(\0132\014.NFMsg.Ident\022\024\n\014effect_value\030\002 \001(\005"
      "\0221\n\neffect_rlt\030\003 \001(\0162\035.NFMsg.EffectData."
      "EResultType\"X\n\013EResultType\022\014\n\010EET_FAIL\020\000"
      "\022\017\n\013EET_SUCCESS\020\001\022\016\n\nEET_REFUSE\020\002\022\014\n\010EET"
      "_MISS\020\003\022\014\n\010EET_CRIT\020\004\"y\n\016ReqAckUseSkill\022"
      "\032\n\004user\030\001 \001(\0132\014.NFMsg.Ident\022\020\n\010skill_id\030"
      "\002 \001(\014\022\021\n\tuse_index\030\003 \001(\005\022&\n\013effect_data\030"
      "\004 \003(\0132\021.NFMsg.EffectData\"\327\001\n\rReqAckUseIt"
      "em\022\032\n\004user\030\001 \001(\0132\014.NFMsg.Ident\022\037\n\titem_g"
      "uid\030\002 \001(\0132\014.NFMsg.Ident\022&\n\013effect_data\030\003"
      " \003(\0132\021.NFMsg.EffectData\022\037\n\004item\030\004 \001(\0132\021."
      "NFMsg.ItemStruct\022\036\n\010targetid\030\005 \001(\0132\014.NFM"
      "sg.Ident\022 \n\010position\030\006 \001(\0132\016.NFMsg.Vecto"
      "r3\"\363\001\n\017ReqAckSwapScene\022;\n\rtransfer_type\030"
      "\001 \001(\0162$.NFMsg.ReqAckSwapScene.EGameSwapT"
      "ype\022\020\n\010scene_id\030\002 \001(\005\022\017\n\007line_id\030\003 \001(\005\022\t"
      "\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z\030\006 \001(\002\022\014\n\004data\030"
      "\007 \001(\014\"Q\n\rEGameSwapType\022\017\n\013EGST_NARMAL\020\000\022"
      "\016\n\nEGST_CLONE\020\001\022\016\n\nEGST_ARENA\020\002\022\017\n\013EGST_"
      "MIRROR\020\003\"\037\n\017ReqAckHomeScene\022\014\n\004data\030\001 \001("
      "\014\"1\n\nItemStruct\022\017\n\007item_id\030\001 \001(\014\022\022\n\nitem"
      "_count\030\002 \001(\005\"\?\n\016CurrencyStruct\022\025\n\rcurren"
      "cy_type\030\001 \001(\005\022\026\n\016currency_count\030\002 \001(\005\"B\n"
      "\020ReqAckReliveHero\022\017\n\007diamond\030\001 \001(\005\022\035\n\007he"
      "ro_id\030\002 \001(\0132\014.NFMsg.Ident\"2\n\017ReqPickDrop"
      "Item\022\037\n\titem_guid\030\002 \001(\0132\014.NFMsg.Ident\" \n"
      "\rReqAcceptTask\022\017\n\007task_id\030\001 \001(\014\"#\n\020ReqCo"
      "mpeleteTask\022\017\n\007task_id\030\001 \001(\014\"\322\001\n\023ReqAddS"
      "ceneBuilding\022\033\n\003pos\030\001 \001(\0132\016.NFMsg.Vector"
      "3\022\032\n\004guid\030\002 \001(\0132\014.NFMsg.Ident\022\034\n\006master\030"
      "\003 \001(\0132\014.NFMsg.Ident\022\021\n\tconfig_id\030\004 \001(\014\022\020"
      "\n\010scene_id\030\005 \001(\005\022\023\n\013master_name\030\006 \001(\014\022\025\n"
      "\ris_home_scene\030\007 \001(\005\022\023\n\013is_building\030\010 \001("
      "\005\"B\n\021ReqSceneBuildings\022\020\n\010scene_id\030\001 \001(\005"
      "\022\033\n\003pos\030\002 \001(\0132\016.NFMsg.Vector3\"B\n\021AckScen"
      "eBuildings\022-\n\tbuildings\030\001 \003(\0132\032.NFMsg.Re"
      "qAddSceneBuilding\"z\n\026ReqStoreSceneBuildi"
      "ngs\022\032\n\004guid\030\001 \001(\0132\014.NFMsg.Ident\022\025\n\rhome_"
      "scene_id\030\002 \001(\005\022-\n\tbuildings\030\003 \003(\0132\032.NFMs"
      "g.ReqAddSceneBuilding\"D\n\020ReqAckCreateCla"
      "n\022\035\n\007clan_id\030\001 \001(\0132\014.NFMsg.Ident\022\021\n\tclan"
      "_name\030\002 \001(\014\"\"\n\rReqSearchClan\022\021\n\tclan_nam"
      "e\030\001 \001(\014\"\204\002\n\rAckSearchClan\0228\n\tclan_list\030\001"
      " \003(\0132%.NFMsg.AckSearchClan.SearchClanObj"
      "ect\032\270\001\n\020SearchClanObject\022\035\n\007clan_ID\030\001 \001("
      "\0132\014.NFMsg.Ident\022\021\n\tclan_name\030\002 \001(\014\022\021\n\tcl"
      "an_icon\030\003 \001(\014\022\031\n\021clan_member_count\030\004 \001(\005"
      "\022\035\n\025clan_member_max_count\030\005 \001(\005\022\022\n\nclan_"
      "honor\030\006 \001(\005\022\021\n\tclan_rank\030\007 \001(\005\"B\n\016ReqAck"
      "JoinClan\022\035\n\007clan_id\030\001 \001(\0132\014.NFMsg.Ident\022"
      "\021\n\tclan_name\030\002 \001(\014\"C\n\017ReqAckLeaveClan\022\035\n"
      "\007clan_id\030\001 \001(\0132\014.NFMsg.Ident\022\021\n\tclan_nam"
      "e\030\002 \001(\014\"\325\001\n\023ReqAckOprClanMember\022\035\n\007clan_"
      "id\030\001 \001(\0132\014.NFMsg.Ident\022\037\n\tmember_id\030\002 \001("
      "\0132\014.NFMsg.Ident\022<\n\004type\030\003 \001(\0162..NFMsg.Re"
      "qAckOprClanMember.EGClanMemberOprType\"@\n"
      "\023EGClanMemberOprType\022\r\n\tEGAT_DOWN\020\000\022\013\n\007E"
      "GAT_UP\020\001\022\r\n\tEGAT_KICK\020\002\"3\n\022ReqEnterClanE"
      "ctype\022\035\n\007clan_id\030\001 \001(\0132\014.NFMsg.Ident\"<\n\017"
      "ReqSetFightHero\022\034\n\006Heroid\030\001 \001(\0132\014.NFMsg."
      "Ident\022\013\n\003Set\030\002 \001(\005\"2\n\022ReqSwitchFightHero"
      "\022\034\n\006Heroid\030\001 \001(\0132\014.NFMsg.Ident\"3\n\022ReqBuy"
      "ItemFromShop\022\016\n\006itemID\030\001 \001(\014\022\r\n\005count\030\002 "
      "\001(\005\"\356\002\n\rPVPPlayerInfo\022\030\n\002id\030\001 \001(\0132\014.NFMs"
      "g.Ident\022\016\n\006single\030\002 \001(\005\022\r\n\005level\030\004 \001(\005\022\024"
      "\n\014battle_point\030\005 \001(\005\022\014\n\004name\030\006 \001(\014\022\014\n\004he"
      "ad\030\007 \001(\014\022\014\n\004gold\030\010 \001(\005\022\017\n\007diamond\030\t \001(\005\022"
      "\021\n\thero_cnf1\030\024 \001(\014\022\021\n\thero_cnf2\030\025 \001(\014\022\021\n"
      "\thero_cnf3\030\026 \001(\014\022\022\n\nhero_star1\030\031 \001(\005\022\022\n\n"
      "hero_star2\030\032 \001(\005\022\022\n\nhero_star3\030\033 \001(\005\022\036\n\010"
      "hero_id1\030\034 \001(\0132\014.NFMsg.Ident\022\036\n\010hero_id2"
      "\030\035 \001(\0132\014.NFMsg.Ident\022\036\n\010hero_id3\030\036 \001(\0132\014"
      ".NFMsg.Ident\"l\n\020ReqSearchOppnent\022\022\n\nself"
      "_scene\030\001 \001(\005\022\017\n\007diamond\030\002 \001(\005\022\024\n\014battle_"
      "point\030\003 \001(\005\022\035\n\007friends\030\n \003(\0132\014.NFMsg.Ide"
      "nt\"\326\001\n\020AckSearchOppnent\022\020\n\010scene_id\030\001 \001("
      "\005\022\035\n\007team_id\030\002 \001(\0132\014.NFMsg.Ident\022\026\n\016gamb"
      "le_diamond\030\003 \001(\005\022\"\n\014team_members\030\005 \003(\0132\014"
      ".NFMsg.Ident\022&\n\010opponent\030\016 \001(\0132\024.NFMsg.P"
      "VPPlayerInfo\022-\n\tbuildings\030\024 \003(\0132\032.NFMsg."
      "ReqAddSceneBuilding\"2\n\022ReqAckCancelSearc"
      "h\022\034\n\006selfid\030\001 \001(\0132\014.NFMsg.Ident\" \n\014ReqEn"
      "dBattle\022\020\n\010auto_end\030\001 \001(\005\"\351\001\n\014AckEndBatt"
      "le\022\013\n\003win\030\001 \001(\005\022\014\n\004star\030\002 \001(\005\022\014\n\004gold\030\003 "
      "\001(\005\022\013\n\003cup\030\004 \001(\005\022\017\n\007diamond\030\005 \001(\005\022\016\n\006sin"
      "gle\030\006 \001(\005\022\035\n\007team_id\030\007 \001(\0132\014.NFMsg.Ident"
      "\022\036\n\010match_id\030\010 \001(\0132\014.NFMsg.Ident\022\035\n\007memb"
      "ers\030\t \003(\0132\014.NFMsg.Ident\022$\n\titem_list\030\n \003"
      "(\0132\021.NFMsg.ItemStruct\"\201\001\n\013ReqSendMail\022\036\n"
      "\010reciever\030\001 \001(\0132\014.NFMsg.Ident\022$\n\titem_li"
      "st\030\002 \003(\0132\021.NFMsg.ItemStruct\022,\n\rcurrency_"
      "list\030\003 \003(\0132\025.NFMsg.CurrencyStruct\"\271\001\n\017Re"
      "qSwitchServer\022\034\n\006selfid\030\001 \001(\0132\014.NFMsg.Id"
      "ent\022\025\n\rself_serverid\030\002 \001(\003\022\027\n\017target_ser"
      "verid\030\003 \001(\003\022\025\n\rgate_serverid\030\004 \001(\003\022\017\n\007Sc"
      "eneID\030\005 \001(\003\022\037\n\tclient_id\030\006 \001(\0132\014.NFMsg.I"
      "dent\022\017\n\007groupID\030\007 \001(\003\"v\n\017AckSwitchServer"
      "\022\034\n\006selfid\030\001 \001(\0132\014.NFMsg.Ident\022\025\n\rself_s"
      "erverid\030\002 \001(\003\022\027\n\017target_serverid\030\003 \001(\003\022\025"
      "\n\rgate_serverid\030\004 \001(\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5709);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgShare.proto", &protobuf_RegisterTypes);
  ::protobuf_NFDefine_2eproto::AddDescriptors();
  ::protobuf_NFMsgBase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_NFMsgShare_2eproto
namespace NFMsg {
const ::google::protobuf::EnumDescriptor* ReqAckSynData_SynType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[0];
}
bool ReqAckSynData_SynType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckSynData_SynType ReqAckSynData::EST_UNKNOW;
const ReqAckSynData_SynType ReqAckSynData::EST_GROUP;
const ReqAckSynData_SynType ReqAckSynData::EST_SCENE;
const ReqAckSynData_SynType ReqAckSynData::EST_CLAN;
const ReqAckSynData_SynType ReqAckSynData::EST_FRIEND;
const ReqAckSynData_SynType ReqAckSynData::SynType_MIN;
const ReqAckSynData_SynType ReqAckSynData::SynType_MAX;
const int ReqAckSynData::SynType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_ChatContainer_ContainerType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[1];
}
bool ReqAckPlayerChat_ChatContainer_ContainerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckPlayerChat_ChatContainer_ContainerType ReqAckPlayerChat_ChatContainer::EGCT_UNKNOW;
const ReqAckPlayerChat_ChatContainer_ContainerType ReqAckPlayerChat_ChatContainer::EGCT_ITEM;
const ReqAckPlayerChat_ChatContainer_ContainerType ReqAckPlayerChat_ChatContainer::ContainerType_MIN;
const ReqAckPlayerChat_ChatContainer_ContainerType ReqAckPlayerChat_ChatContainer::ContainerType_MAX;
const int ReqAckPlayerChat_ChatContainer::ContainerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[2];
}
bool ReqAckPlayerChat_EGameChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_CLAN;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_PRIVATE;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_TEAM;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_WORLD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MIN;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MAX;
const int ReqAckPlayerChat::EGameChatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EffectData_EResultType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[3];
}
bool EffectData_EResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EffectData_EResultType EffectData::EET_FAIL;
const EffectData_EResultType EffectData::EET_SUCCESS;
const EffectData_EResultType EffectData::EET_REFUSE;
const EffectData_EResultType EffectData::EET_MISS;
const EffectData_EResultType EffectData::EET_CRIT;
const EffectData_EResultType EffectData::EResultType_MIN;
const EffectData_EResultType EffectData::EResultType_MAX;
const int EffectData::EResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[4];
}
bool ReqAckSwapScene_EGameSwapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_NARMAL;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_CLONE;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_ARENA;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_MIRROR;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MIN;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MAX;
const int ReqAckSwapScene::EGameSwapType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckOprClanMember_EGClanMemberOprType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[5];
}
bool ReqAckOprClanMember_EGClanMemberOprType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember::EGAT_DOWN;
const ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember::EGAT_UP;
const ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember::EGAT_KICK;
const ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember::EGClanMemberOprType_MIN;
const ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember::EGClanMemberOprType_MAX;
const int ReqAckOprClanMember::EGClanMemberOprType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ReqEnterGameServer::InitAsDefaultInstance() {
  ::NFMsg::_ReqEnterGameServer_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqEnterGameServer::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEnterGameServer::kIdFieldNumber;
const int ReqEnterGameServer::kAccountFieldNumber;
const int ReqEnterGameServer::kGameIdFieldNumber;
const int ReqEnterGameServer::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEnterGameServer::ReqEnterGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqEnterGameServer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqEnterGameServer)
}
ReqEnterGameServer::ReqEnterGameServer(const ReqEnterGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = NULL;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqEnterGameServer)
}

void ReqEnterGameServer::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(game_id_));
}

ReqEnterGameServer::~ReqEnterGameServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqEnterGameServer)
  SharedDtor();
}

void ReqEnterGameServer::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ReqEnterGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqEnterGameServer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqEnterGameServer& ReqEnterGameServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqEnterGameServer.base);
  return *internal_default_instance();
}


void ReqEnterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  game_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReqEnterGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqEnterGameServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 game_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqEnterGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqEnterGameServer)
  return false;
#undef DO_
}

void ReqEnterGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account(), output);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqEnterGameServer)
}

::google::protobuf::uint8* ReqEnterGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqEnterGameServer)
  return target;
}

size_t ReqEnterGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqEnterGameServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEnterGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterGameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEnterGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqEnterGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqEnterGameServer)
    MergeFrom(*source);
  }
}

void ReqEnterGameServer::MergeFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    mutable_id()->::NFMsg::Ident::MergeFrom(from.id());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void ReqEnterGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGameServer::CopyFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGameServer::IsInitialized() const {
  return true;
}

void ReqEnterGameServer::Swap(ReqEnterGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEnterGameServer::InternalSwap(ReqEnterGameServer* other) {
  using std::swap;
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(game_id_, other->game_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqEnterGameServer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckEnterGameSuccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckEnterGameSuccess::kArgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckEnterGameSuccess::ReqAckEnterGameSuccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckEnterGameSuccess.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckEnterGameSuccess)
}
ReqAckEnterGameSuccess::ReqAckEnterGameSuccess(const ReqAckEnterGameSuccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckEnterGameSuccess)
}

void ReqAckEnterGameSuccess::SharedCtor() {
  arg_ = 0;
}

ReqAckEnterGameSuccess::~ReqAckEnterGameSuccess() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckEnterGameSuccess)
  SharedDtor();
}

void ReqAckEnterGameSuccess::SharedDtor() {
}

void ReqAckEnterGameSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckEnterGameSuccess::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckEnterGameSuccess& ReqAckEnterGameSuccess::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckEnterGameSuccess.base);
  return *internal_default_instance();
}


void ReqAckEnterGameSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckEnterGameSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckEnterGameSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckEnterGameSuccess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 arg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckEnterGameSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckEnterGameSuccess)
  return false;
#undef DO_
}

void ReqAckEnterGameSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckEnterGameSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckEnterGameSuccess)
}

::google::protobuf::uint8* ReqAckEnterGameSuccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckEnterGameSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckEnterGameSuccess)
  return target;
}

size_t ReqAckEnterGameSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckEnterGameSuccess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckEnterGameSuccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckEnterGameSuccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckEnterGameSuccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckEnterGameSuccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckEnterGameSuccess)
    MergeFrom(*source);
  }
}

void ReqAckEnterGameSuccess::MergeFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    set_arg(from.arg());
  }
}

void ReqAckEnterGameSuccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckEnterGameSuccess::CopyFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckEnterGameSuccess::IsInitialized() const {
  return true;
}

void ReqAckEnterGameSuccess::Swap(ReqAckEnterGameSuccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckEnterGameSuccess::InternalSwap(ReqAckEnterGameSuccess* other) {
  using std::swap;
  swap(arg_, other->arg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckEnterGameSuccess::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqHeartBeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHeartBeat::kArgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHeartBeat::ReqHeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqHeartBeat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqHeartBeat)
}
ReqHeartBeat::ReqHeartBeat(const ReqHeartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqHeartBeat)
}

void ReqHeartBeat::SharedCtor() {
  arg_ = 0;
}

ReqHeartBeat::~ReqHeartBeat() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqHeartBeat)
  SharedDtor();
}

void ReqHeartBeat::SharedDtor() {
}

void ReqHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqHeartBeat::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqHeartBeat& ReqHeartBeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqHeartBeat.base);
  return *internal_default_instance();
}


void ReqHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

bool ReqHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqHeartBeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 arg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqHeartBeat)
  return false;
#undef DO_
}

void ReqHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqHeartBeat)
}

::google::protobuf::uint8* ReqHeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqHeartBeat)
  return target;
}

size_t ReqHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqHeartBeat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHeartBeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqHeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqHeartBeat)
    MergeFrom(*source);
  }
}

void ReqHeartBeat::MergeFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    set_arg(from.arg());
  }
}

void ReqHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeat::CopyFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeat::IsInitialized() const {
  return true;
}

void ReqHeartBeat::Swap(ReqHeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHeartBeat::InternalSwap(ReqHeartBeat* other) {
  using std::swap;
  swap(arg_, other->arg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqHeartBeat::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqLeaveGameServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLeaveGameServer::kArgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLeaveGameServer::ReqLeaveGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqLeaveGameServer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqLeaveGameServer)
}
ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqLeaveGameServer)
}

void ReqLeaveGameServer::SharedCtor() {
  arg_ = 0;
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqLeaveGameServer)
  SharedDtor();
}

void ReqLeaveGameServer::SharedDtor() {
}

void ReqLeaveGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqLeaveGameServer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqLeaveGameServer& ReqLeaveGameServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqLeaveGameServer.base);
  return *internal_default_instance();
}


void ReqLeaveGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

bool ReqLeaveGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqLeaveGameServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 arg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqLeaveGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqLeaveGameServer)
  return false;
#undef DO_
}

void ReqLeaveGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqLeaveGameServer)
}

::google::protobuf::uint8* ReqLeaveGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqLeaveGameServer)
  return target;
}

size_t ReqLeaveGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqLeaveGameServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveGameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLeaveGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqLeaveGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqLeaveGameServer)
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    set_arg(from.arg());
  }
}

void ReqLeaveGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {
  return true;
}

void ReqLeaveGameServer::Swap(ReqLeaveGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLeaveGameServer::InternalSwap(ReqLeaveGameServer* other) {
  using std::swap;
  swap(arg_, other->arg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqLeaveGameServer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerEntryInfo::InitAsDefaultInstance() {
  ::NFMsg::_PlayerEntryInfo_default_instance_._instance.get_mutable()->object_guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void PlayerEntryInfo::clear_object_guid() {
  if (GetArenaNoVirtual() == NULL && object_guid_ != NULL) {
    delete object_guid_;
  }
  object_guid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEntryInfo::kObjectGuidFieldNumber;
const int PlayerEntryInfo::kXFieldNumber;
const int PlayerEntryInfo::kYFieldNumber;
const int PlayerEntryInfo::kZFieldNumber;
const int PlayerEntryInfo::kCareerTypeFieldNumber;
const int PlayerEntryInfo::kPlayerStateFieldNumber;
const int PlayerEntryInfo::kConfigIdFieldNumber;
const int PlayerEntryInfo::kSceneIdFieldNumber;
const int PlayerEntryInfo::kClassIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEntryInfo::PlayerEntryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_PlayerEntryInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PlayerEntryInfo)
}
PlayerEntryInfo::PlayerEntryInfo(const PlayerEntryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config_id().size() > 0) {
    config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.class_id().size() > 0) {
    class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_id_);
  }
  if (from.has_object_guid()) {
    object_guid_ = new ::NFMsg::Ident(*from.object_guid_);
  } else {
    object_guid_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PlayerEntryInfo)
}

void PlayerEntryInfo::SharedCtor() {
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&object_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&object_guid_)) + sizeof(scene_id_));
}

PlayerEntryInfo::~PlayerEntryInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.PlayerEntryInfo)
  SharedDtor();
}

void PlayerEntryInfo::SharedDtor() {
  config_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_guid_;
}

void PlayerEntryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerEntryInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerEntryInfo& PlayerEntryInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_PlayerEntryInfo.base);
  return *internal_default_instance();
}


void PlayerEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && object_guid_ != NULL) {
    delete object_guid_;
  }
  object_guid_ = NULL;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&x_)) + sizeof(scene_id_));
  _internal_metadata_.Clear();
}

bool PlayerEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PlayerEntryInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident object_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 career_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 player_state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes config_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scene_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes class_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_class_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PlayerEntryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PlayerEntryInfo)
  return false;
#undef DO_
}

void PlayerEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_object_guid(), output);
  }

  // float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // float z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // int32 career_type = 5;
  if (this->career_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->career_type(), output);
  }

  // int32 player_state = 6;
  if (this->player_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_state(), output);
  }

  // bytes config_id = 7;
  if (this->config_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->config_id(), output);
  }

  // int32 scene_id = 8;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene_id(), output);
  }

  // bytes class_id = 9;
  if (this->class_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->class_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PlayerEntryInfo)
}

::google::protobuf::uint8* PlayerEntryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_object_guid(), deterministic, target);
  }

  // float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // float z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // int32 career_type = 5;
  if (this->career_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->career_type(), target);
  }

  // int32 player_state = 6;
  if (this->player_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_state(), target);
  }

  // bytes config_id = 7;
  if (this->config_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->config_id(), target);
  }

  // int32 scene_id = 8;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene_id(), target);
  }

  // bytes class_id = 9;
  if (this->class_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->class_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PlayerEntryInfo)
  return target;
}

size_t PlayerEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PlayerEntryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes config_id = 7;
  if (this->config_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->config_id());
  }

  // bytes class_id = 9;
  if (this->class_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->class_id());
  }

  // .NFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_guid_);
  }

  // float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // int32 career_type = 5;
  if (this->career_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->career_type());
  }

  // int32 player_state = 6;
  if (this->player_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_state());
  }

  // int32 scene_id = 8;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEntryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEntryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PlayerEntryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PlayerEntryInfo)
    MergeFrom(*source);
  }
}

void PlayerEntryInfo::MergeFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_id().size() > 0) {

    config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  if (from.class_id().size() > 0) {

    class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_id_);
  }
  if (from.has_object_guid()) {
    mutable_object_guid()->::NFMsg::Ident::MergeFrom(from.object_guid());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.career_type() != 0) {
    set_career_type(from.career_type());
  }
  if (from.player_state() != 0) {
    set_player_state(from.player_state());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void PlayerEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntryInfo::CopyFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntryInfo::IsInitialized() const {
  return true;
}

void PlayerEntryInfo::Swap(PlayerEntryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEntryInfo::InternalSwap(PlayerEntryInfo* other) {
  using std::swap;
  config_id_.Swap(&other->config_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  class_id_.Swap(&other->class_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(object_guid_, other->object_guid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(career_type_, other->career_type_);
  swap(player_state_, other->player_state_);
  swap(scene_id_, other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerEntryInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckPlayerEntryList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPlayerEntryList::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPlayerEntryList::AckPlayerEntryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckPlayerEntryList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckPlayerEntryList)
}
AckPlayerEntryList::AckPlayerEntryList(const AckPlayerEntryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckPlayerEntryList)
}

void AckPlayerEntryList::SharedCtor() {
}

AckPlayerEntryList::~AckPlayerEntryList() {
  // @@protoc_insertion_point(destructor:NFMsg.AckPlayerEntryList)
  SharedDtor();
}

void AckPlayerEntryList::SharedDtor() {
}

void AckPlayerEntryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckPlayerEntryList::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckPlayerEntryList& AckPlayerEntryList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckPlayerEntryList.base);
  return *internal_default_instance();
}


void AckPlayerEntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear();
}

bool AckPlayerEntryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckPlayerEntryList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.PlayerEntryInfo object_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckPlayerEntryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckPlayerEntryList)
  return false;
#undef DO_
}

void AckPlayerEntryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->object_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckPlayerEntryList)
}

::google::protobuf::uint8* AckPlayerEntryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->object_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckPlayerEntryList)
  return target;
}

size_t AckPlayerEntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckPlayerEntryList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerEntryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerEntryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPlayerEntryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckPlayerEntryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckPlayerEntryList)
    MergeFrom(*source);
  }
}

void AckPlayerEntryList::MergeFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerEntryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerEntryList::CopyFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerEntryList::IsInitialized() const {
  return true;
}

void AckPlayerEntryList::Swap(AckPlayerEntryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPlayerEntryList::InternalSwap(AckPlayerEntryList* other) {
  using std::swap;
  CastToBase(&object_list_)->InternalSwap(CastToBase(&other->object_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckPlayerEntryList::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckPlayerLeaveList::InitAsDefaultInstance() {
}
void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPlayerLeaveList::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPlayerLeaveList::AckPlayerLeaveList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckPlayerLeaveList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckPlayerLeaveList)
}
AckPlayerLeaveList::AckPlayerLeaveList(const AckPlayerLeaveList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckPlayerLeaveList)
}

void AckPlayerLeaveList::SharedCtor() {
}

AckPlayerLeaveList::~AckPlayerLeaveList() {
  // @@protoc_insertion_point(destructor:NFMsg.AckPlayerLeaveList)
  SharedDtor();
}

void AckPlayerLeaveList::SharedDtor() {
}

void AckPlayerLeaveList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckPlayerLeaveList::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckPlayerLeaveList& AckPlayerLeaveList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckPlayerLeaveList.base);
  return *internal_default_instance();
}


void AckPlayerLeaveList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear();
}

bool AckPlayerLeaveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckPlayerLeaveList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.Ident object_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckPlayerLeaveList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckPlayerLeaveList)
  return false;
#undef DO_
}

void AckPlayerLeaveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->object_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckPlayerLeaveList)
}

::google::protobuf::uint8* AckPlayerLeaveList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->object_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckPlayerLeaveList)
  return target;
}

size_t AckPlayerLeaveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckPlayerLeaveList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.Ident object_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerLeaveList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerLeaveList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPlayerLeaveList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckPlayerLeaveList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckPlayerLeaveList)
    MergeFrom(*source);
  }
}

void AckPlayerLeaveList::MergeFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerLeaveList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLeaveList::CopyFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLeaveList::IsInitialized() const {
  return true;
}

void AckPlayerLeaveList::Swap(AckPlayerLeaveList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPlayerLeaveList::InternalSwap(AckPlayerLeaveList* other) {
  using std::swap;
  CastToBase(&object_list_)->InternalSwap(CastToBase(&other->object_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckPlayerLeaveList::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckSynData::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckSynData_default_instance_._instance.get_mutable()->syser_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckSynData::clear_syser() {
  if (GetArenaNoVirtual() == NULL && syser_ != NULL) {
    delete syser_;
  }
  syser_ = NULL;
}
void ReqAckSynData::clear_object_list() {
  object_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckSynData::kSyserFieldNumber;
const int ReqAckSynData::kObjectListFieldNumber;
const int ReqAckSynData::kDataFieldNumber;
const int ReqAckSynData::kSynTypeFieldNumber;
const int ReqAckSynData::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckSynData::ReqAckSynData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckSynData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckSynData)
}
ReqAckSynData::ReqAckSynData(const ReqAckSynData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_syser()) {
    syser_ = new ::NFMsg::Ident(*from.syser_);
  } else {
    syser_ = NULL;
  }
  ::memcpy(&syn_type_, &from.syn_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&syn_type_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckSynData)
}

void ReqAckSynData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&syser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&syser_)) + sizeof(msg_id_));
}

ReqAckSynData::~ReqAckSynData() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckSynData)
  SharedDtor();
}

void ReqAckSynData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete syser_;
}

void ReqAckSynData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckSynData::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckSynData& ReqAckSynData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckSynData.base);
  return *internal_default_instance();
}


void ReqAckSynData::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckSynData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && syser_ != NULL) {
    delete syser_;
  }
  syser_ = NULL;
  ::memset(&syn_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&syn_type_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

bool ReqAckSynData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckSynData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident syser = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_syser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Ident object_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.ReqAckSynData.SynType syn_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_syn_type(static_cast< ::NFMsg::ReqAckSynData_SynType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.ESynMsgID msg_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_id(static_cast< ::NFMsg::ESynMsgID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckSynData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckSynData)
  return false;
#undef DO_
}

void ReqAckSynData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckSynData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident syser = 1;
  if (this->has_syser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_syser(), output);
  }

  // repeated .NFMsg.Ident object_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->object_list(static_cast<int>(i)),
      output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // .NFMsg.ReqAckSynData.SynType syn_type = 4;
  if (this->syn_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->syn_type(), output);
  }

  // .NFMsg.ESynMsgID msg_id = 5;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckSynData)
}

::google::protobuf::uint8* ReqAckSynData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckSynData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident syser = 1;
  if (this->has_syser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_syser(), deterministic, target);
  }

  // repeated .NFMsg.Ident object_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->object_list(static_cast<int>(i)), deterministic, target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // .NFMsg.ReqAckSynData.SynType syn_type = 4;
  if (this->syn_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->syn_type(), target);
  }

  // .NFMsg.ESynMsgID msg_id = 5;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->msg_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckSynData)
  return target;
}

size_t ReqAckSynData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckSynData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.Ident object_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_list(static_cast<int>(i)));
    }
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .NFMsg.Ident syser = 1;
  if (this->has_syser()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *syser_);
  }

  // .NFMsg.ReqAckSynData.SynType syn_type = 4;
  if (this->syn_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->syn_type());
  }

  // .NFMsg.ESynMsgID msg_id = 5;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckSynData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckSynData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSynData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckSynData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckSynData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckSynData)
    MergeFrom(*source);
  }
}

void ReqAckSynData::MergeFrom(const ReqAckSynData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckSynData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_syser()) {
    mutable_syser()->::NFMsg::Ident::MergeFrom(from.syser());
  }
  if (from.syn_type() != 0) {
    set_syn_type(from.syn_type());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
}

void ReqAckSynData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckSynData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSynData::CopyFrom(const ReqAckSynData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckSynData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSynData::IsInitialized() const {
  return true;
}

void ReqAckSynData::Swap(ReqAckSynData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckSynData::InternalSwap(ReqAckSynData* other) {
  using std::swap;
  CastToBase(&object_list_)->InternalSwap(CastToBase(&other->object_list_));
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(syser_, other->syser_);
  swap(syn_type_, other->syn_type_);
  swap(msg_id_, other->msg_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckSynData::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckPlayerMove::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckPlayerMove_default_instance_._instance.get_mutable()->mover_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckPlayerMove::clear_mover() {
  if (GetArenaNoVirtual() == NULL && mover_ != NULL) {
    delete mover_;
  }
  mover_ = NULL;
}
void ReqAckPlayerMove::clear_target_pos() {
  target_pos_.Clear();
}
void ReqAckPlayerMove::clear_source_pos() {
  source_pos_.Clear();
}
void ReqAckPlayerMove::clear_move_direction() {
  move_direction_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerMove::kMoverFieldNumber;
const int ReqAckPlayerMove::kMoveTypeFieldNumber;
const int ReqAckPlayerMove::kSpeedFieldNumber;
const int ReqAckPlayerMove::kTimeFieldNumber;
const int ReqAckPlayerMove::kLastStateFieldNumber;
const int ReqAckPlayerMove::kTargetPosFieldNumber;
const int ReqAckPlayerMove::kSourcePosFieldNumber;
const int ReqAckPlayerMove::kMoveDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerMove::ReqAckPlayerMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerMove.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerMove)
}
ReqAckPlayerMove::ReqAckPlayerMove(const ReqAckPlayerMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      target_pos_(from.target_pos_),
      source_pos_(from.source_pos_),
      move_direction_(from.move_direction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mover()) {
    mover_ = new ::NFMsg::Ident(*from.mover_);
  } else {
    mover_ = NULL;
  }
  ::memcpy(&movetype_, &from.movetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&laststate_) -
    reinterpret_cast<char*>(&movetype_)) + sizeof(laststate_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerMove)
}

void ReqAckPlayerMove::SharedCtor() {
  ::memset(&mover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&laststate_) -
      reinterpret_cast<char*>(&mover_)) + sizeof(laststate_));
}

ReqAckPlayerMove::~ReqAckPlayerMove() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerMove)
  SharedDtor();
}

void ReqAckPlayerMove::SharedDtor() {
  if (this != internal_default_instance()) delete mover_;
}

void ReqAckPlayerMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckPlayerMove::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckPlayerMove& ReqAckPlayerMove::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerMove.base);
  return *internal_default_instance();
}


void ReqAckPlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pos_.Clear();
  source_pos_.Clear();
  move_direction_.Clear();
  if (GetArenaNoVirtual() == NULL && mover_ != NULL) {
    delete mover_;
  }
  mover_ = NULL;
  ::memset(&movetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&laststate_) -
      reinterpret_cast<char*>(&movetype_)) + sizeof(laststate_));
  _internal_metadata_.Clear();
}

bool ReqAckPlayerMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckPlayerMove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident mover = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mover()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 moveType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastState = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laststate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Vector3 target_pos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_target_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Vector3 source_pos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_source_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Vector3 move_direction = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_move_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckPlayerMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckPlayerMove)
  return false;
#undef DO_
}

void ReqAckPlayerMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_mover(), output);
  }

  // int32 moveType = 2;
  if (this->movetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movetype(), output);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  // int32 time = 4;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // int32 lastState = 5;
  if (this->laststate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->laststate(), output);
  }

  // repeated .NFMsg.Vector3 target_pos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->target_pos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->target_pos(static_cast<int>(i)),
      output);
  }

  // repeated .NFMsg.Vector3 source_pos = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_pos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->source_pos(static_cast<int>(i)),
      output);
  }

  // repeated .NFMsg.Vector3 move_direction = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->move_direction_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->move_direction(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckPlayerMove)
}

::google::protobuf::uint8* ReqAckPlayerMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_mover(), deterministic, target);
  }

  // int32 moveType = 2;
  if (this->movetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movetype(), target);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  // int32 time = 4;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // int32 lastState = 5;
  if (this->laststate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->laststate(), target);
  }

  // repeated .NFMsg.Vector3 target_pos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->target_pos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->target_pos(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.Vector3 source_pos = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_pos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->source_pos(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.Vector3 move_direction = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->move_direction_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->move_direction(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerMove)
  return target;
}

size_t ReqAckPlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerMove)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.Vector3 target_pos = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->target_pos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->target_pos(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.Vector3 source_pos = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->source_pos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->source_pos(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.Vector3 move_direction = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->move_direction_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->move_direction(static_cast<int>(i)));
    }
  }

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mover_);
  }

  // int32 moveType = 2;
  if (this->movetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->movetype());
  }

  // float speed = 3;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // int32 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // int32 lastState = 5;
  if (this->laststate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->laststate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerMove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerMove)
    MergeFrom(*source);
  }
}

void ReqAckPlayerMove::MergeFrom(const ReqAckPlayerMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pos_.MergeFrom(from.target_pos_);
  source_pos_.MergeFrom(from.source_pos_);
  move_direction_.MergeFrom(from.move_direction_);
  if (from.has_mover()) {
    mutable_mover()->::NFMsg::Ident::MergeFrom(from.mover());
  }
  if (from.movetype() != 0) {
    set_movetype(from.movetype());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.laststate() != 0) {
    set_laststate(from.laststate());
  }
}

void ReqAckPlayerMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerMove::CopyFrom(const ReqAckPlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerMove::IsInitialized() const {
  return true;
}

void ReqAckPlayerMove::Swap(ReqAckPlayerMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerMove::InternalSwap(ReqAckPlayerMove* other) {
  using std::swap;
  CastToBase(&target_pos_)->InternalSwap(CastToBase(&other->target_pos_));
  CastToBase(&source_pos_)->InternalSwap(CastToBase(&other->source_pos_));
  CastToBase(&move_direction_)->InternalSwap(CastToBase(&other->move_direction_));
  swap(mover_, other->mover_);
  swap(movetype_, other->movetype_);
  swap(speed_, other->speed_);
  swap(time_, other->time_);
  swap(laststate_, other->laststate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckPlayerMove::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckPlayerChat_ChatContainer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerChat_ChatContainer::kConTainerTypeFieldNumber;
const int ReqAckPlayerChat_ChatContainer::kDataInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerChat_ChatContainer::ReqAckPlayerChat_ChatContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerChat_ChatContainer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerChat.ChatContainer)
}
ReqAckPlayerChat_ChatContainer::ReqAckPlayerChat_ChatContainer(const ReqAckPlayerChat_ChatContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_info().size() > 0) {
    data_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_info_);
  }
  containertype_ = from.containertype_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerChat.ChatContainer)
}

void ReqAckPlayerChat_ChatContainer::SharedCtor() {
  data_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  containertype_ = 0;
}

ReqAckPlayerChat_ChatContainer::~ReqAckPlayerChat_ChatContainer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerChat.ChatContainer)
  SharedDtor();
}

void ReqAckPlayerChat_ChatContainer::SharedDtor() {
  data_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAckPlayerChat_ChatContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckPlayerChat_ChatContainer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckPlayerChat_ChatContainer& ReqAckPlayerChat_ChatContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerChat_ChatContainer.base);
  return *internal_default_instance();
}


void ReqAckPlayerChat_ChatContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  containertype_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckPlayerChat_ChatContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ConTainerType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &containertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckPlayerChat.ChatContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckPlayerChat.ChatContainer)
  return false;
#undef DO_
}

void ReqAckPlayerChat_ChatContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ConTainerType = 2;
  if (this->containertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->containertype(), output);
  }

  // bytes data_info = 3;
  if (this->data_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckPlayerChat.ChatContainer)
}

::google::protobuf::uint8* ReqAckPlayerChat_ChatContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ConTainerType = 2;
  if (this->containertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->containertype(), target);
  }

  // bytes data_info = 3;
  if (this->data_info().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data_info(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerChat.ChatContainer)
  return target;
}

size_t ReqAckPlayerChat_ChatContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data_info = 3;
  if (this->data_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_info());
  }

  // int32 ConTainerType = 2;
  if (this->containertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->containertype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerChat_ChatContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerChat_ChatContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerChat_ChatContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerChat.ChatContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerChat.ChatContainer)
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat_ChatContainer::MergeFrom(const ReqAckPlayerChat_ChatContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_info().size() > 0) {

    data_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_info_);
  }
  if (from.containertype() != 0) {
    set_containertype(from.containertype());
  }
}

void ReqAckPlayerChat_ChatContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat_ChatContainer::CopyFrom(const ReqAckPlayerChat_ChatContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat_ChatContainer::IsInitialized() const {
  return true;
}

void ReqAckPlayerChat_ChatContainer::Swap(ReqAckPlayerChat_ChatContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerChat_ChatContainer::InternalSwap(ReqAckPlayerChat_ChatContainer* other) {
  using std::swap;
  data_info_.Swap(&other->data_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(containertype_, other->containertype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckPlayerChat_ChatContainer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckPlayerChat::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckPlayerChat_default_instance_._instance.get_mutable()->chat_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckPlayerChat_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckPlayerChat::clear_chat_id() {
  if (GetArenaNoVirtual() == NULL && chat_id_ != NULL) {
    delete chat_id_;
  }
  chat_id_ = NULL;
}
void ReqAckPlayerChat::clear_target_id() {
  if (GetArenaNoVirtual() == NULL && target_id_ != NULL) {
    delete target_id_;
  }
  target_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerChat::kChatIdFieldNumber;
const int ReqAckPlayerChat::kChatTypeFieldNumber;
const int ReqAckPlayerChat::kChatInfoFieldNumber;
const int ReqAckPlayerChat::kChatNameFieldNumber;
const int ReqAckPlayerChat::kTargetIdFieldNumber;
const int ReqAckPlayerChat::kContainerDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerChat::ReqAckPlayerChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerChat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerChat)
}
ReqAckPlayerChat::ReqAckPlayerChat(const ReqAckPlayerChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      container_data_(from.container_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_info().size() > 0) {
    chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chat_name().size() > 0) {
    chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
  }
  if (from.has_chat_id()) {
    chat_id_ = new ::NFMsg::Ident(*from.chat_id_);
  } else {
    chat_id_ = NULL;
  }
  if (from.has_target_id()) {
    target_id_ = new ::NFMsg::Ident(*from.target_id_);
  } else {
    target_id_ = NULL;
  }
  chat_type_ = from.chat_type_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerChat)
}

void ReqAckPlayerChat::SharedCtor() {
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(chat_type_));
}

ReqAckPlayerChat::~ReqAckPlayerChat() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerChat)
  SharedDtor();
}

void ReqAckPlayerChat::SharedDtor() {
  chat_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chat_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqAckPlayerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckPlayerChat::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckPlayerChat& ReqAckPlayerChat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerChat.base);
  return *internal_default_instance();
}


void ReqAckPlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_data_.Clear();
  chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && chat_id_ != NULL) {
    delete chat_id_;
  }
  chat_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_id_ != NULL) {
    delete target_id_;
  }
  target_id_ = NULL;
  chat_type_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckPlayerChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckPlayerChat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chat_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_chat_type(static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes chat_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes chat_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident target_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.ReqAckPlayerChat.ChatContainer Container_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_container_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckPlayerChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckPlayerChat)
  return false;
#undef DO_
}

void ReqAckPlayerChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident chat_id = 1;
  if (this->has_chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_chat_id(), output);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (this->chat_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chat_type(), output);
  }

  // bytes chat_info = 3;
  if (this->chat_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->chat_info(), output);
  }

  // bytes chat_name = 4;
  if (this->chat_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->chat_name(), output);
  }

  // .NFMsg.Ident target_id = 5;
  if (this->has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_target_id(), output);
  }

  // repeated .NFMsg.ReqAckPlayerChat.ChatContainer Container_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->container_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->container_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckPlayerChat)
}

::google::protobuf::uint8* ReqAckPlayerChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident chat_id = 1;
  if (this->has_chat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_chat_id(), deterministic, target);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (this->chat_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->chat_type(), target);
  }

  // bytes chat_info = 3;
  if (this->chat_info().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->chat_info(), target);
  }

  // bytes chat_name = 4;
  if (this->chat_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->chat_name(), target);
  }

  // .NFMsg.Ident target_id = 5;
  if (this->has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_target_id(), deterministic, target);
  }

  // repeated .NFMsg.ReqAckPlayerChat.ChatContainer Container_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->container_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->container_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerChat)
  return target;
}

size_t ReqAckPlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerChat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.ReqAckPlayerChat.ChatContainer Container_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->container_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->container_data(static_cast<int>(i)));
    }
  }

  // bytes chat_info = 3;
  if (this->chat_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_info());
  }

  // bytes chat_name = 4;
  if (this->chat_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_name());
  }

  // .NFMsg.Ident chat_id = 1;
  if (this->has_chat_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chat_id_);
  }

  // .NFMsg.Ident target_id = 5;
  if (this->has_target_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (this->chat_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerChat)
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat::MergeFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  container_data_.MergeFrom(from.container_data_);
  if (from.chat_info().size() > 0) {

    chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  if (from.chat_name().size() > 0) {

    chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
  }
  if (from.has_chat_id()) {
    mutable_chat_id()->::NFMsg::Ident::MergeFrom(from.chat_id());
  }
  if (from.has_target_id()) {
    mutable_target_id()->::NFMsg::Ident::MergeFrom(from.target_id());
  }
  if (from.chat_type() != 0) {
    set_chat_type(from.chat_type());
  }
}

void ReqAckPlayerChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat::CopyFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat::IsInitialized() const {
  return true;
}

void ReqAckPlayerChat::Swap(ReqAckPlayerChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerChat::InternalSwap(ReqAckPlayerChat* other) {
  using std::swap;
  CastToBase(&container_data_)->InternalSwap(CastToBase(&other->container_data_));
  chat_info_.Swap(&other->chat_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_name_.Swap(&other->chat_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_id_, other->chat_id_);
  swap(target_id_, other->target_id_);
  swap(chat_type_, other->chat_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckPlayerChat::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckPlayerPosSync::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckPlayerPosSync_default_instance_._instance.get_mutable()->mover_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckPlayerPosSync_default_instance_._instance.get_mutable()->position_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  ::NFMsg::_ReqAckPlayerPosSync_default_instance_._instance.get_mutable()->direction_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
void ReqAckPlayerPosSync::clear_mover() {
  if (GetArenaNoVirtual() == NULL && mover_ != NULL) {
    delete mover_;
  }
  mover_ = NULL;
}
void ReqAckPlayerPosSync::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
void ReqAckPlayerPosSync::clear_direction() {
  if (GetArenaNoVirtual() == NULL && direction_ != NULL) {
    delete direction_;
  }
  direction_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerPosSync::kMoverFieldNumber;
const int ReqAckPlayerPosSync::kTimeFieldNumber;
const int ReqAckPlayerPosSync::kInterpolationTimeFieldNumber;
const int ReqAckPlayerPosSync::kPositionFieldNumber;
const int ReqAckPlayerPosSync::kDirectionFieldNumber;
const int ReqAckPlayerPosSync::kStatusFieldNumber;
const int ReqAckPlayerPosSync::kFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerPosSync::ReqAckPlayerPosSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerPosSync.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerPosSync)
}
ReqAckPlayerPosSync::ReqAckPlayerPosSync(const ReqAckPlayerPosSync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mover()) {
    mover_ = new ::NFMsg::Ident(*from.mover_);
  } else {
    mover_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::NFMsg::Vector3(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_direction()) {
    direction_ = new ::NFMsg::Vector3(*from.direction_);
  } else {
    direction_ = NULL;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_) -
    reinterpret_cast<char*>(&time_)) + sizeof(frame_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerPosSync)
}

void ReqAckPlayerPosSync::SharedCtor() {
  ::memset(&mover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&mover_)) + sizeof(frame_));
}

ReqAckPlayerPosSync::~ReqAckPlayerPosSync() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerPosSync)
  SharedDtor();
}

void ReqAckPlayerPosSync::SharedDtor() {
  if (this != internal_default_instance()) delete mover_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete direction_;
}

void ReqAckPlayerPosSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckPlayerPosSync::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckPlayerPosSync& ReqAckPlayerPosSync::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerPosSync.base);
  return *internal_default_instance();
}


void ReqAckPlayerPosSync::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerPosSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && mover_ != NULL) {
    delete mover_;
  }
  mover_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && direction_ != NULL) {
    delete direction_;
  }
  direction_ = NULL;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&time_)) + sizeof(frame_));
  _internal_metadata_.Clear();
}

bool ReqAckPlayerPosSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckPlayerPosSync)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident mover = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mover()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float InterpolationTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &interpolationtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Vector3 position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Vector3 direction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frame = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckPlayerPosSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckPlayerPosSync)
  return false;
#undef DO_
}

void ReqAckPlayerPosSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckPlayerPosSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_mover(), output);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // float InterpolationTime = 3;
  if (this->interpolationtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->interpolationtime(), output);
  }

  // .NFMsg.Vector3 position = 4;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_position(), output);
  }

  // .NFMsg.Vector3 direction = 5;
  if (this->has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_direction(), output);
  }

  // int32 status = 6;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // int32 frame = 7;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->frame(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckPlayerPosSync)
}

::google::protobuf::uint8* ReqAckPlayerPosSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerPosSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_mover(), deterministic, target);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // float InterpolationTime = 3;
  if (this->interpolationtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->interpolationtime(), target);
  }

  // .NFMsg.Vector3 position = 4;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_position(), deterministic, target);
  }

  // .NFMsg.Vector3 direction = 5;
  if (this->has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_direction(), deterministic, target);
  }

  // int32 status = 6;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // int32 frame = 7;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->frame(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerPosSync)
  return target;
}

size_t ReqAckPlayerPosSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerPosSync)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mover_);
  }

  // .NFMsg.Vector3 position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .NFMsg.Vector3 direction = 5;
  if (this->has_direction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // float InterpolationTime = 3;
  if (this->interpolationtime() != 0) {
    total_size += 1 + 4;
  }

  // int32 status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 frame = 7;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerPosSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerPosSync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerPosSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerPosSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerPosSync)
    MergeFrom(*source);
  }
}

void ReqAckPlayerPosSync::MergeFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mover()) {
    mutable_mover()->::NFMsg::Ident::MergeFrom(from.mover());
  }
  if (from.has_position()) {
    mutable_position()->::NFMsg::Vector3::MergeFrom(from.position());
  }
  if (from.has_direction()) {
    mutable_direction()->::NFMsg::Vector3::MergeFrom(from.direction());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.interpolationtime() != 0) {
    set_interpolationtime(from.interpolationtime());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
}

void ReqAckPlayerPosSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerPosSync::CopyFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerPosSync::IsInitialized() const {
  return true;
}

void ReqAckPlayerPosSync::Swap(ReqAckPlayerPosSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerPosSync::InternalSwap(ReqAckPlayerPosSync* other) {
  using std::swap;
  swap(mover_, other->mover_);
  swap(position_, other->position_);
  swap(direction_, other->direction_);
  swap(time_, other->time_);
  swap(interpolationtime_, other->interpolationtime_);
  swap(status_, other->status_);
  swap(frame_, other->frame_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckPlayerPosSync::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EffectData::InitAsDefaultInstance() {
  ::NFMsg::_EffectData_default_instance_._instance.get_mutable()->effect_ident_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void EffectData::clear_effect_ident() {
  if (GetArenaNoVirtual() == NULL && effect_ident_ != NULL) {
    delete effect_ident_;
  }
  effect_ident_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EffectData::kEffectIdentFieldNumber;
const int EffectData::kEffectValueFieldNumber;
const int EffectData::kEffectRltFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EffectData::EffectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_EffectData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.EffectData)
}
EffectData::EffectData(const EffectData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_effect_ident()) {
    effect_ident_ = new ::NFMsg::Ident(*from.effect_ident_);
  } else {
    effect_ident_ = NULL;
  }
  ::memcpy(&effect_value_, &from.effect_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_rlt_) -
    reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.EffectData)
}

void EffectData::SharedCtor() {
  ::memset(&effect_ident_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_rlt_) -
      reinterpret_cast<char*>(&effect_ident_)) + sizeof(effect_rlt_));
}

EffectData::~EffectData() {
  // @@protoc_insertion_point(destructor:NFMsg.EffectData)
  SharedDtor();
}

void EffectData::SharedDtor() {
  if (this != internal_default_instance()) delete effect_ident_;
}

void EffectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EffectData::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EffectData& EffectData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_EffectData.base);
  return *internal_default_instance();
}


void EffectData::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && effect_ident_ != NULL) {
    delete effect_ident_;
  }
  effect_ident_ = NULL;
  ::memset(&effect_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_rlt_) -
      reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  _internal_metadata_.Clear();
}

bool EffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.EffectData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident effect_ident = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_effect_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 effect_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.EffectData.EResultType effect_rlt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_effect_rlt(static_cast< ::NFMsg::EffectData_EResultType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.EffectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.EffectData)
  return false;
#undef DO_
}

void EffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_effect_ident(), output);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effect_value(), output);
  }

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->effect_rlt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.EffectData)
}

::google::protobuf::uint8* EffectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_effect_ident(), deterministic, target);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effect_value(), target);
  }

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->effect_rlt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.EffectData)
  return target;
}

size_t EffectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.EffectData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *effect_ident_);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->effect_value());
  }

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect_rlt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EffectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EffectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.EffectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.EffectData)
    MergeFrom(*source);
  }
}

void EffectData::MergeFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_effect_ident()) {
    mutable_effect_ident()->::NFMsg::Ident::MergeFrom(from.effect_ident());
  }
  if (from.effect_value() != 0) {
    set_effect_value(from.effect_value());
  }
  if (from.effect_rlt() != 0) {
    set_effect_rlt(from.effect_rlt());
  }
}

void EffectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectData::CopyFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectData::IsInitialized() const {
  return true;
}

void EffectData::Swap(EffectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EffectData::InternalSwap(EffectData* other) {
  using std::swap;
  swap(effect_ident_, other->effect_ident_);
  swap(effect_value_, other->effect_value_);
  swap(effect_rlt_, other->effect_rlt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EffectData::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckUseSkill::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckUseSkill_default_instance_._instance.get_mutable()->user_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckUseSkill::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckUseSkill::kUserFieldNumber;
const int ReqAckUseSkill::kSkillIdFieldNumber;
const int ReqAckUseSkill::kUseIndexFieldNumber;
const int ReqAckUseSkill::kEffectDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckUseSkill::ReqAckUseSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckUseSkill.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckUseSkill)
}
ReqAckUseSkill::ReqAckUseSkill(const ReqAckUseSkill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      effect_data_(from.effect_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.skill_id().size() > 0) {
    skill_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
  }
  if (from.has_user()) {
    user_ = new ::NFMsg::Ident(*from.user_);
  } else {
    user_ = NULL;
  }
  use_index_ = from.use_index_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckUseSkill)
}

void ReqAckUseSkill::SharedCtor() {
  skill_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_index_) -
      reinterpret_cast<char*>(&user_)) + sizeof(use_index_));
}

ReqAckUseSkill::~ReqAckUseSkill() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckUseSkill)
  SharedDtor();
}

void ReqAckUseSkill::SharedDtor() {
  skill_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void ReqAckUseSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckUseSkill::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckUseSkill& ReqAckUseSkill::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckUseSkill.base);
  return *internal_default_instance();
}


void ReqAckUseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effect_data_.Clear();
  skill_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  use_index_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckUseSkill)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes skill_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 use_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.EffectData effect_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_effect_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckUseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckUseSkill)
  return false;
#undef DO_
}

void ReqAckUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  // bytes skill_id = 2;
  if (this->skill_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->skill_id(), output);
  }

  // int32 use_index = 3;
  if (this->use_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->use_index(), output);
  }

  // repeated .NFMsg.EffectData effect_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->effect_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckUseSkill)
}

::google::protobuf::uint8* ReqAckUseSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  // bytes skill_id = 2;
  if (this->skill_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->skill_id(), target);
  }

  // int32 use_index = 3;
  if (this->use_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->use_index(), target);
  }

  // repeated .NFMsg.EffectData effect_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->effect_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckUseSkill)
  return target;
}

size_t ReqAckUseSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckUseSkill)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.EffectData effect_data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->effect_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->effect_data(static_cast<int>(i)));
    }
  }

  // bytes skill_id = 2;
  if (this->skill_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill_id());
  }

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // int32 use_index = 3;
  if (this->use_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->use_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckUseSkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckUseSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckUseSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckUseSkill)
    MergeFrom(*source);
  }
}

void ReqAckUseSkill::MergeFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effect_data_.MergeFrom(from.effect_data_);
  if (from.skill_id().size() > 0) {

    skill_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
  }
  if (from.has_user()) {
    mutable_user()->::NFMsg::Ident::MergeFrom(from.user());
  }
  if (from.use_index() != 0) {
    set_use_index(from.use_index());
  }
}

void ReqAckUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseSkill::CopyFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseSkill::IsInitialized() const {
  return true;
}

void ReqAckUseSkill::Swap(ReqAckUseSkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckUseSkill::InternalSwap(ReqAckUseSkill* other) {
  using std::swap;
  CastToBase(&effect_data_)->InternalSwap(CastToBase(&other->effect_data_));
  skill_id_.Swap(&other->skill_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(use_index_, other->use_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckUseSkill::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckUseItem::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->user_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->item_guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->item_ = const_cast< ::NFMsg::ItemStruct*>(
      ::NFMsg::ItemStruct::internal_default_instance());
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->targetid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->position_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
void ReqAckUseItem::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
void ReqAckUseItem::clear_item_guid() {
  if (GetArenaNoVirtual() == NULL && item_guid_ != NULL) {
    delete item_guid_;
  }
  item_guid_ = NULL;
}
void ReqAckUseItem::clear_targetid() {
  if (GetArenaNoVirtual() == NULL && targetid_ != NULL) {
    delete targetid_;
  }
  targetid_ = NULL;
}
void ReqAckUseItem::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckUseItem::kUserFieldNumber;
const int ReqAckUseItem::kItemGuidFieldNumber;
const int ReqAckUseItem::kEffectDataFieldNumber;
const int ReqAckUseItem::kItemFieldNumber;
const int ReqAckUseItem::kTargetidFieldNumber;
const int ReqAckUseItem::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckUseItem::ReqAckUseItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckUseItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckUseItem)
}
ReqAckUseItem::ReqAckUseItem(const ReqAckUseItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      effect_data_(from.effect_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::NFMsg::Ident(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_item_guid()) {
    item_guid_ = new ::NFMsg::Ident(*from.item_guid_);
  } else {
    item_guid_ = NULL;
  }
  if (from.has_item()) {
    item_ = new ::NFMsg::ItemStruct(*from.item_);
  } else {
    item_ = NULL;
  }
  if (from.has_targetid()) {
    targetid_ = new ::NFMsg::Ident(*from.targetid_);
  } else {
    targetid_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::NFMsg::Vector3(*from.position_);
  } else {
    position_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckUseItem)
}

void ReqAckUseItem::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&user_)) + sizeof(position_));
}

ReqAckUseItem::~ReqAckUseItem() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckUseItem)
  SharedDtor();
}

void ReqAckUseItem::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete item_guid_;
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete targetid_;
  if (this != internal_default_instance()) delete position_;
}

void ReqAckUseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckUseItem::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckUseItem& ReqAckUseItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckUseItem.base);
  return *internal_default_instance();
}


void ReqAckUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckUseItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effect_data_.Clear();
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  if (GetArenaNoVirtual() == NULL && item_guid_ != NULL) {
    delete item_guid_;
  }
  item_guid_ = NULL;
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
  if (GetArenaNoVirtual() == NULL && targetid_ != NULL) {
    delete targetid_;
  }
  targetid_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckUseItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident item_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.EffectData effect_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_effect_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.ItemStruct item = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident targetid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Vector3 position = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckUseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckUseItem)
  return false;
#undef DO_
}

void ReqAckUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckUseItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  // .NFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_item_guid(), output);
  }

  // repeated .NFMsg.EffectData effect_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->effect_data(static_cast<int>(i)),
      output);
  }

  // .NFMsg.ItemStruct item = 4;
  if (this->has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_item(), output);
  }

  // .NFMsg.Ident targetid = 5;
  if (this->has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_targetid(), output);
  }

  // .NFMsg.Vector3 position = 6;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckUseItem)
}

::google::protobuf::uint8* ReqAckUseItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckUseItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  // .NFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_item_guid(), deterministic, target);
  }

  // repeated .NFMsg.EffectData effect_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->effect_data(static_cast<int>(i)), deterministic, target);
  }

  // .NFMsg.ItemStruct item = 4;
  if (this->has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_item(), deterministic, target);
  }

  // .NFMsg.Ident targetid = 5;
  if (this->has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_targetid(), deterministic, target);
  }

  // .NFMsg.Vector3 position = 6;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_position(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckUseItem)
  return target;
}

size_t ReqAckUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckUseItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.EffectData effect_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->effect_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->effect_data(static_cast<int>(i)));
    }
  }

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .NFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_guid_);
  }

  // .NFMsg.ItemStruct item = 4;
  if (this->has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // .NFMsg.Ident targetid = 5;
  if (this->has_targetid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetid_);
  }

  // .NFMsg.Vector3 position = 6;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckUseItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckUseItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckUseItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckUseItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckUseItem)
    MergeFrom(*source);
  }
}

void ReqAckUseItem::MergeFrom(const ReqAckUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effect_data_.MergeFrom(from.effect_data_);
  if (from.has_user()) {
    mutable_user()->::NFMsg::Ident::MergeFrom(from.user());
  }
  if (from.has_item_guid()) {
    mutable_item_guid()->::NFMsg::Ident::MergeFrom(from.item_guid());
  }
  if (from.has_item()) {
    mutable_item()->::NFMsg::ItemStruct::MergeFrom(from.item());
  }
  if (from.has_targetid()) {
    mutable_targetid()->::NFMsg::Ident::MergeFrom(from.targetid());
  }
  if (from.has_position()) {
    mutable_position()->::NFMsg::Vector3::MergeFrom(from.position());
  }
}

void ReqAckUseItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseItem::CopyFrom(const ReqAckUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseItem::IsInitialized() const {
  return true;
}

void ReqAckUseItem::Swap(ReqAckUseItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckUseItem::InternalSwap(ReqAckUseItem* other) {
  using std::swap;
  CastToBase(&effect_data_)->InternalSwap(CastToBase(&other->effect_data_));
  swap(user_, other->user_);
  swap(item_guid_, other->item_guid_);
  swap(item_, other->item_);
  swap(targetid_, other->targetid_);
  swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckUseItem::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckSwapScene::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckSwapScene::kTransferTypeFieldNumber;
const int ReqAckSwapScene::kSceneIdFieldNumber;
const int ReqAckSwapScene::kLineIdFieldNumber;
const int ReqAckSwapScene::kXFieldNumber;
const int ReqAckSwapScene::kYFieldNumber;
const int ReqAckSwapScene::kZFieldNumber;
const int ReqAckSwapScene::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckSwapScene::ReqAckSwapScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckSwapScene.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckSwapScene)
}
ReqAckSwapScene::ReqAckSwapScene(const ReqAckSwapScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&transfer_type_, &from.transfer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckSwapScene)
}

void ReqAckSwapScene::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
}

ReqAckSwapScene::~ReqAckSwapScene() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckSwapScene)
  SharedDtor();
}

void ReqAckSwapScene::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAckSwapScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckSwapScene::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckSwapScene& ReqAckSwapScene::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckSwapScene.base);
  return *internal_default_instance();
}


void ReqAckSwapScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool ReqAckSwapScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckSwapScene)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_transfer_type(static_cast< ::NFMsg::ReqAckSwapScene_EGameSwapType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scene_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 line_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckSwapScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckSwapScene)
  return false;
#undef DO_
}

void ReqAckSwapScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (this->transfer_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->transfer_type(), output);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->line_id(), output);
  }

  // float x = 4;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // float y = 5;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // float z = 6;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckSwapScene)
}

::google::protobuf::uint8* ReqAckSwapScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (this->transfer_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->transfer_type(), target);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->line_id(), target);
  }

  // float x = 4;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // float y = 5;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // float z = 6;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckSwapScene)
  return target;
}

size_t ReqAckSwapScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckSwapScene)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (this->transfer_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_type());
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_id());
  }

  // float x = 4;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 5;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 6;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckSwapScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSwapScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckSwapScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckSwapScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckSwapScene)
    MergeFrom(*source);
  }
}

void ReqAckSwapScene::MergeFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.transfer_type() != 0) {
    set_transfer_type(from.transfer_type());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.line_id() != 0) {
    set_line_id(from.line_id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void ReqAckSwapScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSwapScene::CopyFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSwapScene::IsInitialized() const {
  return true;
}

void ReqAckSwapScene::Swap(ReqAckSwapScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckSwapScene::InternalSwap(ReqAckSwapScene* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transfer_type_, other->transfer_type_);
  swap(scene_id_, other->scene_id_);
  swap(line_id_, other->line_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckSwapScene::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckHomeScene::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckHomeScene::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckHomeScene::ReqAckHomeScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckHomeScene.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckHomeScene)
}
ReqAckHomeScene::ReqAckHomeScene(const ReqAckHomeScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckHomeScene)
}

void ReqAckHomeScene::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqAckHomeScene::~ReqAckHomeScene() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckHomeScene)
  SharedDtor();
}

void ReqAckHomeScene::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAckHomeScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckHomeScene::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckHomeScene& ReqAckHomeScene::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckHomeScene.base);
  return *internal_default_instance();
}


void ReqAckHomeScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckHomeScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReqAckHomeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckHomeScene)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckHomeScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckHomeScene)
  return false;
#undef DO_
}

void ReqAckHomeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckHomeScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckHomeScene)
}

::google::protobuf::uint8* ReqAckHomeScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckHomeScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckHomeScene)
  return target;
}

size_t ReqAckHomeScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckHomeScene)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckHomeScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckHomeScene)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckHomeScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckHomeScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckHomeScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckHomeScene)
    MergeFrom(*source);
  }
}

void ReqAckHomeScene::MergeFrom(const ReqAckHomeScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckHomeScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ReqAckHomeScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckHomeScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckHomeScene::CopyFrom(const ReqAckHomeScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckHomeScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckHomeScene::IsInitialized() const {
  return true;
}

void ReqAckHomeScene::Swap(ReqAckHomeScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckHomeScene::InternalSwap(ReqAckHomeScene* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckHomeScene::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ItemStruct::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemStruct::kItemIdFieldNumber;
const int ItemStruct::kItemCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemStruct::ItemStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ItemStruct.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ItemStruct)
}
ItemStruct::ItemStruct(const ItemStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.item_id().size() > 0) {
    item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ItemStruct)
}

void ItemStruct::SharedCtor() {
  item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0;
}

ItemStruct::~ItemStruct() {
  // @@protoc_insertion_point(destructor:NFMsg.ItemStruct)
  SharedDtor();
}

void ItemStruct::SharedDtor() {
  item_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ItemStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ItemStruct::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ItemStruct& ItemStruct::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ItemStruct.base);
  return *internal_default_instance();
}


void ItemStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ItemStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0;
  _internal_metadata_.Clear();
}

bool ItemStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ItemStruct)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_item_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 item_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ItemStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ItemStruct)
  return false;
#undef DO_
}

void ItemStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ItemStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes item_id = 1;
  if (this->item_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->item_id(), output);
  }

  // int32 item_count = 2;
  if (this->item_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ItemStruct)
}

::google::protobuf::uint8* ItemStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ItemStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes item_id = 1;
  if (this->item_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->item_id(), target);
  }

  // int32 item_count = 2;
  if (this->item_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ItemStruct)
  return target;
}

size_t ItemStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ItemStruct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes item_id = 1;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->item_id());
  }

  // int32 item_count = 2;
  if (this->item_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ItemStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ItemStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ItemStruct)
    MergeFrom(*source);
  }
}

void ItemStruct::MergeFrom(const ItemStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ItemStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id().size() > 0) {

    item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  if (from.item_count() != 0) {
    set_item_count(from.item_count());
  }
}

void ItemStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ItemStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemStruct::CopyFrom(const ItemStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ItemStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemStruct::IsInitialized() const {
  return true;
}

void ItemStruct::Swap(ItemStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemStruct::InternalSwap(ItemStruct* other) {
  using std::swap;
  item_id_.Swap(&other->item_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_count_, other->item_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ItemStruct::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CurrencyStruct::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrencyStruct::kCurrencyTypeFieldNumber;
const int CurrencyStruct::kCurrencyCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrencyStruct::CurrencyStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_CurrencyStruct.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.CurrencyStruct)
}
CurrencyStruct::CurrencyStruct(const CurrencyStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currency_type_, &from.currency_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_count_) -
    reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.CurrencyStruct)
}

void CurrencyStruct::SharedCtor() {
  ::memset(&currency_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_count_) -
      reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
}

CurrencyStruct::~CurrencyStruct() {
  // @@protoc_insertion_point(destructor:NFMsg.CurrencyStruct)
  SharedDtor();
}

void CurrencyStruct::SharedDtor() {
}

void CurrencyStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CurrencyStruct::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurrencyStruct& CurrencyStruct::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_CurrencyStruct.base);
  return *internal_default_instance();
}


void CurrencyStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.CurrencyStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&currency_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_count_) -
      reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
  _internal_metadata_.Clear();
}

bool CurrencyStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.CurrencyStruct)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 currency_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currency_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.CurrencyStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.CurrencyStruct)
  return false;
#undef DO_
}

void CurrencyStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.CurrencyStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 currency_type = 1;
  if (this->currency_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currency_type(), output);
  }

  // int32 currency_count = 2;
  if (this->currency_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currency_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.CurrencyStruct)
}

::google::protobuf::uint8* CurrencyStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.CurrencyStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 currency_type = 1;
  if (this->currency_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currency_type(), target);
  }

  // int32 currency_count = 2;
  if (this->currency_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currency_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.CurrencyStruct)
  return target;
}

size_t CurrencyStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.CurrencyStruct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 currency_type = 1;
  if (this->currency_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_type());
  }

  // int32 currency_count = 2;
  if (this->currency_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrencyStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.CurrencyStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrencyStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.CurrencyStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.CurrencyStruct)
    MergeFrom(*source);
  }
}

void CurrencyStruct::MergeFrom(const CurrencyStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.CurrencyStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.currency_count() != 0) {
    set_currency_count(from.currency_count());
  }
}

void CurrencyStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.CurrencyStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyStruct::CopyFrom(const CurrencyStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.CurrencyStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyStruct::IsInitialized() const {
  return true;
}

void CurrencyStruct::Swap(CurrencyStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrencyStruct::InternalSwap(CurrencyStruct* other) {
  using std::swap;
  swap(currency_type_, other->currency_type_);
  swap(currency_count_, other->currency_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CurrencyStruct::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckReliveHero::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckReliveHero_default_instance_._instance.get_mutable()->hero_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckReliveHero::clear_hero_id() {
  if (GetArenaNoVirtual() == NULL && hero_id_ != NULL) {
    delete hero_id_;
  }
  hero_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckReliveHero::kDiamondFieldNumber;
const int ReqAckReliveHero::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckReliveHero::ReqAckReliveHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckReliveHero.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckReliveHero)
}
ReqAckReliveHero::ReqAckReliveHero(const ReqAckReliveHero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hero_id()) {
    hero_id_ = new ::NFMsg::Ident(*from.hero_id_);
  } else {
    hero_id_ = NULL;
  }
  diamond_ = from.diamond_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckReliveHero)
}

void ReqAckReliveHero::SharedCtor() {
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diamond_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(diamond_));
}

ReqAckReliveHero::~ReqAckReliveHero() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckReliveHero)
  SharedDtor();
}

void ReqAckReliveHero::SharedDtor() {
  if (this != internal_default_instance()) delete hero_id_;
}

void ReqAckReliveHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckReliveHero::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckReliveHero& ReqAckReliveHero::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckReliveHero.base);
  return *internal_default_instance();
}


void ReqAckReliveHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckReliveHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hero_id_ != NULL) {
    delete hero_id_;
  }
  hero_id_ = NULL;
  diamond_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckReliveHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckReliveHero)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 diamond = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hero_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckReliveHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckReliveHero)
  return false;
#undef DO_
}

void ReqAckReliveHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckReliveHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 diamond = 1;
  if (this->diamond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->diamond(), output);
  }

  // .NFMsg.Ident hero_id = 2;
  if (this->has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_hero_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckReliveHero)
}

::google::protobuf::uint8* ReqAckReliveHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckReliveHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 diamond = 1;
  if (this->diamond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->diamond(), target);
  }

  // .NFMsg.Ident hero_id = 2;
  if (this->has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_hero_id(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckReliveHero)
  return target;
}

size_t ReqAckReliveHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckReliveHero)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident hero_id = 2;
  if (this->has_hero_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hero_id_);
  }

  // int32 diamond = 1;
  if (this->diamond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckReliveHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckReliveHero)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckReliveHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckReliveHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckReliveHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckReliveHero)
    MergeFrom(*source);
  }
}

void ReqAckReliveHero::MergeFrom(const ReqAckReliveHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckReliveHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hero_id()) {
    mutable_hero_id()->::NFMsg::Ident::MergeFrom(from.hero_id());
  }
  if (from.diamond() != 0) {
    set_diamond(from.diamond());
  }
}

void ReqAckReliveHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckReliveHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckReliveHero::CopyFrom(const ReqAckReliveHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckReliveHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckReliveHero::IsInitialized() const {
  return true;
}

void ReqAckReliveHero::Swap(ReqAckReliveHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckReliveHero::InternalSwap(ReqAckReliveHero* other) {
  using std::swap;
  swap(hero_id_, other->hero_id_);
  swap(diamond_, other->diamond_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckReliveHero::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqPickDropItem::InitAsDefaultInstance() {
  ::NFMsg::_ReqPickDropItem_default_instance_._instance.get_mutable()->item_guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqPickDropItem::clear_item_guid() {
  if (GetArenaNoVirtual() == NULL && item_guid_ != NULL) {
    delete item_guid_;
  }
  item_guid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqPickDropItem::kItemGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqPickDropItem::ReqPickDropItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqPickDropItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqPickDropItem)
}
ReqPickDropItem::ReqPickDropItem(const ReqPickDropItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item_guid()) {
    item_guid_ = new ::NFMsg::Ident(*from.item_guid_);
  } else {
    item_guid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqPickDropItem)
}

void ReqPickDropItem::SharedCtor() {
  item_guid_ = NULL;
}

ReqPickDropItem::~ReqPickDropItem() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqPickDropItem)
  SharedDtor();
}

void ReqPickDropItem::SharedDtor() {
  if (this != internal_default_instance()) delete item_guid_;
}

void ReqPickDropItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqPickDropItem::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqPickDropItem& ReqPickDropItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqPickDropItem.base);
  return *internal_default_instance();
}


void ReqPickDropItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqPickDropItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && item_guid_ != NULL) {
    delete item_guid_;
  }
  item_guid_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqPickDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqPickDropItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident item_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqPickDropItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqPickDropItem)
  return false;
#undef DO_
}

void ReqPickDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqPickDropItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_item_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqPickDropItem)
}

::google::protobuf::uint8* ReqPickDropItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqPickDropItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_item_guid(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqPickDropItem)
  return target;
}

size_t ReqPickDropItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqPickDropItem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_guid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqPickDropItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqPickDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqPickDropItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqPickDropItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqPickDropItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqPickDropItem)
    MergeFrom(*source);
  }
}

void ReqPickDropItem::MergeFrom(const ReqPickDropItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqPickDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_guid()) {
    mutable_item_guid()->::NFMsg::Ident::MergeFrom(from.item_guid());
  }
}

void ReqPickDropItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqPickDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPickDropItem::CopyFrom(const ReqPickDropItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqPickDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPickDropItem::IsInitialized() const {
  return true;
}

void ReqPickDropItem::Swap(ReqPickDropItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqPickDropItem::InternalSwap(ReqPickDropItem* other) {
  using std::swap;
  swap(item_guid_, other->item_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqPickDropItem::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAcceptTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAcceptTask::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAcceptTask::ReqAcceptTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAcceptTask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAcceptTask)
}
ReqAcceptTask::ReqAcceptTask(const ReqAcceptTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.task_id().size() > 0) {
    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAcceptTask)
}

void ReqAcceptTask::SharedCtor() {
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqAcceptTask::~ReqAcceptTask() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAcceptTask)
  SharedDtor();
}

void ReqAcceptTask::SharedDtor() {
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAcceptTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAcceptTask::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAcceptTask& ReqAcceptTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAcceptTask.base);
  return *internal_default_instance();
}


void ReqAcceptTask::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAcceptTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReqAcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAcceptTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAcceptTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAcceptTask)
  return false;
#undef DO_
}

void ReqAcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAcceptTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (this->task_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->task_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAcceptTask)
}

::google::protobuf::uint8* ReqAcceptTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAcceptTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (this->task_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAcceptTask)
  return target;
}

size_t ReqAcceptTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAcceptTask)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes task_id = 1;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAcceptTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAcceptTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAcceptTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAcceptTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAcceptTask)
    MergeFrom(*source);
  }
}

void ReqAcceptTask::MergeFrom(const ReqAcceptTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAcceptTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
}

void ReqAcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAcceptTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAcceptTask::CopyFrom(const ReqAcceptTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAcceptTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAcceptTask::IsInitialized() const {
  return true;
}

void ReqAcceptTask::Swap(ReqAcceptTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAcceptTask::InternalSwap(ReqAcceptTask* other) {
  using std::swap;
  task_id_.Swap(&other->task_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAcceptTask::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqCompeleteTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCompeleteTask::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCompeleteTask::ReqCompeleteTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqCompeleteTask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqCompeleteTask)
}
ReqCompeleteTask::ReqCompeleteTask(const ReqCompeleteTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.task_id().size() > 0) {
    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqCompeleteTask)
}

void ReqCompeleteTask::SharedCtor() {
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqCompeleteTask::~ReqCompeleteTask() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqCompeleteTask)
  SharedDtor();
}

void ReqCompeleteTask::SharedDtor() {
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqCompeleteTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqCompeleteTask::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqCompeleteTask& ReqCompeleteTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqCompeleteTask.base);
  return *internal_default_instance();
}


void ReqCompeleteTask::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqCompeleteTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReqCompeleteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqCompeleteTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqCompeleteTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqCompeleteTask)
  return false;
#undef DO_
}

void ReqCompeleteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqCompeleteTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (this->task_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->task_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqCompeleteTask)
}

::google::protobuf::uint8* ReqCompeleteTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqCompeleteTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (this->task_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqCompeleteTask)
  return target;
}

size_t ReqCompeleteTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqCompeleteTask)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes task_id = 1;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCompeleteTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqCompeleteTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCompeleteTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCompeleteTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqCompeleteTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqCompeleteTask)
    MergeFrom(*source);
  }
}

void ReqCompeleteTask::MergeFrom(const ReqCompeleteTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqCompeleteTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
}

void ReqCompeleteTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqCompeleteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCompeleteTask::CopyFrom(const ReqCompeleteTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqCompeleteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCompeleteTask::IsInitialized() const {
  return true;
}

void ReqCompeleteTask::Swap(ReqCompeleteTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCompeleteTask::InternalSwap(ReqCompeleteTask* other) {
  using std::swap;
  task_id_.Swap(&other->task_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqCompeleteTask::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAddSceneBuilding::InitAsDefaultInstance() {
  ::NFMsg::_ReqAddSceneBuilding_default_instance_._instance.get_mutable()->pos_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  ::NFMsg::_ReqAddSceneBuilding_default_instance_._instance.get_mutable()->guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAddSceneBuilding_default_instance_._instance.get_mutable()->master_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAddSceneBuilding::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
void ReqAddSceneBuilding::clear_guid() {
  if (GetArenaNoVirtual() == NULL && guid_ != NULL) {
    delete guid_;
  }
  guid_ = NULL;
}
void ReqAddSceneBuilding::clear_master() {
  if (GetArenaNoVirtual() == NULL && master_ != NULL) {
    delete master_;
  }
  master_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAddSceneBuilding::kPosFieldNumber;
const int ReqAddSceneBuilding::kGuidFieldNumber;
const int ReqAddSceneBuilding::kMasterFieldNumber;
const int ReqAddSceneBuilding::kConfigIdFieldNumber;
const int ReqAddSceneBuilding::kSceneIdFieldNumber;
const int ReqAddSceneBuilding::kMasterNameFieldNumber;
const int ReqAddSceneBuilding::kIsHomeSceneFieldNumber;
const int ReqAddSceneBuilding::kIsBuildingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAddSceneBuilding::ReqAddSceneBuilding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAddSceneBuilding.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAddSceneBuilding)
}
ReqAddSceneBuilding::ReqAddSceneBuilding(const ReqAddSceneBuilding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config_id().size() > 0) {
    config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  master_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.master_name().size() > 0) {
    master_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_name_);
  }
  if (from.has_pos()) {
    pos_ = new ::NFMsg::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_guid()) {
    guid_ = new ::NFMsg::Ident(*from.guid_);
  } else {
    guid_ = NULL;
  }
  if (from.has_master()) {
    master_ = new ::NFMsg::Ident(*from.master_);
  } else {
    master_ = NULL;
  }
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_building_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(is_building_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAddSceneBuilding)
}

void ReqAddSceneBuilding::SharedCtor() {
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_building_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(is_building_));
}

ReqAddSceneBuilding::~ReqAddSceneBuilding() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAddSceneBuilding)
  SharedDtor();
}

void ReqAddSceneBuilding::SharedDtor() {
  config_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete guid_;
  if (this != internal_default_instance()) delete master_;
}

void ReqAddSceneBuilding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAddSceneBuilding::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAddSceneBuilding& ReqAddSceneBuilding::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAddSceneBuilding.base);
  return *internal_default_instance();
}


void ReqAddSceneBuilding::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAddSceneBuilding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && guid_ != NULL) {
    delete guid_;
  }
  guid_ = NULL;
  if (GetArenaNoVirtual() == NULL && master_ != NULL) {
    delete master_;
  }
  master_ = NULL;
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_building_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(is_building_));
  _internal_metadata_.Clear();
}

bool ReqAddSceneBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAddSceneBuilding)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Vector3 pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident master = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_master()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes config_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scene_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes master_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_master_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_home_scene = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_home_scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_building = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_building_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAddSceneBuilding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAddSceneBuilding)
  return false;
#undef DO_
}

void ReqAddSceneBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAddSceneBuilding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Vector3 pos = 1;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pos(), output);
  }

  // .NFMsg.Ident guid = 2;
  if (this->has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_guid(), output);
  }

  // .NFMsg.Ident master = 3;
  if (this->has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_master(), output);
  }

  // bytes config_id = 4;
  if (this->config_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->config_id(), output);
  }

  // int32 scene_id = 5;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scene_id(), output);
  }

  // bytes master_name = 6;
  if (this->master_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->master_name(), output);
  }

  // int32 is_home_scene = 7;
  if (this->is_home_scene() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_home_scene(), output);
  }

  // int32 is_building = 8;
  if (this->is_building() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->is_building(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAddSceneBuilding)
}

::google::protobuf::uint8* ReqAddSceneBuilding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAddSceneBuilding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Vector3 pos = 1;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pos(), deterministic, target);
  }

  // .NFMsg.Ident guid = 2;
  if (this->has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_guid(), deterministic, target);
  }

  // .NFMsg.Ident master = 3;
  if (this->has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_master(), deterministic, target);
  }

  // bytes config_id = 4;
  if (this->config_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->config_id(), target);
  }

  // int32 scene_id = 5;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scene_id(), target);
  }

  // bytes master_name = 6;
  if (this->master_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->master_name(), target);
  }

  // int32 is_home_scene = 7;
  if (this->is_home_scene() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_home_scene(), target);
  }

  // int32 is_building = 8;
  if (this->is_building() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->is_building(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAddSceneBuilding)
  return target;
}

size_t ReqAddSceneBuilding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAddSceneBuilding)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes config_id = 4;
  if (this->config_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->config_id());
  }

  // bytes master_name = 6;
  if (this->master_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->master_name());
  }

  // .NFMsg.Vector3 pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .NFMsg.Ident guid = 2;
  if (this->has_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guid_);
  }

  // .NFMsg.Ident master = 3;
  if (this->has_master()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *master_);
  }

  // int32 scene_id = 5;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  // int32 is_home_scene = 7;
  if (this->is_home_scene() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_home_scene());
  }

  // int32 is_building = 8;
  if (this->is_building() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_building());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAddSceneBuilding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAddSceneBuilding)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAddSceneBuilding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAddSceneBuilding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAddSceneBuilding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAddSceneBuilding)
    MergeFrom(*source);
  }
}

void ReqAddSceneBuilding::MergeFrom(const ReqAddSceneBuilding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAddSceneBuilding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_id().size() > 0) {

    config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  if (from.master_name().size() > 0) {

    master_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_name_);
  }
  if (from.has_pos()) {
    mutable_pos()->::NFMsg::Vector3::MergeFrom(from.pos());
  }
  if (from.has_guid()) {
    mutable_guid()->::NFMsg::Ident::MergeFrom(from.guid());
  }
  if (from.has_master()) {
    mutable_master()->::NFMsg::Ident::MergeFrom(from.master());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.is_home_scene() != 0) {
    set_is_home_scene(from.is_home_scene());
  }
  if (from.is_building() != 0) {
    set_is_building(from.is_building());
  }
}

void ReqAddSceneBuilding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAddSceneBuilding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAddSceneBuilding::CopyFrom(const ReqAddSceneBuilding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAddSceneBuilding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAddSceneBuilding::IsInitialized() const {
  return true;
}

void ReqAddSceneBuilding::Swap(ReqAddSceneBuilding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAddSceneBuilding::InternalSwap(ReqAddSceneBuilding* other) {
  using std::swap;
  config_id_.Swap(&other->config_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  master_name_.Swap(&other->master_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(guid_, other->guid_);
  swap(master_, other->master_);
  swap(scene_id_, other->scene_id_);
  swap(is_home_scene_, other->is_home_scene_);
  swap(is_building_, other->is_building_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAddSceneBuilding::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSceneBuildings::InitAsDefaultInstance() {
  ::NFMsg::_ReqSceneBuildings_default_instance_._instance.get_mutable()->pos_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
void ReqSceneBuildings::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSceneBuildings::kSceneIdFieldNumber;
const int ReqSceneBuildings::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSceneBuildings::ReqSceneBuildings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSceneBuildings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSceneBuildings)
}
ReqSceneBuildings::ReqSceneBuildings(const ReqSceneBuildings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::NFMsg::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSceneBuildings)
}

void ReqSceneBuildings::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(scene_id_));
}

ReqSceneBuildings::~ReqSceneBuildings() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSceneBuildings)
  SharedDtor();
}

void ReqSceneBuildings::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void ReqSceneBuildings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSceneBuildings::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSceneBuildings& ReqSceneBuildings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSceneBuildings.base);
  return *internal_default_instance();
}


void ReqSceneBuildings::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSceneBuildings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  scene_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReqSceneBuildings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSceneBuildings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 scene_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Vector3 pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSceneBuildings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSceneBuildings)
  return false;
#undef DO_
}

void ReqSceneBuildings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSceneBuildings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene_id = 1;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }

  // .NFMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pos(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSceneBuildings)
}

::google::protobuf::uint8* ReqSceneBuildings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSceneBuildings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene_id = 1;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }

  // .NFMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pos(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSceneBuildings)
  return target;
}

size_t ReqSceneBuildings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSceneBuildings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSceneBuildings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSceneBuildings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSceneBuildings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSceneBuildings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSceneBuildings)
    MergeFrom(*source);
  }
}

void ReqSceneBuildings::MergeFrom(const ReqSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::NFMsg::Vector3::MergeFrom(from.pos());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void ReqSceneBuildings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSceneBuildings::CopyFrom(const ReqSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSceneBuildings::IsInitialized() const {
  return true;
}

void ReqSceneBuildings::Swap(ReqSceneBuildings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSceneBuildings::InternalSwap(ReqSceneBuildings* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(scene_id_, other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSceneBuildings::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSceneBuildings::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSceneBuildings::kBuildingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSceneBuildings::AckSceneBuildings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckSceneBuildings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSceneBuildings)
}
AckSceneBuildings::AckSceneBuildings(const AckSceneBuildings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSceneBuildings)
}

void AckSceneBuildings::SharedCtor() {
}

AckSceneBuildings::~AckSceneBuildings() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSceneBuildings)
  SharedDtor();
}

void AckSceneBuildings::SharedDtor() {
}

void AckSceneBuildings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckSceneBuildings::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSceneBuildings& AckSceneBuildings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckSceneBuildings.base);
  return *internal_default_instance();
}


void AckSceneBuildings::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSceneBuildings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildings_.Clear();
  _internal_metadata_.Clear();
}

bool AckSceneBuildings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckSceneBuildings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.ReqAddSceneBuilding buildings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckSceneBuildings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckSceneBuildings)
  return false;
#undef DO_
}

void AckSceneBuildings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckSceneBuildings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->buildings(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckSceneBuildings)
}

::google::protobuf::uint8* AckSceneBuildings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSceneBuildings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->buildings(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSceneBuildings)
  return target;
}

size_t AckSceneBuildings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSceneBuildings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.ReqAddSceneBuilding buildings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->buildings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buildings(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSceneBuildings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSceneBuildings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSceneBuildings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSceneBuildings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSceneBuildings)
    MergeFrom(*source);
  }
}

void AckSceneBuildings::MergeFrom(const AckSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buildings_.MergeFrom(from.buildings_);
}

void AckSceneBuildings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSceneBuildings::CopyFrom(const AckSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSceneBuildings::IsInitialized() const {
  return true;
}

void AckSceneBuildings::Swap(AckSceneBuildings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSceneBuildings::InternalSwap(AckSceneBuildings* other) {
  using std::swap;
  CastToBase(&buildings_)->InternalSwap(CastToBase(&other->buildings_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckSceneBuildings::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqStoreSceneBuildings::InitAsDefaultInstance() {
  ::NFMsg::_ReqStoreSceneBuildings_default_instance_._instance.get_mutable()->guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqStoreSceneBuildings::clear_guid() {
  if (GetArenaNoVirtual() == NULL && guid_ != NULL) {
    delete guid_;
  }
  guid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqStoreSceneBuildings::kGuidFieldNumber;
const int ReqStoreSceneBuildings::kHomeSceneIdFieldNumber;
const int ReqStoreSceneBuildings::kBuildingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqStoreSceneBuildings::ReqStoreSceneBuildings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqStoreSceneBuildings.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqStoreSceneBuildings)
}
ReqStoreSceneBuildings::ReqStoreSceneBuildings(const ReqStoreSceneBuildings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_guid()) {
    guid_ = new ::NFMsg::Ident(*from.guid_);
  } else {
    guid_ = NULL;
  }
  home_scene_id_ = from.home_scene_id_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqStoreSceneBuildings)
}

void ReqStoreSceneBuildings::SharedCtor() {
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&home_scene_id_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(home_scene_id_));
}

ReqStoreSceneBuildings::~ReqStoreSceneBuildings() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqStoreSceneBuildings)
  SharedDtor();
}

void ReqStoreSceneBuildings::SharedDtor() {
  if (this != internal_default_instance()) delete guid_;
}

void ReqStoreSceneBuildings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqStoreSceneBuildings::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqStoreSceneBuildings& ReqStoreSceneBuildings::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqStoreSceneBuildings.base);
  return *internal_default_instance();
}


void ReqStoreSceneBuildings::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqStoreSceneBuildings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildings_.Clear();
  if (GetArenaNoVirtual() == NULL && guid_ != NULL) {
    delete guid_;
  }
  guid_ = NULL;
  home_scene_id_ = 0;
  _internal_metadata_.Clear();
}

bool ReqStoreSceneBuildings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqStoreSceneBuildings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 home_scene_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &home_scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.ReqAddSceneBuilding buildings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqStoreSceneBuildings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqStoreSceneBuildings)
  return false;
#undef DO_
}

void ReqStoreSceneBuildings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqStoreSceneBuildings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident guid = 1;
  if (this->has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_guid(), output);
  }

  // int32 home_scene_id = 2;
  if (this->home_scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->home_scene_id(), output);
  }

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->buildings(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqStoreSceneBuildings)
}

::google::protobuf::uint8* ReqStoreSceneBuildings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqStoreSceneBuildings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident guid = 1;
  if (this->has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_guid(), deterministic, target);
  }

  // int32 home_scene_id = 2;
  if (this->home_scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->home_scene_id(), target);
  }

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->buildings(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqStoreSceneBuildings)
  return target;
}

size_t ReqStoreSceneBuildings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqStoreSceneBuildings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.ReqAddSceneBuilding buildings = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->buildings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buildings(static_cast<int>(i)));
    }
  }

  // .NFMsg.Ident guid = 1;
  if (this->has_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guid_);
  }

  // int32 home_scene_id = 2;
  if (this->home_scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->home_scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqStoreSceneBuildings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqStoreSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqStoreSceneBuildings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqStoreSceneBuildings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqStoreSceneBuildings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqStoreSceneBuildings)
    MergeFrom(*source);
  }
}

void ReqStoreSceneBuildings::MergeFrom(const ReqStoreSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqStoreSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buildings_.MergeFrom(from.buildings_);
  if (from.has_guid()) {
    mutable_guid()->::NFMsg::Ident::MergeFrom(from.guid());
  }
  if (from.home_scene_id() != 0) {
    set_home_scene_id(from.home_scene_id());
  }
}

void ReqStoreSceneBuildings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqStoreSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStoreSceneBuildings::CopyFrom(const ReqStoreSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqStoreSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStoreSceneBuildings::IsInitialized() const {
  return true;
}

void ReqStoreSceneBuildings::Swap(ReqStoreSceneBuildings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqStoreSceneBuildings::InternalSwap(ReqStoreSceneBuildings* other) {
  using std::swap;
  CastToBase(&buildings_)->InternalSwap(CastToBase(&other->buildings_));
  swap(guid_, other->guid_);
  swap(home_scene_id_, other->home_scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqStoreSceneBuildings::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckCreateClan::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckCreateClan_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckCreateClan::clear_clan_id() {
  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckCreateClan::kClanIdFieldNumber;
const int ReqAckCreateClan::kClanNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckCreateClan::ReqAckCreateClan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckCreateClan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckCreateClan)
}
ReqAckCreateClan::ReqAckCreateClan(const ReqAckCreateClan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clan_name().size() > 0) {
    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  if (from.has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckCreateClan)
}

void ReqAckCreateClan::SharedCtor() {
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_id_ = NULL;
}

ReqAckCreateClan::~ReqAckCreateClan() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckCreateClan)
  SharedDtor();
}

void ReqAckCreateClan::SharedDtor() {
  clan_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clan_id_;
}

void ReqAckCreateClan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckCreateClan::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckCreateClan& ReqAckCreateClan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckCreateClan.base);
  return *internal_default_instance();
}


void ReqAckCreateClan::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckCreateClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clan_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckCreateClan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckCreateClan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident clan_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clan_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes clan_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clan_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckCreateClan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckCreateClan)
  return false;
#undef DO_
}

void ReqAckCreateClan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckCreateClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_clan_id(), output);
  }

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->clan_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckCreateClan)
}

::google::protobuf::uint8* ReqAckCreateClan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckCreateClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_clan_id(), deterministic, target);
  }

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->clan_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckCreateClan)
  return target;
}

size_t ReqAckCreateClan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckCreateClan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clan_name());
  }

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckCreateClan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckCreateClan)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckCreateClan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckCreateClan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckCreateClan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckCreateClan)
    MergeFrom(*source);
  }
}

void ReqAckCreateClan::MergeFrom(const ReqAckCreateClan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckCreateClan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clan_name().size() > 0) {

    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  if (from.has_clan_id()) {
    mutable_clan_id()->::NFMsg::Ident::MergeFrom(from.clan_id());
  }
}

void ReqAckCreateClan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckCreateClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateClan::CopyFrom(const ReqAckCreateClan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckCreateClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateClan::IsInitialized() const {
  return true;
}

void ReqAckCreateClan::Swap(ReqAckCreateClan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckCreateClan::InternalSwap(ReqAckCreateClan* other) {
  using std::swap;
  clan_name_.Swap(&other->clan_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clan_id_, other->clan_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckCreateClan::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSearchClan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSearchClan::kClanNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSearchClan::ReqSearchClan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSearchClan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSearchClan)
}
ReqSearchClan::ReqSearchClan(const ReqSearchClan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clan_name().size() > 0) {
    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSearchClan)
}

void ReqSearchClan::SharedCtor() {
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqSearchClan::~ReqSearchClan() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSearchClan)
  SharedDtor();
}

void ReqSearchClan::SharedDtor() {
  clan_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqSearchClan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSearchClan::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSearchClan& ReqSearchClan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSearchClan.base);
  return *internal_default_instance();
}


void ReqSearchClan::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSearchClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clan_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ReqSearchClan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSearchClan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes clan_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clan_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSearchClan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSearchClan)
  return false;
#undef DO_
}

void ReqSearchClan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSearchClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes clan_name = 1;
  if (this->clan_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->clan_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSearchClan)
}

::google::protobuf::uint8* ReqSearchClan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSearchClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes clan_name = 1;
  if (this->clan_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->clan_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSearchClan)
  return target;
}

size_t ReqSearchClan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSearchClan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes clan_name = 1;
  if (this->clan_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clan_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSearchClan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSearchClan)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSearchClan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSearchClan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSearchClan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSearchClan)
    MergeFrom(*source);
  }
}

void ReqSearchClan::MergeFrom(const ReqSearchClan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSearchClan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clan_name().size() > 0) {

    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
}

void ReqSearchClan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSearchClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSearchClan::CopyFrom(const ReqSearchClan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSearchClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSearchClan::IsInitialized() const {
  return true;
}

void ReqSearchClan::Swap(ReqSearchClan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSearchClan::InternalSwap(ReqSearchClan* other) {
  using std::swap;
  clan_name_.Swap(&other->clan_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSearchClan::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSearchClan_SearchClanObject::InitAsDefaultInstance() {
  ::NFMsg::_AckSearchClan_SearchClanObject_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void AckSearchClan_SearchClanObject::clear_clan_id() {
  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSearchClan_SearchClanObject::kClanIDFieldNumber;
const int AckSearchClan_SearchClanObject::kClanNameFieldNumber;
const int AckSearchClan_SearchClanObject::kClanIconFieldNumber;
const int AckSearchClan_SearchClanObject::kClanMemberCountFieldNumber;
const int AckSearchClan_SearchClanObject::kClanMemberMaxCountFieldNumber;
const int AckSearchClan_SearchClanObject::kClanHonorFieldNumber;
const int AckSearchClan_SearchClanObject::kClanRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSearchClan_SearchClanObject::AckSearchClan_SearchClanObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckSearchClan_SearchClanObject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSearchClan.SearchClanObject)
}
AckSearchClan_SearchClanObject::AckSearchClan_SearchClanObject(const AckSearchClan_SearchClanObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clan_name().size() > 0) {
    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  clan_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clan_icon().size() > 0) {
    clan_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_icon_);
  }
  if (from.has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = NULL;
  }
  ::memcpy(&clan_member_count_, &from.clan_member_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&clan_rank_) -
    reinterpret_cast<char*>(&clan_member_count_)) + sizeof(clan_rank_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSearchClan.SearchClanObject)
}

void AckSearchClan_SearchClanObject::SharedCtor() {
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clan_rank_) -
      reinterpret_cast<char*>(&clan_id_)) + sizeof(clan_rank_));
}

AckSearchClan_SearchClanObject::~AckSearchClan_SearchClanObject() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSearchClan.SearchClanObject)
  SharedDtor();
}

void AckSearchClan_SearchClanObject::SharedDtor() {
  clan_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clan_id_;
}

void AckSearchClan_SearchClanObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckSearchClan_SearchClanObject::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSearchClan_SearchClanObject& AckSearchClan_SearchClanObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckSearchClan_SearchClanObject.base);
  return *internal_default_instance();
}


void AckSearchClan_SearchClanObject::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSearchClan.SearchClanObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clan_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
  ::memset(&clan_member_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clan_rank_) -
      reinterpret_cast<char*>(&clan_member_count_)) + sizeof(clan_rank_));
  _internal_metadata_.Clear();
}

bool AckSearchClan_SearchClanObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckSearchClan.SearchClanObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident clan_ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clan_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes clan_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clan_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes clan_icon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clan_icon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 clan_member_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 clan_member_max_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_member_max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 clan_honor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_honor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 clan_rank = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckSearchClan.SearchClanObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckSearchClan.SearchClanObject)
  return false;
#undef DO_
}

void AckSearchClan_SearchClanObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckSearchClan.SearchClanObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_ID = 1;
  if (this->has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_clan_id(), output);
  }

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->clan_name(), output);
  }

  // bytes clan_icon = 3;
  if (this->clan_icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->clan_icon(), output);
  }

  // int32 clan_member_count = 4;
  if (this->clan_member_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clan_member_count(), output);
  }

  // int32 clan_member_max_count = 5;
  if (this->clan_member_max_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clan_member_max_count(), output);
  }

  // int32 clan_honor = 6;
  if (this->clan_honor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clan_honor(), output);
  }

  // int32 clan_rank = 7;
  if (this->clan_rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->clan_rank(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckSearchClan.SearchClanObject)
}

::google::protobuf::uint8* AckSearchClan_SearchClanObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSearchClan.SearchClanObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_ID = 1;
  if (this->has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_clan_id(), deterministic, target);
  }

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->clan_name(), target);
  }

  // bytes clan_icon = 3;
  if (this->clan_icon().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->clan_icon(), target);
  }

  // int32 clan_member_count = 4;
  if (this->clan_member_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clan_member_count(), target);
  }

  // int32 clan_member_max_count = 5;
  if (this->clan_member_max_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clan_member_max_count(), target);
  }

  // int32 clan_honor = 6;
  if (this->clan_honor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clan_honor(), target);
  }

  // int32 clan_rank = 7;
  if (this->clan_rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->clan_rank(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSearchClan.SearchClanObject)
  return target;
}

size_t AckSearchClan_SearchClanObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSearchClan.SearchClanObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clan_name());
  }

  // bytes clan_icon = 3;
  if (this->clan_icon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clan_icon());
  }

  // .NFMsg.Ident clan_ID = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  // int32 clan_member_count = 4;
  if (this->clan_member_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clan_member_count());
  }

  // int32 clan_member_max_count = 5;
  if (this->clan_member_max_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clan_member_max_count());
  }

  // int32 clan_honor = 6;
  if (this->clan_honor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clan_honor());
  }

  // int32 clan_rank = 7;
  if (this->clan_rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clan_rank());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSearchClan_SearchClanObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSearchClan.SearchClanObject)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchClan_SearchClanObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSearchClan_SearchClanObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSearchClan.SearchClanObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSearchClan.SearchClanObject)
    MergeFrom(*source);
  }
}

void AckSearchClan_SearchClanObject::MergeFrom(const AckSearchClan_SearchClanObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSearchClan.SearchClanObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clan_name().size() > 0) {

    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  if (from.clan_icon().size() > 0) {

    clan_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_icon_);
  }
  if (from.has_clan_id()) {
    mutable_clan_id()->::NFMsg::Ident::MergeFrom(from.clan_id());
  }
  if (from.clan_member_count() != 0) {
    set_clan_member_count(from.clan_member_count());
  }
  if (from.clan_member_max_count() != 0) {
    set_clan_member_max_count(from.clan_member_max_count());
  }
  if (from.clan_honor() != 0) {
    set_clan_honor(from.clan_honor());
  }
  if (from.clan_rank() != 0) {
    set_clan_rank(from.clan_rank());
  }
}

void AckSearchClan_SearchClanObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSearchClan.SearchClanObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchClan_SearchClanObject::CopyFrom(const AckSearchClan_SearchClanObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSearchClan.SearchClanObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchClan_SearchClanObject::IsInitialized() const {
  return true;
}

void AckSearchClan_SearchClanObject::Swap(AckSearchClan_SearchClanObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSearchClan_SearchClanObject::InternalSwap(AckSearchClan_SearchClanObject* other) {
  using std::swap;
  clan_name_.Swap(&other->clan_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clan_icon_.Swap(&other->clan_icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clan_id_, other->clan_id_);
  swap(clan_member_count_, other->clan_member_count_);
  swap(clan_member_max_count_, other->clan_member_max_count_);
  swap(clan_honor_, other->clan_honor_);
  swap(clan_rank_, other->clan_rank_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckSearchClan_SearchClanObject::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSearchClan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSearchClan::kClanListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSearchClan::AckSearchClan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckSearchClan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSearchClan)
}
AckSearchClan::AckSearchClan(const AckSearchClan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      clan_list_(from.clan_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSearchClan)
}

void AckSearchClan::SharedCtor() {
}

AckSearchClan::~AckSearchClan() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSearchClan)
  SharedDtor();
}

void AckSearchClan::SharedDtor() {
}

void AckSearchClan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckSearchClan::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSearchClan& AckSearchClan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckSearchClan.base);
  return *internal_default_instance();
}


void AckSearchClan::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSearchClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clan_list_.Clear();
  _internal_metadata_.Clear();
}

bool AckSearchClan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckSearchClan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.AckSearchClan.SearchClanObject clan_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_clan_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckSearchClan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckSearchClan)
  return false;
#undef DO_
}

void AckSearchClan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckSearchClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.AckSearchClan.SearchClanObject clan_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clan_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->clan_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckSearchClan)
}

::google::protobuf::uint8* AckSearchClan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSearchClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.AckSearchClan.SearchClanObject clan_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clan_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->clan_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSearchClan)
  return target;
}

size_t AckSearchClan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSearchClan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.AckSearchClan.SearchClanObject clan_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->clan_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->clan_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSearchClan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSearchClan)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchClan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSearchClan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSearchClan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSearchClan)
    MergeFrom(*source);
  }
}

void AckSearchClan::MergeFrom(const AckSearchClan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSearchClan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clan_list_.MergeFrom(from.clan_list_);
}

void AckSearchClan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSearchClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchClan::CopyFrom(const AckSearchClan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSearchClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchClan::IsInitialized() const {
  return true;
}

void AckSearchClan::Swap(AckSearchClan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSearchClan::InternalSwap(AckSearchClan* other) {
  using std::swap;
  CastToBase(&clan_list_)->InternalSwap(CastToBase(&other->clan_list_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckSearchClan::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckJoinClan::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckJoinClan_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckJoinClan::clear_clan_id() {
  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckJoinClan::kClanIdFieldNumber;
const int ReqAckJoinClan::kClanNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckJoinClan::ReqAckJoinClan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckJoinClan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckJoinClan)
}
ReqAckJoinClan::ReqAckJoinClan(const ReqAckJoinClan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clan_name().size() > 0) {
    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  if (from.has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckJoinClan)
}

void ReqAckJoinClan::SharedCtor() {
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_id_ = NULL;
}

ReqAckJoinClan::~ReqAckJoinClan() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckJoinClan)
  SharedDtor();
}

void ReqAckJoinClan::SharedDtor() {
  clan_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clan_id_;
}

void ReqAckJoinClan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckJoinClan::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckJoinClan& ReqAckJoinClan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckJoinClan.base);
  return *internal_default_instance();
}


void ReqAckJoinClan::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckJoinClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clan_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckJoinClan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckJoinClan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident clan_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clan_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes clan_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clan_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckJoinClan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckJoinClan)
  return false;
#undef DO_
}

void ReqAckJoinClan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckJoinClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_clan_id(), output);
  }

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->clan_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckJoinClan)
}

::google::protobuf::uint8* ReqAckJoinClan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckJoinClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_clan_id(), deterministic, target);
  }

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->clan_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckJoinClan)
  return target;
}

size_t ReqAckJoinClan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckJoinClan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clan_name());
  }

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckJoinClan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckJoinClan)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckJoinClan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckJoinClan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckJoinClan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckJoinClan)
    MergeFrom(*source);
  }
}

void ReqAckJoinClan::MergeFrom(const ReqAckJoinClan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckJoinClan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clan_name().size() > 0) {

    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  if (from.has_clan_id()) {
    mutable_clan_id()->::NFMsg::Ident::MergeFrom(from.clan_id());
  }
}

void ReqAckJoinClan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckJoinClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinClan::CopyFrom(const ReqAckJoinClan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckJoinClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinClan::IsInitialized() const {
  return true;
}

void ReqAckJoinClan::Swap(ReqAckJoinClan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckJoinClan::InternalSwap(ReqAckJoinClan* other) {
  using std::swap;
  clan_name_.Swap(&other->clan_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clan_id_, other->clan_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckJoinClan::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckLeaveClan::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckLeaveClan_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckLeaveClan::clear_clan_id() {
  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckLeaveClan::kClanIdFieldNumber;
const int ReqAckLeaveClan::kClanNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckLeaveClan::ReqAckLeaveClan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckLeaveClan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckLeaveClan)
}
ReqAckLeaveClan::ReqAckLeaveClan(const ReqAckLeaveClan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clan_name().size() > 0) {
    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  if (from.has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckLeaveClan)
}

void ReqAckLeaveClan::SharedCtor() {
  clan_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_id_ = NULL;
}

ReqAckLeaveClan::~ReqAckLeaveClan() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckLeaveClan)
  SharedDtor();
}

void ReqAckLeaveClan::SharedDtor() {
  clan_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clan_id_;
}

void ReqAckLeaveClan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckLeaveClan::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckLeaveClan& ReqAckLeaveClan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckLeaveClan.base);
  return *internal_default_instance();
}


void ReqAckLeaveClan::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckLeaveClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clan_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckLeaveClan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckLeaveClan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident clan_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clan_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes clan_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clan_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckLeaveClan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckLeaveClan)
  return false;
#undef DO_
}

void ReqAckLeaveClan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckLeaveClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_clan_id(), output);
  }

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->clan_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckLeaveClan)
}

::google::protobuf::uint8* ReqAckLeaveClan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckLeaveClan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_clan_id(), deterministic, target);
  }

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->clan_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckLeaveClan)
  return target;
}

size_t ReqAckLeaveClan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckLeaveClan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clan_name());
  }

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckLeaveClan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckLeaveClan)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckLeaveClan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckLeaveClan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckLeaveClan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckLeaveClan)
    MergeFrom(*source);
  }
}

void ReqAckLeaveClan::MergeFrom(const ReqAckLeaveClan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckLeaveClan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clan_name().size() > 0) {

    clan_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  if (from.has_clan_id()) {
    mutable_clan_id()->::NFMsg::Ident::MergeFrom(from.clan_id());
  }
}

void ReqAckLeaveClan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckLeaveClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveClan::CopyFrom(const ReqAckLeaveClan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckLeaveClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveClan::IsInitialized() const {
  return true;
}

void ReqAckLeaveClan::Swap(ReqAckLeaveClan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckLeaveClan::InternalSwap(ReqAckLeaveClan* other) {
  using std::swap;
  clan_name_.Swap(&other->clan_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clan_id_, other->clan_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckLeaveClan::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckOprClanMember::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckOprClanMember_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckOprClanMember_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckOprClanMember::clear_clan_id() {
  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
}
void ReqAckOprClanMember::clear_member_id() {
  if (GetArenaNoVirtual() == NULL && member_id_ != NULL) {
    delete member_id_;
  }
  member_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckOprClanMember::kClanIdFieldNumber;
const int ReqAckOprClanMember::kMemberIdFieldNumber;
const int ReqAckOprClanMember::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckOprClanMember::ReqAckOprClanMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckOprClanMember.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckOprClanMember)
}
ReqAckOprClanMember::ReqAckOprClanMember(const ReqAckOprClanMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = NULL;
  }
  if (from.has_member_id()) {
    member_id_ = new ::NFMsg::Ident(*from.member_id_);
  } else {
    member_id_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckOprClanMember)
}

void ReqAckOprClanMember::SharedCtor() {
  ::memset(&clan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&clan_id_)) + sizeof(type_));
}

ReqAckOprClanMember::~ReqAckOprClanMember() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckOprClanMember)
  SharedDtor();
}

void ReqAckOprClanMember::SharedDtor() {
  if (this != internal_default_instance()) delete clan_id_;
  if (this != internal_default_instance()) delete member_id_;
}

void ReqAckOprClanMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckOprClanMember::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckOprClanMember& ReqAckOprClanMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckOprClanMember.base);
  return *internal_default_instance();
}


void ReqAckOprClanMember::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckOprClanMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && member_id_ != NULL) {
    delete member_id_;
  }
  member_id_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool ReqAckOprClanMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckOprClanMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident clan_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clan_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident member_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.ReqAckOprClanMember.EGClanMemberOprType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::NFMsg::ReqAckOprClanMember_EGClanMemberOprType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckOprClanMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckOprClanMember)
  return false;
#undef DO_
}

void ReqAckOprClanMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckOprClanMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_clan_id(), output);
  }

  // .NFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_member_id(), output);
  }

  // .NFMsg.ReqAckOprClanMember.EGClanMemberOprType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckOprClanMember)
}

::google::protobuf::uint8* ReqAckOprClanMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckOprClanMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_clan_id(), deterministic, target);
  }

  // .NFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_member_id(), deterministic, target);
  }

  // .NFMsg.ReqAckOprClanMember.EGClanMemberOprType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckOprClanMember)
  return target;
}

size_t ReqAckOprClanMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckOprClanMember)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  // .NFMsg.Ident member_id = 2;
  if (this->has_member_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_id_);
  }

  // .NFMsg.ReqAckOprClanMember.EGClanMemberOprType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckOprClanMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckOprClanMember)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckOprClanMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckOprClanMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckOprClanMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckOprClanMember)
    MergeFrom(*source);
  }
}

void ReqAckOprClanMember::MergeFrom(const ReqAckOprClanMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckOprClanMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clan_id()) {
    mutable_clan_id()->::NFMsg::Ident::MergeFrom(from.clan_id());
  }
  if (from.has_member_id()) {
    mutable_member_id()->::NFMsg::Ident::MergeFrom(from.member_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ReqAckOprClanMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckOprClanMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprClanMember::CopyFrom(const ReqAckOprClanMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckOprClanMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprClanMember::IsInitialized() const {
  return true;
}

void ReqAckOprClanMember::Swap(ReqAckOprClanMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckOprClanMember::InternalSwap(ReqAckOprClanMember* other) {
  using std::swap;
  swap(clan_id_, other->clan_id_);
  swap(member_id_, other->member_id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckOprClanMember::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqEnterClanEctype::InitAsDefaultInstance() {
  ::NFMsg::_ReqEnterClanEctype_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqEnterClanEctype::clear_clan_id() {
  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEnterClanEctype::kClanIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEnterClanEctype::ReqEnterClanEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqEnterClanEctype.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqEnterClanEctype)
}
ReqEnterClanEctype::ReqEnterClanEctype(const ReqEnterClanEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqEnterClanEctype)
}

void ReqEnterClanEctype::SharedCtor() {
  clan_id_ = NULL;
}

ReqEnterClanEctype::~ReqEnterClanEctype() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqEnterClanEctype)
  SharedDtor();
}

void ReqEnterClanEctype::SharedDtor() {
  if (this != internal_default_instance()) delete clan_id_;
}

void ReqEnterClanEctype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqEnterClanEctype::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqEnterClanEctype& ReqEnterClanEctype::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqEnterClanEctype.base);
  return *internal_default_instance();
}


void ReqEnterClanEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqEnterClanEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && clan_id_ != NULL) {
    delete clan_id_;
  }
  clan_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqEnterClanEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqEnterClanEctype)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident clan_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clan_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqEnterClanEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqEnterClanEctype)
  return false;
#undef DO_
}

void ReqEnterClanEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqEnterClanEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_clan_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqEnterClanEctype)
}

::google::protobuf::uint8* ReqEnterClanEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqEnterClanEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_clan_id(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqEnterClanEctype)
  return target;
}

size_t ReqEnterClanEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqEnterClanEctype)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEnterClanEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqEnterClanEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterClanEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEnterClanEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqEnterClanEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqEnterClanEctype)
    MergeFrom(*source);
  }
}

void ReqEnterClanEctype::MergeFrom(const ReqEnterClanEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqEnterClanEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clan_id()) {
    mutable_clan_id()->::NFMsg::Ident::MergeFrom(from.clan_id());
  }
}

void ReqEnterClanEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqEnterClanEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterClanEctype::CopyFrom(const ReqEnterClanEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqEnterClanEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterClanEctype::IsInitialized() const {
  return true;
}

void ReqEnterClanEctype::Swap(ReqEnterClanEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEnterClanEctype::InternalSwap(ReqEnterClanEctype* other) {
  using std::swap;
  swap(clan_id_, other->clan_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqEnterClanEctype::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSetFightHero::InitAsDefaultInstance() {
  ::NFMsg::_ReqSetFightHero_default_instance_._instance.get_mutable()->heroid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqSetFightHero::clear_heroid() {
  if (GetArenaNoVirtual() == NULL && heroid_ != NULL) {
    delete heroid_;
  }
  heroid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSetFightHero::kHeroidFieldNumber;
const int ReqSetFightHero::kSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSetFightHero::ReqSetFightHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSetFightHero.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSetFightHero)
}
ReqSetFightHero::ReqSetFightHero(const ReqSetFightHero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_heroid()) {
    heroid_ = new ::NFMsg::Ident(*from.heroid_);
  } else {
    heroid_ = NULL;
  }
  set_ = from.set_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSetFightHero)
}

void ReqSetFightHero::SharedCtor() {
  ::memset(&heroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_) -
      reinterpret_cast<char*>(&heroid_)) + sizeof(set_));
}

ReqSetFightHero::~ReqSetFightHero() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSetFightHero)
  SharedDtor();
}

void ReqSetFightHero::SharedDtor() {
  if (this != internal_default_instance()) delete heroid_;
}

void ReqSetFightHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSetFightHero::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSetFightHero& ReqSetFightHero::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSetFightHero.base);
  return *internal_default_instance();
}


void ReqSetFightHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSetFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && heroid_ != NULL) {
    delete heroid_;
  }
  heroid_ = NULL;
  set_ = 0;
  _internal_metadata_.Clear();
}

bool ReqSetFightHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSetFightHero)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident Heroid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heroid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSetFightHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSetFightHero)
  return false;
#undef DO_
}

void ReqSetFightHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSetFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident Heroid = 1;
  if (this->has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_heroid(), output);
  }

  // int32 Set = 2;
  if (this->set() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->set(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSetFightHero)
}

::google::protobuf::uint8* ReqSetFightHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSetFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident Heroid = 1;
  if (this->has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_heroid(), deterministic, target);
  }

  // int32 Set = 2;
  if (this->set() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->set(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSetFightHero)
  return target;
}

size_t ReqSetFightHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSetFightHero)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident Heroid = 1;
  if (this->has_heroid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heroid_);
  }

  // int32 Set = 2;
  if (this->set() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->set());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSetFightHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSetFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSetFightHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSetFightHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSetFightHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSetFightHero)
    MergeFrom(*source);
  }
}

void ReqSetFightHero::MergeFrom(const ReqSetFightHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSetFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_heroid()) {
    mutable_heroid()->::NFMsg::Ident::MergeFrom(from.heroid());
  }
  if (from.set() != 0) {
    set_set(from.set());
  }
}

void ReqSetFightHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSetFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetFightHero::CopyFrom(const ReqSetFightHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSetFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetFightHero::IsInitialized() const {
  return true;
}

void ReqSetFightHero::Swap(ReqSetFightHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSetFightHero::InternalSwap(ReqSetFightHero* other) {
  using std::swap;
  swap(heroid_, other->heroid_);
  swap(set_, other->set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSetFightHero::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSwitchFightHero::InitAsDefaultInstance() {
  ::NFMsg::_ReqSwitchFightHero_default_instance_._instance.get_mutable()->heroid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqSwitchFightHero::clear_heroid() {
  if (GetArenaNoVirtual() == NULL && heroid_ != NULL) {
    delete heroid_;
  }
  heroid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSwitchFightHero::kHeroidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSwitchFightHero::ReqSwitchFightHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSwitchFightHero.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSwitchFightHero)
}
ReqSwitchFightHero::ReqSwitchFightHero(const ReqSwitchFightHero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_heroid()) {
    heroid_ = new ::NFMsg::Ident(*from.heroid_);
  } else {
    heroid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSwitchFightHero)
}

void ReqSwitchFightHero::SharedCtor() {
  heroid_ = NULL;
}

ReqSwitchFightHero::~ReqSwitchFightHero() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSwitchFightHero)
  SharedDtor();
}

void ReqSwitchFightHero::SharedDtor() {
  if (this != internal_default_instance()) delete heroid_;
}

void ReqSwitchFightHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSwitchFightHero::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSwitchFightHero& ReqSwitchFightHero::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSwitchFightHero.base);
  return *internal_default_instance();
}


void ReqSwitchFightHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSwitchFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && heroid_ != NULL) {
    delete heroid_;
  }
  heroid_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqSwitchFightHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSwitchFightHero)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident Heroid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heroid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSwitchFightHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSwitchFightHero)
  return false;
#undef DO_
}

void ReqSwitchFightHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSwitchFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident Heroid = 1;
  if (this->has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_heroid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSwitchFightHero)
}

::google::protobuf::uint8* ReqSwitchFightHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSwitchFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident Heroid = 1;
  if (this->has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_heroid(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSwitchFightHero)
  return target;
}

size_t ReqSwitchFightHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSwitchFightHero)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident Heroid = 1;
  if (this->has_heroid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heroid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSwitchFightHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSwitchFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSwitchFightHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSwitchFightHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSwitchFightHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSwitchFightHero)
    MergeFrom(*source);
  }
}

void ReqSwitchFightHero::MergeFrom(const ReqSwitchFightHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSwitchFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_heroid()) {
    mutable_heroid()->::NFMsg::Ident::MergeFrom(from.heroid());
  }
}

void ReqSwitchFightHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSwitchFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwitchFightHero::CopyFrom(const ReqSwitchFightHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSwitchFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwitchFightHero::IsInitialized() const {
  return true;
}

void ReqSwitchFightHero::Swap(ReqSwitchFightHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSwitchFightHero::InternalSwap(ReqSwitchFightHero* other) {
  using std::swap;
  swap(heroid_, other->heroid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSwitchFightHero::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqBuyItemFromShop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqBuyItemFromShop::kItemIDFieldNumber;
const int ReqBuyItemFromShop::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBuyItemFromShop::ReqBuyItemFromShop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqBuyItemFromShop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqBuyItemFromShop)
}
ReqBuyItemFromShop::ReqBuyItemFromShop(const ReqBuyItemFromShop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itemid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.itemid().size() > 0) {
    itemid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemid_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqBuyItemFromShop)
}

void ReqBuyItemFromShop::SharedCtor() {
  itemid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

ReqBuyItemFromShop::~ReqBuyItemFromShop() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqBuyItemFromShop)
  SharedDtor();
}

void ReqBuyItemFromShop::SharedDtor() {
  itemid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqBuyItemFromShop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqBuyItemFromShop::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqBuyItemFromShop& ReqBuyItemFromShop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqBuyItemFromShop.base);
  return *internal_default_instance();
}


void ReqBuyItemFromShop::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqBuyItemFromShop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  _internal_metadata_.Clear();
}

bool ReqBuyItemFromShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqBuyItemFromShop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes itemID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_itemid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqBuyItemFromShop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqBuyItemFromShop)
  return false;
#undef DO_
}

void ReqBuyItemFromShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqBuyItemFromShop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes itemID = 1;
  if (this->itemid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->itemid(), output);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqBuyItemFromShop)
}

::google::protobuf::uint8* ReqBuyItemFromShop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqBuyItemFromShop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes itemID = 1;
  if (this->itemid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->itemid(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqBuyItemFromShop)
  return target;
}

size_t ReqBuyItemFromShop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqBuyItemFromShop)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes itemID = 1;
  if (this->itemid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->itemid());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBuyItemFromShop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqBuyItemFromShop)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBuyItemFromShop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBuyItemFromShop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqBuyItemFromShop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqBuyItemFromShop)
    MergeFrom(*source);
  }
}

void ReqBuyItemFromShop::MergeFrom(const ReqBuyItemFromShop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqBuyItemFromShop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemid().size() > 0) {

    itemid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemid_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ReqBuyItemFromShop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqBuyItemFromShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyItemFromShop::CopyFrom(const ReqBuyItemFromShop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqBuyItemFromShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuyItemFromShop::IsInitialized() const {
  return true;
}

void ReqBuyItemFromShop::Swap(ReqBuyItemFromShop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBuyItemFromShop::InternalSwap(ReqBuyItemFromShop* other) {
  using std::swap;
  itemid_.Swap(&other->itemid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqBuyItemFromShop::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPPlayerInfo::InitAsDefaultInstance() {
  ::NFMsg::_PVPPlayerInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_PVPPlayerInfo_default_instance_._instance.get_mutable()->hero_id1_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_PVPPlayerInfo_default_instance_._instance.get_mutable()->hero_id2_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_PVPPlayerInfo_default_instance_._instance.get_mutable()->hero_id3_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void PVPPlayerInfo::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void PVPPlayerInfo::clear_hero_id1() {
  if (GetArenaNoVirtual() == NULL && hero_id1_ != NULL) {
    delete hero_id1_;
  }
  hero_id1_ = NULL;
}
void PVPPlayerInfo::clear_hero_id2() {
  if (GetArenaNoVirtual() == NULL && hero_id2_ != NULL) {
    delete hero_id2_;
  }
  hero_id2_ = NULL;
}
void PVPPlayerInfo::clear_hero_id3() {
  if (GetArenaNoVirtual() == NULL && hero_id3_ != NULL) {
    delete hero_id3_;
  }
  hero_id3_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPPlayerInfo::kIdFieldNumber;
const int PVPPlayerInfo::kSingleFieldNumber;
const int PVPPlayerInfo::kLevelFieldNumber;
const int PVPPlayerInfo::kBattlePointFieldNumber;
const int PVPPlayerInfo::kNameFieldNumber;
const int PVPPlayerInfo::kHeadFieldNumber;
const int PVPPlayerInfo::kGoldFieldNumber;
const int PVPPlayerInfo::kDiamondFieldNumber;
const int PVPPlayerInfo::kHeroCnf1FieldNumber;
const int PVPPlayerInfo::kHeroCnf2FieldNumber;
const int PVPPlayerInfo::kHeroCnf3FieldNumber;
const int PVPPlayerInfo::kHeroStar1FieldNumber;
const int PVPPlayerInfo::kHeroStar2FieldNumber;
const int PVPPlayerInfo::kHeroStar3FieldNumber;
const int PVPPlayerInfo::kHeroId1FieldNumber;
const int PVPPlayerInfo::kHeroId2FieldNumber;
const int PVPPlayerInfo::kHeroId3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPPlayerInfo::PVPPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_PVPPlayerInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PVPPlayerInfo)
}
PVPPlayerInfo::PVPPlayerInfo(const PVPPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  head_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.head().size() > 0) {
    head_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  hero_cnf1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hero_cnf1().size() > 0) {
    hero_cnf1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_cnf1_);
  }
  hero_cnf2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hero_cnf2().size() > 0) {
    hero_cnf2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_cnf2_);
  }
  hero_cnf3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hero_cnf3().size() > 0) {
    hero_cnf3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_cnf3_);
  }
  if (from.has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_hero_id1()) {
    hero_id1_ = new ::NFMsg::Ident(*from.hero_id1_);
  } else {
    hero_id1_ = NULL;
  }
  if (from.has_hero_id2()) {
    hero_id2_ = new ::NFMsg::Ident(*from.hero_id2_);
  } else {
    hero_id2_ = NULL;
  }
  if (from.has_hero_id3()) {
    hero_id3_ = new ::NFMsg::Ident(*from.hero_id3_);
  } else {
    hero_id3_ = NULL;
  }
  ::memcpy(&single_, &from.single_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_star3_) -
    reinterpret_cast<char*>(&single_)) + sizeof(hero_star3_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PVPPlayerInfo)
}

void PVPPlayerInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_cnf1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_cnf2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_cnf3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_star3_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hero_star3_));
}

PVPPlayerInfo::~PVPPlayerInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.PVPPlayerInfo)
  SharedDtor();
}

void PVPPlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_cnf1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_cnf2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_cnf3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete hero_id1_;
  if (this != internal_default_instance()) delete hero_id2_;
  if (this != internal_default_instance()) delete hero_id3_;
}

void PVPPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPPlayerInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPPlayerInfo& PVPPlayerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_PVPPlayerInfo.base);
  return *internal_default_instance();
}


void PVPPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PVPPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_cnf1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_cnf2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_cnf3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && hero_id1_ != NULL) {
    delete hero_id1_;
  }
  hero_id1_ = NULL;
  if (GetArenaNoVirtual() == NULL && hero_id2_ != NULL) {
    delete hero_id2_;
  }
  hero_id2_ = NULL;
  if (GetArenaNoVirtual() == NULL && hero_id3_ != NULL) {
    delete hero_id3_;
  }
  hero_id3_ = NULL;
  ::memset(&single_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_star3_) -
      reinterpret_cast<char*>(&single_)) + sizeof(hero_star3_));
  _internal_metadata_.Clear();
}

bool PVPPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PVPPlayerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 single = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &single_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 battle_point = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes head = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gold = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 diamond = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hero_cnf1 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hero_cnf1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hero_cnf2 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hero_cnf2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hero_cnf3 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hero_cnf3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hero_star1 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_star1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hero_star2 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_star2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hero_star3 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_star3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident hero_id1 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hero_id1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident hero_id2 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hero_id2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident hero_id3 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hero_id3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PVPPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PVPPlayerInfo)
  return false;
#undef DO_
}

void PVPPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PVPPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // int32 single = 2;
  if (this->single() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->single(), output);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // int32 battle_point = 5;
  if (this->battle_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->battle_point(), output);
  }

  // bytes name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->name(), output);
  }

  // bytes head = 7;
  if (this->head().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->head(), output);
  }

  // int32 gold = 8;
  if (this->gold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gold(), output);
  }

  // int32 diamond = 9;
  if (this->diamond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->diamond(), output);
  }

  // bytes hero_cnf1 = 20;
  if (this->hero_cnf1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->hero_cnf1(), output);
  }

  // bytes hero_cnf2 = 21;
  if (this->hero_cnf2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->hero_cnf2(), output);
  }

  // bytes hero_cnf3 = 22;
  if (this->hero_cnf3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->hero_cnf3(), output);
  }

  // int32 hero_star1 = 25;
  if (this->hero_star1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->hero_star1(), output);
  }

  // int32 hero_star2 = 26;
  if (this->hero_star2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hero_star2(), output);
  }

  // int32 hero_star3 = 27;
  if (this->hero_star3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->hero_star3(), output);
  }

  // .NFMsg.Ident hero_id1 = 28;
  if (this->has_hero_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_internal_hero_id1(), output);
  }

  // .NFMsg.Ident hero_id2 = 29;
  if (this->has_hero_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_internal_hero_id2(), output);
  }

  // .NFMsg.Ident hero_id3 = 30;
  if (this->has_hero_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_hero_id3(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PVPPlayerInfo)
}

::google::protobuf::uint8* PVPPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PVPPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // int32 single = 2;
  if (this->single() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->single(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // int32 battle_point = 5;
  if (this->battle_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->battle_point(), target);
  }

  // bytes name = 6;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->name(), target);
  }

  // bytes head = 7;
  if (this->head().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->head(), target);
  }

  // int32 gold = 8;
  if (this->gold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gold(), target);
  }

  // int32 diamond = 9;
  if (this->diamond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->diamond(), target);
  }

  // bytes hero_cnf1 = 20;
  if (this->hero_cnf1().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->hero_cnf1(), target);
  }

  // bytes hero_cnf2 = 21;
  if (this->hero_cnf2().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->hero_cnf2(), target);
  }

  // bytes hero_cnf3 = 22;
  if (this->hero_cnf3().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->hero_cnf3(), target);
  }

  // int32 hero_star1 = 25;
  if (this->hero_star1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->hero_star1(), target);
  }

  // int32 hero_star2 = 26;
  if (this->hero_star2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hero_star2(), target);
  }

  // int32 hero_star3 = 27;
  if (this->hero_star3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->hero_star3(), target);
  }

  // .NFMsg.Ident hero_id1 = 28;
  if (this->has_hero_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, this->_internal_hero_id1(), deterministic, target);
  }

  // .NFMsg.Ident hero_id2 = 29;
  if (this->has_hero_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->_internal_hero_id2(), deterministic, target);
  }

  // .NFMsg.Ident hero_id3 = 30;
  if (this->has_hero_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_hero_id3(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PVPPlayerInfo)
  return target;
}

size_t PVPPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PVPPlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // bytes head = 7;
  if (this->head().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->head());
  }

  // bytes hero_cnf1 = 20;
  if (this->hero_cnf1().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hero_cnf1());
  }

  // bytes hero_cnf2 = 21;
  if (this->hero_cnf2().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hero_cnf2());
  }

  // bytes hero_cnf3 = 22;
  if (this->hero_cnf3().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hero_cnf3());
  }

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .NFMsg.Ident hero_id1 = 28;
  if (this->has_hero_id1()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hero_id1_);
  }

  // .NFMsg.Ident hero_id2 = 29;
  if (this->has_hero_id2()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hero_id2_);
  }

  // .NFMsg.Ident hero_id3 = 30;
  if (this->has_hero_id3()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hero_id3_);
  }

  // int32 single = 2;
  if (this->single() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->single());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // int32 battle_point = 5;
  if (this->battle_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battle_point());
  }

  // int32 gold = 8;
  if (this->gold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());
  }

  // int32 diamond = 9;
  if (this->diamond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());
  }

  // int32 hero_star1 = 25;
  if (this->hero_star1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hero_star1());
  }

  // int32 hero_star2 = 26;
  if (this->hero_star2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hero_star2());
  }

  // int32 hero_star3 = 27;
  if (this->hero_star3() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hero_star3());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PVPPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PVPPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PVPPlayerInfo)
    MergeFrom(*source);
  }
}

void PVPPlayerInfo::MergeFrom(const PVPPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PVPPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.head().size() > 0) {

    head_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  if (from.hero_cnf1().size() > 0) {

    hero_cnf1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_cnf1_);
  }
  if (from.hero_cnf2().size() > 0) {

    hero_cnf2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_cnf2_);
  }
  if (from.hero_cnf3().size() > 0) {

    hero_cnf3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_cnf3_);
  }
  if (from.has_id()) {
    mutable_id()->::NFMsg::Ident::MergeFrom(from.id());
  }
  if (from.has_hero_id1()) {
    mutable_hero_id1()->::NFMsg::Ident::MergeFrom(from.hero_id1());
  }
  if (from.has_hero_id2()) {
    mutable_hero_id2()->::NFMsg::Ident::MergeFrom(from.hero_id2());
  }
  if (from.has_hero_id3()) {
    mutable_hero_id3()->::NFMsg::Ident::MergeFrom(from.hero_id3());
  }
  if (from.single() != 0) {
    set_single(from.single());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.battle_point() != 0) {
    set_battle_point(from.battle_point());
  }
  if (from.gold() != 0) {
    set_gold(from.gold());
  }
  if (from.diamond() != 0) {
    set_diamond(from.diamond());
  }
  if (from.hero_star1() != 0) {
    set_hero_star1(from.hero_star1());
  }
  if (from.hero_star2() != 0) {
    set_hero_star2(from.hero_star2());
  }
  if (from.hero_star3() != 0) {
    set_hero_star3(from.hero_star3());
  }
}

void PVPPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PVPPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPPlayerInfo::CopyFrom(const PVPPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PVPPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPPlayerInfo::IsInitialized() const {
  return true;
}

void PVPPlayerInfo::Swap(PVPPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PVPPlayerInfo::InternalSwap(PVPPlayerInfo* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  head_.Swap(&other->head_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hero_cnf1_.Swap(&other->hero_cnf1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hero_cnf2_.Swap(&other->hero_cnf2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hero_cnf3_.Swap(&other->hero_cnf3_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(hero_id1_, other->hero_id1_);
  swap(hero_id2_, other->hero_id2_);
  swap(hero_id3_, other->hero_id3_);
  swap(single_, other->single_);
  swap(level_, other->level_);
  swap(battle_point_, other->battle_point_);
  swap(gold_, other->gold_);
  swap(diamond_, other->diamond_);
  swap(hero_star1_, other->hero_star1_);
  swap(hero_star2_, other->hero_star2_);
  swap(hero_star3_, other->hero_star3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPPlayerInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSearchOppnent::InitAsDefaultInstance() {
}
void ReqSearchOppnent::clear_friends() {
  friends_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSearchOppnent::kSelfSceneFieldNumber;
const int ReqSearchOppnent::kDiamondFieldNumber;
const int ReqSearchOppnent::kBattlePointFieldNumber;
const int ReqSearchOppnent::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSearchOppnent::ReqSearchOppnent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSearchOppnent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSearchOppnent)
}
ReqSearchOppnent::ReqSearchOppnent(const ReqSearchOppnent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&self_scene_, &from.self_scene_,
    static_cast<size_t>(reinterpret_cast<char*>(&battle_point_) -
    reinterpret_cast<char*>(&self_scene_)) + sizeof(battle_point_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSearchOppnent)
}

void ReqSearchOppnent::SharedCtor() {
  ::memset(&self_scene_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battle_point_) -
      reinterpret_cast<char*>(&self_scene_)) + sizeof(battle_point_));
}

ReqSearchOppnent::~ReqSearchOppnent() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSearchOppnent)
  SharedDtor();
}

void ReqSearchOppnent::SharedDtor() {
}

void ReqSearchOppnent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSearchOppnent::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSearchOppnent& ReqSearchOppnent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSearchOppnent.base);
  return *internal_default_instance();
}


void ReqSearchOppnent::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  ::memset(&self_scene_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battle_point_) -
      reinterpret_cast<char*>(&self_scene_)) + sizeof(battle_point_));
  _internal_metadata_.Clear();
}

bool ReqSearchOppnent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSearchOppnent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 self_scene = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_scene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 diamond = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 battle_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Ident friends = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSearchOppnent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSearchOppnent)
  return false;
#undef DO_
}

void ReqSearchOppnent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 self_scene = 1;
  if (this->self_scene() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->self_scene(), output);
  }

  // int32 diamond = 2;
  if (this->diamond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->diamond(), output);
  }

  // int32 battle_point = 3;
  if (this->battle_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_point(), output);
  }

  // repeated .NFMsg.Ident friends = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->friends(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSearchOppnent)
}

::google::protobuf::uint8* ReqSearchOppnent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 self_scene = 1;
  if (this->self_scene() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->self_scene(), target);
  }

  // int32 diamond = 2;
  if (this->diamond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->diamond(), target);
  }

  // int32 battle_point = 3;
  if (this->battle_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_point(), target);
  }

  // repeated .NFMsg.Ident friends = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->friends(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSearchOppnent)
  return target;
}

size_t ReqSearchOppnent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSearchOppnent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.Ident friends = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->friends_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->friends(static_cast<int>(i)));
    }
  }

  // int32 self_scene = 1;
  if (this->self_scene() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->self_scene());
  }

  // int32 diamond = 2;
  if (this->diamond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());
  }

  // int32 battle_point = 3;
  if (this->battle_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->battle_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSearchOppnent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSearchOppnent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSearchOppnent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSearchOppnent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSearchOppnent)
    MergeFrom(*source);
  }
}

void ReqSearchOppnent::MergeFrom(const ReqSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from.self_scene() != 0) {
    set_self_scene(from.self_scene());
  }
  if (from.diamond() != 0) {
    set_diamond(from.diamond());
  }
  if (from.battle_point() != 0) {
    set_battle_point(from.battle_point());
  }
}

void ReqSearchOppnent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSearchOppnent::CopyFrom(const ReqSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSearchOppnent::IsInitialized() const {
  return true;
}

void ReqSearchOppnent::Swap(ReqSearchOppnent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSearchOppnent::InternalSwap(ReqSearchOppnent* other) {
  using std::swap;
  CastToBase(&friends_)->InternalSwap(CastToBase(&other->friends_));
  swap(self_scene_, other->self_scene_);
  swap(diamond_, other->diamond_);
  swap(battle_point_, other->battle_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSearchOppnent::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSearchOppnent::InitAsDefaultInstance() {
  ::NFMsg::_AckSearchOppnent_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_AckSearchOppnent_default_instance_._instance.get_mutable()->opponent_ = const_cast< ::NFMsg::PVPPlayerInfo*>(
      ::NFMsg::PVPPlayerInfo::internal_default_instance());
}
void AckSearchOppnent::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void AckSearchOppnent::clear_team_members() {
  team_members_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSearchOppnent::kSceneIdFieldNumber;
const int AckSearchOppnent::kTeamIdFieldNumber;
const int AckSearchOppnent::kGambleDiamondFieldNumber;
const int AckSearchOppnent::kTeamMembersFieldNumber;
const int AckSearchOppnent::kOpponentFieldNumber;
const int AckSearchOppnent::kBuildingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSearchOppnent::AckSearchOppnent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckSearchOppnent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSearchOppnent)
}
AckSearchOppnent::AckSearchOppnent(const AckSearchOppnent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      team_members_(from.team_members_),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_opponent()) {
    opponent_ = new ::NFMsg::PVPPlayerInfo(*from.opponent_);
  } else {
    opponent_ = NULL;
  }
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamble_diamond_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(gamble_diamond_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSearchOppnent)
}

void AckSearchOppnent::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamble_diamond_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(gamble_diamond_));
}

AckSearchOppnent::~AckSearchOppnent() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSearchOppnent)
  SharedDtor();
}

void AckSearchOppnent::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete opponent_;
}

void AckSearchOppnent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckSearchOppnent::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSearchOppnent& AckSearchOppnent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckSearchOppnent.base);
  return *internal_default_instance();
}


void AckSearchOppnent::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_members_.Clear();
  buildings_.Clear();
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && opponent_ != NULL) {
    delete opponent_;
  }
  opponent_ = NULL;
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamble_diamond_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(gamble_diamond_));
  _internal_metadata_.Clear();
}

bool AckSearchOppnent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckSearchOppnent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 scene_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gamble_diamond = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamble_diamond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Ident team_members = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.PVPPlayerInfo opponent = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_opponent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.ReqAddSceneBuilding buildings = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckSearchOppnent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckSearchOppnent)
  return false;
#undef DO_
}

void AckSearchOppnent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene_id = 1;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }

  // .NFMsg.Ident team_id = 2;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_team_id(), output);
  }

  // int32 gamble_diamond = 3;
  if (this->gamble_diamond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamble_diamond(), output);
  }

  // repeated .NFMsg.Ident team_members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->team_members(static_cast<int>(i)),
      output);
  }

  // .NFMsg.PVPPlayerInfo opponent = 14;
  if (this->has_opponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_opponent(), output);
  }

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->buildings(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckSearchOppnent)
}

::google::protobuf::uint8* AckSearchOppnent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene_id = 1;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }

  // .NFMsg.Ident team_id = 2;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_team_id(), deterministic, target);
  }

  // int32 gamble_diamond = 3;
  if (this->gamble_diamond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamble_diamond(), target);
  }

  // repeated .NFMsg.Ident team_members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->team_members(static_cast<int>(i)), deterministic, target);
  }

  // .NFMsg.PVPPlayerInfo opponent = 14;
  if (this->has_opponent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_opponent(), deterministic, target);
  }

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buildings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->buildings(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSearchOppnent)
  return target;
}

size_t AckSearchOppnent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSearchOppnent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.Ident team_members = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->team_members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_members(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->buildings_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buildings(static_cast<int>(i)));
    }
  }

  // .NFMsg.Ident team_id = 2;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.PVPPlayerInfo opponent = 14;
  if (this->has_opponent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *opponent_);
  }

  // int32 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  // int32 gamble_diamond = 3;
  if (this->gamble_diamond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamble_diamond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSearchOppnent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchOppnent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSearchOppnent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSearchOppnent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSearchOppnent)
    MergeFrom(*source);
  }
}

void AckSearchOppnent::MergeFrom(const AckSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_members_.MergeFrom(from.team_members_);
  buildings_.MergeFrom(from.buildings_);
  if (from.has_team_id()) {
    mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_opponent()) {
    mutable_opponent()->::NFMsg::PVPPlayerInfo::MergeFrom(from.opponent());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.gamble_diamond() != 0) {
    set_gamble_diamond(from.gamble_diamond());
  }
}

void AckSearchOppnent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchOppnent::CopyFrom(const AckSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchOppnent::IsInitialized() const {
  return true;
}

void AckSearchOppnent::Swap(AckSearchOppnent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSearchOppnent::InternalSwap(AckSearchOppnent* other) {
  using std::swap;
  CastToBase(&team_members_)->InternalSwap(CastToBase(&other->team_members_));
  CastToBase(&buildings_)->InternalSwap(CastToBase(&other->buildings_));
  swap(team_id_, other->team_id_);
  swap(opponent_, other->opponent_);
  swap(scene_id_, other->scene_id_);
  swap(gamble_diamond_, other->gamble_diamond_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckSearchOppnent::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckCancelSearch::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckCancelSearch_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckCancelSearch::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckCancelSearch::kSelfidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckCancelSearch::ReqAckCancelSearch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckCancelSearch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckCancelSearch)
}
ReqAckCancelSearch::ReqAckCancelSearch(const ReqAckCancelSearch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::NFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckCancelSearch)
}

void ReqAckCancelSearch::SharedCtor() {
  selfid_ = NULL;
}

ReqAckCancelSearch::~ReqAckCancelSearch() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckCancelSearch)
  SharedDtor();
}

void ReqAckCancelSearch::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
}

void ReqAckCancelSearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckCancelSearch::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckCancelSearch& ReqAckCancelSearch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckCancelSearch.base);
  return *internal_default_instance();
}


void ReqAckCancelSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckCancelSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqAckCancelSearch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckCancelSearch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckCancelSearch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckCancelSearch)
  return false;
#undef DO_
}

void ReqAckCancelSearch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckCancelSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_selfid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckCancelSearch)
}

::google::protobuf::uint8* ReqAckCancelSearch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckCancelSearch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_selfid(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckCancelSearch)
  return target;
}

size_t ReqAckCancelSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckCancelSearch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckCancelSearch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckCancelSearch)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckCancelSearch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckCancelSearch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckCancelSearch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckCancelSearch)
    MergeFrom(*source);
  }
}

void ReqAckCancelSearch::MergeFrom(const ReqAckCancelSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckCancelSearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
  }
}

void ReqAckCancelSearch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckCancelSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCancelSearch::CopyFrom(const ReqAckCancelSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckCancelSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCancelSearch::IsInitialized() const {
  return true;
}

void ReqAckCancelSearch::Swap(ReqAckCancelSearch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckCancelSearch::InternalSwap(ReqAckCancelSearch* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckCancelSearch::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqEndBattle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEndBattle::kAutoEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEndBattle::ReqEndBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqEndBattle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqEndBattle)
}
ReqEndBattle::ReqEndBattle(const ReqEndBattle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auto_end_ = from.auto_end_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqEndBattle)
}

void ReqEndBattle::SharedCtor() {
  auto_end_ = 0;
}

ReqEndBattle::~ReqEndBattle() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqEndBattle)
  SharedDtor();
}

void ReqEndBattle::SharedDtor() {
}

void ReqEndBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqEndBattle::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqEndBattle& ReqEndBattle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqEndBattle.base);
  return *internal_default_instance();
}


void ReqEndBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auto_end_ = 0;
  _internal_metadata_.Clear();
}

bool ReqEndBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqEndBattle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 auto_end = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqEndBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqEndBattle)
  return false;
#undef DO_
}

void ReqEndBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 auto_end = 1;
  if (this->auto_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->auto_end(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqEndBattle)
}

::google::protobuf::uint8* ReqEndBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 auto_end = 1;
  if (this->auto_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->auto_end(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqEndBattle)
  return target;
}

size_t ReqEndBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqEndBattle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 auto_end = 1;
  if (this->auto_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->auto_end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEndBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEndBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEndBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqEndBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqEndBattle)
    MergeFrom(*source);
  }
}

void ReqEndBattle::MergeFrom(const ReqEndBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_end() != 0) {
    set_auto_end(from.auto_end());
  }
}

void ReqEndBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEndBattle::CopyFrom(const ReqEndBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEndBattle::IsInitialized() const {
  return true;
}

void ReqEndBattle::Swap(ReqEndBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEndBattle::InternalSwap(ReqEndBattle* other) {
  using std::swap;
  swap(auto_end_, other->auto_end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqEndBattle::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckEndBattle::InitAsDefaultInstance() {
  ::NFMsg::_AckEndBattle_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_AckEndBattle_default_instance_._instance.get_mutable()->match_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void AckEndBattle::clear_team_id() {
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
}
void AckEndBattle::clear_match_id() {
  if (GetArenaNoVirtual() == NULL && match_id_ != NULL) {
    delete match_id_;
  }
  match_id_ = NULL;
}
void AckEndBattle::clear_members() {
  members_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckEndBattle::kWinFieldNumber;
const int AckEndBattle::kStarFieldNumber;
const int AckEndBattle::kGoldFieldNumber;
const int AckEndBattle::kCupFieldNumber;
const int AckEndBattle::kDiamondFieldNumber;
const int AckEndBattle::kSingleFieldNumber;
const int AckEndBattle::kTeamIdFieldNumber;
const int AckEndBattle::kMatchIdFieldNumber;
const int AckEndBattle::kMembersFieldNumber;
const int AckEndBattle::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckEndBattle::AckEndBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckEndBattle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckEndBattle)
}
AckEndBattle::AckEndBattle(const AckEndBattle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      members_(from.members_),
      item_list_(from.item_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_match_id()) {
    match_id_ = new ::NFMsg::Ident(*from.match_id_);
  } else {
    match_id_ = NULL;
  }
  ::memcpy(&win_, &from.win_,
    static_cast<size_t>(reinterpret_cast<char*>(&single_) -
    reinterpret_cast<char*>(&win_)) + sizeof(single_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckEndBattle)
}

void AckEndBattle::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&single_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(single_));
}

AckEndBattle::~AckEndBattle() {
  // @@protoc_insertion_point(destructor:NFMsg.AckEndBattle)
  SharedDtor();
}

void AckEndBattle::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete match_id_;
}

void AckEndBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckEndBattle::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckEndBattle& AckEndBattle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckEndBattle.base);
  return *internal_default_instance();
}


void AckEndBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  item_list_.Clear();
  if (GetArenaNoVirtual() == NULL && team_id_ != NULL) {
    delete team_id_;
  }
  team_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && match_id_ != NULL) {
    delete match_id_;
  }
  match_id_ = NULL;
  ::memset(&win_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&single_) -
      reinterpret_cast<char*>(&win_)) + sizeof(single_));
  _internal_metadata_.Clear();
}

bool AckEndBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckEndBattle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 win = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 star = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cup = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 diamond = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 single = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &single_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident team_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident match_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Ident members = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.ItemStruct item_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckEndBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckEndBattle)
  return false;
#undef DO_
}

void AckEndBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 win = 1;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->win(), output);
  }

  // int32 star = 2;
  if (this->star() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // int32 gold = 3;
  if (this->gold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }

  // int32 cup = 4;
  if (this->cup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cup(), output);
  }

  // int32 diamond = 5;
  if (this->diamond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->diamond(), output);
  }

  // int32 single = 6;
  if (this->single() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->single(), output);
  }

  // .NFMsg.Ident team_id = 7;
  if (this->has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_team_id(), output);
  }

  // .NFMsg.Ident match_id = 8;
  if (this->has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_match_id(), output);
  }

  // repeated .NFMsg.Ident members = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->members(static_cast<int>(i)),
      output);
  }

  // repeated .NFMsg.ItemStruct item_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->item_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckEndBattle)
}

::google::protobuf::uint8* AckEndBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 win = 1;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->win(), target);
  }

  // int32 star = 2;
  if (this->star() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // int32 gold = 3;
  if (this->gold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold(), target);
  }

  // int32 cup = 4;
  if (this->cup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cup(), target);
  }

  // int32 diamond = 5;
  if (this->diamond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->diamond(), target);
  }

  // int32 single = 6;
  if (this->single() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->single(), target);
  }

  // .NFMsg.Ident team_id = 7;
  if (this->has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_team_id(), deterministic, target);
  }

  // .NFMsg.Ident match_id = 8;
  if (this->has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_match_id(), deterministic, target);
  }

  // repeated .NFMsg.Ident members = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->members(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.ItemStruct item_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckEndBattle)
  return target;
}

size_t AckEndBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckEndBattle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.Ident members = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.ItemStruct item_list = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item_list(static_cast<int>(i)));
    }
  }

  // .NFMsg.Ident team_id = 7;
  if (this->has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.Ident match_id = 8;
  if (this->has_match_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *match_id_);
  }

  // int32 win = 1;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->win());
  }

  // int32 star = 2;
  if (this->star() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  // int32 gold = 3;
  if (this->gold() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());
  }

  // int32 cup = 4;
  if (this->cup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cup());
  }

  // int32 diamond = 5;
  if (this->diamond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());
  }

  // int32 single = 6;
  if (this->single() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->single());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckEndBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const AckEndBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckEndBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckEndBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckEndBattle)
    MergeFrom(*source);
  }
}

void AckEndBattle::MergeFrom(const AckEndBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  item_list_.MergeFrom(from.item_list_);
  if (from.has_team_id()) {
    mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
  }
  if (from.has_match_id()) {
    mutable_match_id()->::NFMsg::Ident::MergeFrom(from.match_id());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.star() != 0) {
    set_star(from.star());
  }
  if (from.gold() != 0) {
    set_gold(from.gold());
  }
  if (from.cup() != 0) {
    set_cup(from.cup());
  }
  if (from.diamond() != 0) {
    set_diamond(from.diamond());
  }
  if (from.single() != 0) {
    set_single(from.single());
  }
}

void AckEndBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEndBattle::CopyFrom(const AckEndBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEndBattle::IsInitialized() const {
  return true;
}

void AckEndBattle::Swap(AckEndBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckEndBattle::InternalSwap(AckEndBattle* other) {
  using std::swap;
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  CastToBase(&item_list_)->InternalSwap(CastToBase(&other->item_list_));
  swap(team_id_, other->team_id_);
  swap(match_id_, other->match_id_);
  swap(win_, other->win_);
  swap(star_, other->star_);
  swap(gold_, other->gold_);
  swap(cup_, other->cup_);
  swap(diamond_, other->diamond_);
  swap(single_, other->single_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckEndBattle::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSendMail::InitAsDefaultInstance() {
  ::NFMsg::_ReqSendMail_default_instance_._instance.get_mutable()->reciever_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqSendMail::clear_reciever() {
  if (GetArenaNoVirtual() == NULL && reciever_ != NULL) {
    delete reciever_;
  }
  reciever_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSendMail::kRecieverFieldNumber;
const int ReqSendMail::kItemListFieldNumber;
const int ReqSendMail::kCurrencyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSendMail::ReqSendMail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSendMail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSendMail)
}
ReqSendMail::ReqSendMail(const ReqSendMail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_list_(from.item_list_),
      currency_list_(from.currency_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reciever()) {
    reciever_ = new ::NFMsg::Ident(*from.reciever_);
  } else {
    reciever_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSendMail)
}

void ReqSendMail::SharedCtor() {
  reciever_ = NULL;
}

ReqSendMail::~ReqSendMail() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSendMail)
  SharedDtor();
}

void ReqSendMail::SharedDtor() {
  if (this != internal_default_instance()) delete reciever_;
}

void ReqSendMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSendMail::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSendMail& ReqSendMail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSendMail.base);
  return *internal_default_instance();
}


void ReqSendMail::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSendMail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  currency_list_.Clear();
  if (GetArenaNoVirtual() == NULL && reciever_ != NULL) {
    delete reciever_;
  }
  reciever_ = NULL;
  _internal_metadata_.Clear();
}

bool ReqSendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSendMail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident reciever = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reciever()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.ItemStruct item_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.CurrencyStruct currency_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_currency_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSendMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSendMail)
  return false;
#undef DO_
}

void ReqSendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSendMail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident reciever = 1;
  if (this->has_reciever()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_reciever(), output);
  }

  // repeated .NFMsg.ItemStruct item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->item_list(static_cast<int>(i)),
      output);
  }

  // repeated .NFMsg.CurrencyStruct currency_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->currency_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->currency_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSendMail)
}

::google::protobuf::uint8* ReqSendMail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSendMail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident reciever = 1;
  if (this->has_reciever()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_reciever(), deterministic, target);
  }

  // repeated .NFMsg.ItemStruct item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.CurrencyStruct currency_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->currency_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->currency_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSendMail)
  return target;
}

size_t ReqSendMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSendMail)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .NFMsg.ItemStruct item_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.CurrencyStruct currency_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->currency_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->currency_list(static_cast<int>(i)));
    }
  }

  // .NFMsg.Ident reciever = 1;
  if (this->has_reciever()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reciever_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSendMail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSendMail)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSendMail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSendMail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSendMail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSendMail)
    MergeFrom(*source);
  }
}

void ReqSendMail::MergeFrom(const ReqSendMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSendMail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  currency_list_.MergeFrom(from.currency_list_);
  if (from.has_reciever()) {
    mutable_reciever()->::NFMsg::Ident::MergeFrom(from.reciever());
  }
}

void ReqSendMail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSendMail::CopyFrom(const ReqSendMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendMail::IsInitialized() const {
  return true;
}

void ReqSendMail::Swap(ReqSendMail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSendMail::InternalSwap(ReqSendMail* other) {
  using std::swap;
  CastToBase(&item_list_)->InternalSwap(CastToBase(&other->item_list_));
  CastToBase(&currency_list_)->InternalSwap(CastToBase(&other->currency_list_));
  swap(reciever_, other->reciever_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSendMail::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSwitchServer::InitAsDefaultInstance() {
  ::NFMsg::_ReqSwitchServer_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqSwitchServer_default_instance_._instance.get_mutable()->client_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqSwitchServer::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
void ReqSwitchServer::clear_client_id() {
  if (GetArenaNoVirtual() == NULL && client_id_ != NULL) {
    delete client_id_;
  }
  client_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSwitchServer::kSelfidFieldNumber;
const int ReqSwitchServer::kSelfServeridFieldNumber;
const int ReqSwitchServer::kTargetServeridFieldNumber;
const int ReqSwitchServer::kGateServeridFieldNumber;
const int ReqSwitchServer::kSceneIDFieldNumber;
const int ReqSwitchServer::kClientIdFieldNumber;
const int ReqSwitchServer::kGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSwitchServer::ReqSwitchServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSwitchServer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSwitchServer)
}
ReqSwitchServer::ReqSwitchServer(const ReqSwitchServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::NFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_client_id()) {
    client_id_ = new ::NFMsg::Ident(*from.client_id_);
  } else {
    client_id_ = NULL;
  }
  ::memcpy(&self_serverid_, &from.self_serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&self_serverid_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSwitchServer)
}

void ReqSwitchServer::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(groupid_));
}

ReqSwitchServer::~ReqSwitchServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSwitchServer)
  SharedDtor();
}

void ReqSwitchServer::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete client_id_;
}

void ReqSwitchServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSwitchServer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSwitchServer& ReqSwitchServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSwitchServer.base);
  return *internal_default_instance();
}


void ReqSwitchServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  if (GetArenaNoVirtual() == NULL && client_id_ != NULL) {
    delete client_id_;
  }
  client_id_ = NULL;
  ::memset(&self_serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&self_serverid_)) + sizeof(groupid_));
  _internal_metadata_.Clear();
}

bool ReqSwitchServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSwitchServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 self_serverid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gate_serverid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gate_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 SceneID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NFMsg.Ident client_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 groupID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSwitchServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSwitchServer)
  return false;
#undef DO_
}

void ReqSwitchServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_selfid(), output);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->self_serverid(), output);
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->target_serverid(), output);
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gate_serverid(), output);
  }

  // int64 SceneID = 5;
  if (this->sceneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sceneid(), output);
  }

  // .NFMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_client_id(), output);
  }

  // int64 groupID = 7;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->groupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSwitchServer)
}

::google::protobuf::uint8* ReqSwitchServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_selfid(), deterministic, target);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->self_serverid(), target);
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->target_serverid(), target);
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gate_serverid(), target);
  }

  // int64 SceneID = 5;
  if (this->sceneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sceneid(), target);
  }

  // .NFMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_client_id(), deterministic, target);
  }

  // int64 groupID = 7;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->groupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSwitchServer)
  return target;
}

size_t ReqSwitchServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSwitchServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .NFMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());
  }

  // int64 SceneID = 5;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sceneid());
  }

  // int64 groupID = 7;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->groupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSwitchServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSwitchServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSwitchServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSwitchServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSwitchServer)
    MergeFrom(*source);
  }
}

void ReqSwitchServer::MergeFrom(const ReqSwitchServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.has_client_id()) {
    mutable_client_id()->::NFMsg::Ident::MergeFrom(from.client_id());
  }
  if (from.self_serverid() != 0) {
    set_self_serverid(from.self_serverid());
  }
  if (from.target_serverid() != 0) {
    set_target_serverid(from.target_serverid());
  }
  if (from.gate_serverid() != 0) {
    set_gate_serverid(from.gate_serverid());
  }
  if (from.sceneid() != 0) {
    set_sceneid(from.sceneid());
  }
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
}

void ReqSwitchServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwitchServer::CopyFrom(const ReqSwitchServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwitchServer::IsInitialized() const {
  return true;
}

void ReqSwitchServer::Swap(ReqSwitchServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSwitchServer::InternalSwap(ReqSwitchServer* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(client_id_, other->client_id_);
  swap(self_serverid_, other->self_serverid_);
  swap(target_serverid_, other->target_serverid_);
  swap(gate_serverid_, other->gate_serverid_);
  swap(sceneid_, other->sceneid_);
  swap(groupid_, other->groupid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSwitchServer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSwitchServer::InitAsDefaultInstance() {
  ::NFMsg::_AckSwitchServer_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void AckSwitchServer::clear_selfid() {
  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSwitchServer::kSelfidFieldNumber;
const int AckSwitchServer::kSelfServeridFieldNumber;
const int AckSwitchServer::kTargetServeridFieldNumber;
const int AckSwitchServer::kGateServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSwitchServer::AckSwitchServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckSwitchServer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSwitchServer)
}
AckSwitchServer::AckSwitchServer(const AckSwitchServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::NFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  ::memcpy(&self_serverid_, &from.self_serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gate_serverid_) -
    reinterpret_cast<char*>(&self_serverid_)) + sizeof(gate_serverid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSwitchServer)
}

void AckSwitchServer::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_serverid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(gate_serverid_));
}

AckSwitchServer::~AckSwitchServer() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSwitchServer)
  SharedDtor();
}

void AckSwitchServer::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
}

void AckSwitchServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckSwitchServer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSwitchServer& AckSwitchServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckSwitchServer.base);
  return *internal_default_instance();
}


void AckSwitchServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && selfid_ != NULL) {
    delete selfid_;
  }
  selfid_ = NULL;
  ::memset(&self_serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_serverid_) -
      reinterpret_cast<char*>(&self_serverid_)) + sizeof(gate_serverid_));
  _internal_metadata_.Clear();
}

bool AckSwitchServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckSwitchServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 self_serverid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target_serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gate_serverid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gate_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckSwitchServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckSwitchServer)
  return false;
#undef DO_
}

void AckSwitchServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_selfid(), output);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->self_serverid(), output);
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->target_serverid(), output);
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gate_serverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckSwitchServer)
}

::google::protobuf::uint8* AckSwitchServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_selfid(), deterministic, target);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->self_serverid(), target);
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->target_serverid(), target);
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gate_serverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSwitchServer)
  return target;
}

size_t AckSwitchServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSwitchServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSwitchServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSwitchServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSwitchServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSwitchServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSwitchServer)
    MergeFrom(*source);
  }
}

void AckSwitchServer::MergeFrom(const AckSwitchServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
  }
  if (from.self_serverid() != 0) {
    set_self_serverid(from.self_serverid());
  }
  if (from.target_serverid() != 0) {
    set_target_serverid(from.target_serverid());
  }
  if (from.gate_serverid() != 0) {
    set_gate_serverid(from.gate_serverid());
  }
}

void AckSwitchServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSwitchServer::CopyFrom(const AckSwitchServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSwitchServer::IsInitialized() const {
  return true;
}

void AckSwitchServer::Swap(AckSwitchServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSwitchServer::InternalSwap(AckSwitchServer* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(self_serverid_, other->self_serverid_);
  swap(target_serverid_, other->target_serverid_);
  swap(gate_serverid_, other->gate_serverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckSwitchServer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqEnterGameServer* Arena::CreateMaybeMessage< ::NFMsg::ReqEnterGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqEnterGameServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckEnterGameSuccess* Arena::CreateMaybeMessage< ::NFMsg::ReqAckEnterGameSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckEnterGameSuccess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqHeartBeat* Arena::CreateMaybeMessage< ::NFMsg::ReqHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqHeartBeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage< ::NFMsg::ReqLeaveGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqLeaveGameServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::PlayerEntryInfo* Arena::CreateMaybeMessage< ::NFMsg::PlayerEntryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::PlayerEntryInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckPlayerEntryList* Arena::CreateMaybeMessage< ::NFMsg::AckPlayerEntryList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckPlayerEntryList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckPlayerLeaveList* Arena::CreateMaybeMessage< ::NFMsg::AckPlayerLeaveList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckPlayerLeaveList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckSynData* Arena::CreateMaybeMessage< ::NFMsg::ReqAckSynData >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckSynData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckPlayerMove* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerMove >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerMove >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckPlayerChat_ChatContainer* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerChat_ChatContainer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerChat_ChatContainer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckPlayerChat* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerChat >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerChat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckPlayerPosSync* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerPosSync >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerPosSync >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::EffectData* Arena::CreateMaybeMessage< ::NFMsg::EffectData >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::EffectData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckUseSkill* Arena::CreateMaybeMessage< ::NFMsg::ReqAckUseSkill >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckUseSkill >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckUseItem* Arena::CreateMaybeMessage< ::NFMsg::ReqAckUseItem >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckUseItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckSwapScene* Arena::CreateMaybeMessage< ::NFMsg::ReqAckSwapScene >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckSwapScene >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckHomeScene* Arena::CreateMaybeMessage< ::NFMsg::ReqAckHomeScene >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckHomeScene >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ItemStruct* Arena::CreateMaybeMessage< ::NFMsg::ItemStruct >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ItemStruct >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::CurrencyStruct* Arena::CreateMaybeMessage< ::NFMsg::CurrencyStruct >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::CurrencyStruct >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckReliveHero* Arena::CreateMaybeMessage< ::NFMsg::ReqAckReliveHero >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckReliveHero >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqPickDropItem* Arena::CreateMaybeMessage< ::NFMsg::ReqPickDropItem >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqPickDropItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAcceptTask* Arena::CreateMaybeMessage< ::NFMsg::ReqAcceptTask >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAcceptTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqCompeleteTask* Arena::CreateMaybeMessage< ::NFMsg::ReqCompeleteTask >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqCompeleteTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAddSceneBuilding* Arena::CreateMaybeMessage< ::NFMsg::ReqAddSceneBuilding >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAddSceneBuilding >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSceneBuildings* Arena::CreateMaybeMessage< ::NFMsg::ReqSceneBuildings >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSceneBuildings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckSceneBuildings* Arena::CreateMaybeMessage< ::NFMsg::AckSceneBuildings >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSceneBuildings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqStoreSceneBuildings* Arena::CreateMaybeMessage< ::NFMsg::ReqStoreSceneBuildings >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqStoreSceneBuildings >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckCreateClan* Arena::CreateMaybeMessage< ::NFMsg::ReqAckCreateClan >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckCreateClan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSearchClan* Arena::CreateMaybeMessage< ::NFMsg::ReqSearchClan >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSearchClan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckSearchClan_SearchClanObject* Arena::CreateMaybeMessage< ::NFMsg::AckSearchClan_SearchClanObject >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSearchClan_SearchClanObject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckSearchClan* Arena::CreateMaybeMessage< ::NFMsg::AckSearchClan >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSearchClan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckJoinClan* Arena::CreateMaybeMessage< ::NFMsg::ReqAckJoinClan >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckJoinClan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckLeaveClan* Arena::CreateMaybeMessage< ::NFMsg::ReqAckLeaveClan >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckLeaveClan >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckOprClanMember* Arena::CreateMaybeMessage< ::NFMsg::ReqAckOprClanMember >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckOprClanMember >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqEnterClanEctype* Arena::CreateMaybeMessage< ::NFMsg::ReqEnterClanEctype >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqEnterClanEctype >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSetFightHero* Arena::CreateMaybeMessage< ::NFMsg::ReqSetFightHero >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSetFightHero >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSwitchFightHero* Arena::CreateMaybeMessage< ::NFMsg::ReqSwitchFightHero >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSwitchFightHero >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqBuyItemFromShop* Arena::CreateMaybeMessage< ::NFMsg::ReqBuyItemFromShop >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqBuyItemFromShop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::PVPPlayerInfo* Arena::CreateMaybeMessage< ::NFMsg::PVPPlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::PVPPlayerInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSearchOppnent* Arena::CreateMaybeMessage< ::NFMsg::ReqSearchOppnent >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSearchOppnent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckSearchOppnent* Arena::CreateMaybeMessage< ::NFMsg::AckSearchOppnent >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSearchOppnent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckCancelSearch* Arena::CreateMaybeMessage< ::NFMsg::ReqAckCancelSearch >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckCancelSearch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqEndBattle* Arena::CreateMaybeMessage< ::NFMsg::ReqEndBattle >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqEndBattle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckEndBattle* Arena::CreateMaybeMessage< ::NFMsg::AckEndBattle >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckEndBattle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSendMail* Arena::CreateMaybeMessage< ::NFMsg::ReqSendMail >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSendMail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSwitchServer* Arena::CreateMaybeMessage< ::NFMsg::ReqSwitchServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSwitchServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckSwitchServer* Arena::CreateMaybeMessage< ::NFMsg::AckSwitchServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSwitchServer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
